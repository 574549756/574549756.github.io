{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1521737152044},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1521737152044},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1521737152044},{"_id":"themes/hexo-theme-next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1521737152044},{"_id":"themes/hexo-theme-next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1521737152044},{"_id":"themes/hexo-theme-next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1521737152044},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1521737152044},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1521737152044},{"_id":"themes/hexo-theme-next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1521737152044},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1521737152044},{"_id":"themes/hexo-theme-next/_config.yml","hash":"ffd7c4819cbb5880aab19dca1e6fbc665a13fed2","modified":1522522427552},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"fe22a450cc1272b7ac5476e6b33a999f8b8a2034","modified":1521737152044},{"_id":"themes/hexo-theme-next/bower.json","hash":"b133dd92c7a825745a3b74474c2d738d9fd8ff07","modified":1521737152044},{"_id":"themes/hexo-theme-next/README.md","hash":"8ae619024365621114e7ec7ba1fae5833cbd0cb9","modified":1521737152044},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1521737152044},{"_id":"themes/hexo-theme-next/package.json","hash":"77f15fd8e1bf54fe9e04513e38a70823225256cc","modified":1521737152048},{"_id":"themes/hexo-theme-next/.git/FETCH_HEAD","hash":"8c9f71cda550f5aa72c3a6ac53b7e6d20906b9e2","modified":1522522367218},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1521737152032},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1521737152032},{"_id":"themes/hexo-theme-next/.git/index","hash":"246e1e16175766d51ee9791b5dee3581b143dc8a","modified":1521737559524},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"68fdac6e43eb2af7abd77df331097a7f9de4de2d","modified":1521737152032},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"476c9bb6616818be9d86567ad4e2e539c0e0da2f","modified":1521737152044},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1521737152044},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1521737152044},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1521737152044},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"1bbdd20d025010ec57225712be82988a26485836","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"9f90a1a2df8c54edd3c8d99714ef0ce175983938","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"d047b8a3d9aa49b478a33e5a326195d460cb4589","modified":1521737152044},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"5803acd1f338db83a3b8d99eebbf163083e02520","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"833a2213d31be45a12b8e4e5e609073978bd251b","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"3f9b2444f12251727ebbc28159f02e9e9489742e","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"8e2d079b46076996cc9343213d5bf7da8178d32d","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"ca9845dc76f5710b4c6fba5fe25ff0d2fcf0adaa","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/_en.yml","hash":"2397256c752276df666c1ff579902abb367b2380","modified":1521737152044},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/ar.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/bg.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/cs.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/bn.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/da.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"f4dc655d4bd396b9c309da2a99b42c0456c3fe16","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/el.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/et.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152044},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/fi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"dacb82b46d7b79656cdb75768a031fa73f178477","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/hi.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/hr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/hu.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/he.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"f0fb26ab84e5d0508ddc07bd67d581033520bb43","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"c89ef3ed946a150f052f470f71393db6a6d3acaa","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"02029ef467628369a88d1022746b861dca3fb921","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/jv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"c95a00066bda4c04ce7bf65f8bf08e82c4d8fbcf","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/lv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/lt.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/ms.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"8fc1165a138081d25ff4c171dea2980ce71fe2b0","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/no.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/pl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/pa.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"268188db09c6779a570c8fc647ccc1a73322476c","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"d8898007460ec50eb9969ba38d1b030613260ce7","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/ro.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/sl.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/sr.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/sv.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"26ae39b50887dcf0bf3ca3d820e5382fc11cc996","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/th.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"efc298288935bf892efc9707b1ae4ea92d5fb7b4","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"e1abab282917fcad60368e7e754ba1a70f888f38","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"182c3915292297c82a862b4c87dd5847e87a3c17","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"7792081d90122327f913f224f31965460936df5a","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"f7b3304e44959f74149a01d5f140fef64bfb3fa1","modified":1521737152048},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"1f025215f1ac03dd4db9b4f87aa393ee43494bc3","modified":1521737152048},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1521737152064},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1521737152064},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1521737152064},{"_id":"source/_posts/DOM.md","hash":"adf30c653e1fa6ee3cde9599c7cfd15705049cc4","modified":1524670508000},{"_id":"source/_posts/JavaScript-函数.md","hash":"cba8f5ed923f65997437cd82dd4bd4c0714629f8","modified":1524929541000},{"_id":"source/_posts/JSONP.md","hash":"b4175b9d7653f829566e8092e31e0a10b75a5298","modified":1525729418000},{"_id":"source/_posts/JavaScript-对象.md","hash":"3ea199f903e153ceaf59a9de6b112e37fe43f356","modified":1523537994073},{"_id":"source/_posts/JavaScript-数据.md","hash":"9200fb1d22cb670a8d358ac0a1d51bab9978f002","modified":1523449944000},{"_id":"source/_posts/JavaScript-数组.md","hash":"9dcb4c5d3e842eb8c16df529152bb1d591415964","modified":1524426323521},{"_id":"source/_posts/JavaScript-记了两个API.md","hash":"0d64a3ac03e735834ec508a6eafc4e809bdb38ca","modified":1524065125000},{"_id":"source/_posts/JavaScript-类型.md","hash":"fcc121ef6f95100e90979883339984fabb64a6a9","modified":1523439407000},{"_id":"source/_posts/canvas画板.md","hash":"b6f7cc51ee7cdd7628ac9e140aebad302000ad72","modified":1523259710999},{"_id":"source/_posts/jQuery-始.md","hash":"e265554c906f7aac41fc911c9850ecfaa71b7fa8","modified":1525719438000},{"_id":"source/_posts/入门-CSS-II.md","hash":"f96ca78219be4f26d5523799410598eaea8eb70e","modified":1523334177000},{"_id":"source/_posts/入门-HTML-II.md","hash":"6524853dba889b756a38016888256ad536ebbdf1","modified":1523334923709},{"_id":"source/_posts/入门-CSS.md","hash":"234e6ce5c67c1845a6fa1d34aedf37b5ad1244da","modified":1523334113650},{"_id":"source/_posts/入门-HTML.md","hash":"d675a43b263a9b28888a78ff8b619b7de2f2df87","modified":1521805071470},{"_id":"source/_posts/入门-HTTP.md","hash":"8b4d7f210586de93459e5c500658ea5cdb179b04","modified":1521803704580},{"_id":"source/_posts/入门-JavaScript.md","hash":"56b9e443e6fbf1e60fa905ac05eec3f9f0610ae1","modified":1524758877956},{"_id":"source/_posts/命令行使用.md","hash":"464b13efd5ffb77a63d558ceb63d499a319beb03","modified":1521291179577},{"_id":"source/_posts/入门-算法初级.md","hash":"19b6df3853f6d09d14bd9beb81821b123371746d","modified":1522345382679},{"_id":"source/_posts/脚本入门.md","hash":"55f781469aaa8eb768703f834011b1c2af8e9a6d","modified":1521469407755},{"_id":"source/_posts/配置Hexo博客.md","hash":"df146b1b2d2b8799a43fe292b9a9d5a1026ceff4","modified":1521795893782},{"_id":"source/_posts/重构-始.md","hash":"278f747ac027c8c21bd5a1e08498a0c0170185f2","modified":1524933371889},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152052},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1521736951658},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"4b01af31019f0f9a05ba1e723d774650e3f57e51","modified":1521737152032},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"98ef4dc1a7a12320211ffb36d264cd86ffcce0dd","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"cbb419ccef174ef1a3fff5fc74261c600fdeec0e","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"1c7df019737656fdfd8d124c7c045a64ac8a2a8d","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"24753b3ddc287519252a25ee0496e83db4720ad6","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1521737152044},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"ff13616581bab8c836505e11bd425a6cbf0ce4ff","modified":1521737152044},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"464082e431ea5b06df782d5f312ee25be9e5f169","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"aa620c582143f43ba1cb1a5e59240041a911185b","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"7b85cd74fe673d1c842e705a18ae2e2e04f5d391","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"355ddd5b8af696f7bffb183addd7e84c0a4e2123","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"fea45ab314b9ea23edab25c2b8620f909d856b1d","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"f62e6198dcc41b1cb6a1036094e724065d4e4008","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/header.swig","hash":"6bdae92508fb5009b023386341f3b161a4ac6c70","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/sub-menu.swig","hash":"9783a9569fe8344ed287013156e52ca1b0a25544","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1521737152048},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1521737152052},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1521737152056},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152048},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521737152052},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"783d4126e9ad5de587b4400a1f2fa95868452c5d","modified":1521737152032},{"_id":"themes/hexo-theme-next/.git/objects/0b/8a1797244de2c0eef5a4ea30aed84ef32c8b6e","hash":"88928a7ab01b1dd751e97474235785f3af76a8d0","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/0b/f2e1519dfc314251cf4cd7143577f5fb85dc74","hash":"64a23eacd3b21aedaf5d33a661da50ebc2670a9d","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/14/3de53cd5c8df362382077d10f011cc356da962","hash":"b30e8fb2d17ac72fbd1a6da437e2fc063fb649b0","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/15/75683f44aa6b4780088028787c9c6a6e43a1a0","hash":"c910bdbadfb223fcae4eb79ff55ca7d3efc286c4","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/19/1ba83d6cf0056e1dd88de62df18a7fc59bbb77","hash":"4b2075e3751f9da85f97a9439e1d54244d92acb8","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/1d/b89cf312289fdd8f29c42ff3991c3a7cdfa995","hash":"3dd138afaa93549f9aee029d27d8f8f540bb2d02","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/1e/3efe69612512a3fb4619baaeaa5042d517b575","hash":"84a57d54be1a6d681fa8f2e6640d774627df85aa","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/25/67ffc74ca031d7f2b1cc61f4f1042881d6c5cc","hash":"8056edc35ef2b7d5bf4f7736e7f89ed8ba175336","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/2a/54ff480c07941fadbccbd3e8cc5e49cf6a7702","hash":"23abe971fcb77e19cba8c3615f87d98647ba735b","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/2a/841a9904962cd4d1d55689c4b0a0449cb18b3a","hash":"da3cce9a1bacf14a9d9fa398e0971010867a4120","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/26/5af45e36baedeeb6287c0d8c4c0dbb90449b69","hash":"ce8240d822d5134db91790640ffc0ee6c56b7387","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/2f/5124516f971272e2cb3c6009d3cedb5d643e2c","hash":"57a8e83ec4549b9ef2fb91ab4342d40efbcad469","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/31/e2afd01e53f854de8e328e2e62553f0a22ec37","hash":"8c4651c9ec8e64f130cd154e72497c1b66713c21","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/3e/71b0a3105f4a713d6ad01b55c164e68cfbe74c","hash":"0d2e13ced6f2b92ef2dc1fecad92ebd48f0b2592","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/3e/f592a48c4170acf672027627037c06144faff2","hash":"3123eee33358024cb298d9e3865cd7f12dd76c21","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/40/af73380c4cc66102a67ddd1cf63db32ae050ea","hash":"e7785a3dc0dfd54c06dafa617ef8d882a2d97eda","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/45/1ee94ac49af7e4c78a3a4fa597d5c6841329ea","hash":"1ff24f496aa4e2d333cbeeef4760d25cce1b9111","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/46/c76f1baa8377a07444dfc76c32ecfd80ff3ad1","hash":"5f16d204a8f11f414374945c57cc4efda18b9edc","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/47/781e31d68375eb30168a6423264e7c4b32df7d","hash":"46254660d8aca19e835ab50e970ecac8feb2e451","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/50/4ea75b4e1175b37b0389ea17481191f5fbb85e","hash":"624c0c6898aa7e17d78b9e24eb3981c858c8fdf9","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/50/d85ea184105882f19ca8aa700ab45eddb762f7","hash":"fc7b5b7c3401167b36ec55ed2f0f5ccee35f4d10","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/53/3d2925546421cb3c9c9741269eed662250d32b","hash":"d1cfc37d7f44011f96a9113e656b5d7ef2f78bb3","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/53/5ba53b9d140ada457553fba4610a7aa01a64b2","hash":"dd500228cd2d8c1eae767c02e4984f8f9d7d37b9","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/56/c1281ee121affb99f93e4139c291f84ac3f973","hash":"d28f74a828f006faf0d8b03a2f2afab1a5d62347","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/5e/0eadd14cb733d978190b2e6bfa87008b4205d6","hash":"f9ed5430ab565cc3e5fe5441efdc7baa4659136c","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/5e/683d7d7a76781205c00db24f339bd9253383a1","hash":"dcd21073c0319cc436e16c2cf5226eb9c1ee7d73","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/62/f7607c2e7b320571fd8385db2e73eff2e8ec0b","hash":"e13e18c0444be5fea9711a166eded62db08f3586","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/63/cd8a47adf07c81dc7b7c994dcfb97819b89cef","hash":"c2dba4f04bdf5cd5bcb33a0ded3440f4cf9ebf64","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/6b/6e927efd9cfa0814707441c40c33a1d3ad3ae9","hash":"1f35ae9f41535f48fb4973bd78dc279a3896c465","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/70/164fdf21e5d85e3e0a26c70907402759af85af","hash":"1d182881f36972731b68e3abaa32335921d38e67","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/7a/1184afa9a9be39c4dfd97ca74d27041129d81b","hash":"20ff42c1ba40344267ddb004f42572601b3d48fb","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/89/c01dc7d5f9f2abe3d9ec198250b30370d59728","hash":"146eb402dce45dd6f62a80dc86e526d30c129de3","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/84/0b1f607dca3e3a95fbe2892d2a8ee133f64349","hash":"77cfef1fc346f8d57c7ecf2f05283f4554966894","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/8d/0c7efd183f5f9164efa7fa5387b0c2e47ca9de","hash":"1b501169e37ae6a120cd60f5a417512714920f11","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/8d/9fe276ace94eab5b00f50520604b7134804d41","hash":"f14ac8a90013aeede736af7d50bc16bef6027e75","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/8e/7596f914f2abfad0b199d15255634ecd01118e","hash":"d2c94fe4a14c1a3b328cec7805905d66345e5c73","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/96/044ca47021e0c65bdf5335d4a07fc379b0ea8c","hash":"c4082d108aa1897bbd50bf296ba3c5830ec64134","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/a0/173a099d48501d81ce9313689c8cf7c93b27af","hash":"662b643ddab10f469cbd5158604ac53661de7f41","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/a2/c18190c66ec5fb5b6efdcfa23e75c587ca0486","hash":"d669401a5c940658ea64614bb8080bc02c539693","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/a3/518b6cef4c43c0045ac6c7b1f64d51dc65ef5a","hash":"fb14d320ebfe0792581fef8c91ef8d9d8909a9fe","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/a4/1cb79014cdc34de6839db1a0c402e5d3152699","hash":"2a7249658ec459d7ae191ed4f5cc8dd0ac0f5e89","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/ab/88d1fa3713c105f302b9d1245d812ef87c3e72","hash":"006bccd7561d3e0d0237f392a681d2f79d53135a","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/ac/8bda861b60e97ad849339bce65f00ad1c213a8","hash":"a1c0df6016b806f063818523cac7aed39ce184c3","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/af/88b2dd71f1f980b26d79964343b727a439f0cd","hash":"74e717915410df4bda460ae987471277dcf412d9","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/b9/54980ab31fc655be44a655713effa111ec9816","hash":"5b90e5a93d30b2c99d54ad63fb53247fae328433","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/bd/6c789c43945c318b6913300f3da666d4a9445e","hash":"b5663b49e8ffb1f3cef3c41b58bc6c357c057932","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/be/5b41cad457b97d5c200a23f875b1f873a070b4","hash":"8becd9545801fc8986d76c7a4a6cb1ad3946b5f3","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/c6/aaa426078a8b3c2925f2c0736914cc069ab9b7","hash":"7ad9447c3f9bf2a142fff7af302da9a9f0a8b068","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/c9/9ffefb203b2090e915061c4ed1ee5e2f2d6065","hash":"b00cf347095fbe570a9edc784fe961f64ee155e2","modified":1522522367210},{"_id":"themes/hexo-theme-next/.git/objects/ca/2554bcfe766a01def2cb723c52a020d94a2060","hash":"146bac7876b1f89634eff57f552248f22d99cb46","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/d2/97cf55c16c902420f4b28798ff0f1463489f95","hash":"07bf45f12394c9d444239c9a7c4eb9ff12fbe755","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/d9/5bde0ee12685f93e7e61d39041805ccda3717a","hash":"dea1b6cd885499572594bf817528e796914c379d","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/df/ebfa5d31f889c414ab498341f0c05f8606edae","hash":"b0804c2b6cb4acc2ffaf1b484aeda8545e448b17","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/da/f74f74fcdd050bc37b81f1a34dd907bd1e88ff","hash":"370d9ef011ace245d9de3927dc589f81b33cd8ba","modified":1522522367206},{"_id":"themes/hexo-theme-next/.git/objects/e3/6744904cf7925939cf7b7ddf9529cab24cc73f","hash":"bf28c5c607083b96d82eb8bcd322378fe79f1cad","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/e3/e42fb963e582a148c9665bb4d1ccbc9c1792ad","hash":"ff5fb1d60b2451034100b0f25a9eceb1184d99ca","modified":1522522367202},{"_id":"themes/hexo-theme-next/.git/objects/ea/2e1d52b4bf230c477b035b5902aa23e101a92f","hash":"922320e56900361e22640cbd486ac867569991d0","modified":1522522367202},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge-1.swig","hash":"7ffc5c159ab566805ceda6b8c7a4149a7e296116","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge-2.swig","hash":"7b96a0e6079e845573338523cea4437817a4b1e1","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"6a04cd1ef9ebac103d86b61505fa9b0f26268fdc","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"cd7e3331a61939c820e0437bf5d815cb0a42fefb","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"9f7aa33a620aea6ede1fb907b61fd071c018c525","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"2fbee33a4ccd7c8217c73e85a9a1488170e05629","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"c0eb6123464d745ac5324ce6deac8ded601f432f","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"011ae6303afacddabc4ddf570fe3dd227569cd4f","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1521737152048},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"bb67eb5b5f301a92503c81b1f8edd2a4d1fcc879","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521737152064},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521737152064},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521737152064},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-b24de0fb01b221f996a66e36f60fd216e49c2998.idx","hash":"41a83a6c5fdeaf25e426afea65176e4f4c5d73a2","modified":1521737152004},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521737152060},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"4b01af31019f0f9a05ba1e723d774650e3f57e51","modified":1521737152032},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1521737152032},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/master","hash":"81c10f37e3a9a23c145030d84bf03adc71f603f1","modified":1522522367218},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1521737152048},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1521737152048},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"18309b68ff33163a6f76a39437e618bb6ed411f8","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"a863f2c8bae1fbccdc181a5d178b808cd80c5b5e","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1521737152056},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521737152060},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521737152060},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521737152064},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521737152060},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521737152060},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"4b01af31019f0f9a05ba1e723d774650e3f57e51","modified":1521737152032},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/master","hash":"836d1a67e3efabc2e8156bb59bd016ff6e81edd0","modified":1522522367218},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"ca89b167d368eac50a4f808fa53ba67e69cbef94","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"0b57ca04dc3998cf70bb90d777b0db05f3928b82","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521737152052},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521737152060},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-b24de0fb01b221f996a66e36f60fd216e49c2998.pack","hash":"258c29daafdd68c0c0da10aa0a27b34f7046a235","modified":1521737152004},{"_id":"public/2018/04/02/入门-JavaScript/index.html","hash":"c325d632fa7a0736e0c1796beae565caa783ff13","modified":1525729439432},{"_id":"public/2018/03/29/入门-算法初级/index.html","hash":"443d2b1a2915884b970b93bb415ecd1b4dd6b0f5","modified":1525729439432},{"_id":"public/2018/03/17/脚本入门/index.html","hash":"21e4e16078ea5c7b1bd524e5db7836c1b30c3000","modified":1525729439432},{"_id":"public/page/3/index.html","hash":"26fa21ad46e68ea66703012b2d598d3722c144f4","modified":1525729439432},{"_id":"public/tags/DOM/index.html","hash":"2ecbc0f29f5bebec8718072fea3f63a2c31aca47","modified":1525729439432},{"_id":"public/tags/JS/index.html","hash":"bf0bc7a5a2d18b3ebdadc7134361dc9fdebdc17e","modified":1525729439432},{"_id":"public/tags/JSONP/index.html","hash":"71d2c09d548964863b7dfadddc53d39def9ef728","modified":1525729439432},{"_id":"public/tags/canvas/index.html","hash":"38a50ad3f35bd37bd9240e2735c3896d1c335da9","modified":1525729439432},{"_id":"public/tags/CSS/index.html","hash":"380f29210b6d8c079b58f5c75ce0caf3c7946c67","modified":1525729439432},{"_id":"public/tags/命令行相关/index.html","hash":"e81a5e89a5ebb22306b80d3374ffea4c9b44dadd","modified":1525729439433},{"_id":"public/tags/算法/index.html","hash":"999f9fdd2fe3d731c02a7fdcbfabf5883179aa1f","modified":1525729439433},{"_id":"public/tags/Hexo博客相关/index.html","hash":"764466d81f3446af686c17a70a6c553a80d5ec4a","modified":1525729439433},{"_id":"public/tags/重构/index.html","hash":"119add2a329b98f4057f32f70b1554fb3599b704","modified":1525729439433},{"_id":"public/archives/index.html","hash":"770766c1009a09e66246f41a8f91d012f83e7957","modified":1525729439433},{"_id":"public/archives/page/3/index.html","hash":"267ebe1845e4217f60cf5c72f7c8803324201c5a","modified":1525729439433},{"_id":"public/archives/2018/page/3/index.html","hash":"53d4a9d8ce6b2409a9fe1dfc00b7fec459a55e6a","modified":1525729439433},{"_id":"public/archives/2018/03/index.html","hash":"737ad9a8f67396020eb1c8931520dae00bcef389","modified":1525729439433},{"_id":"public/archives/2018/04/index.html","hash":"2391d7505d1c87d57c6cae46fbcca19944d78e66","modified":1525729439433},{"_id":"public/archives/2018/04/page/2/index.html","hash":"80ae24f0b983e9c31d90b71e2a5bd20b9e508a14","modified":1525729439433},{"_id":"public/archives/2018/05/index.html","hash":"09c492cd9572098042a6bb168950485da91c7555","modified":1525729439433},{"_id":"public/2018/05/07/JSONP/index.html","hash":"cb78ae2cd6083ce4796adaea215db82e03d7be6b","modified":1525729439433},{"_id":"public/2018/04/28/重构-始/index.html","hash":"a448b70cf44103a42dee32296cf2d1c0fb3484a9","modified":1525729439433},{"_id":"public/2018/04/26/jQuery-始/index.html","hash":"eb50347cf5c0c7562ff0adc3018ad87ae947f713","modified":1525729439433},{"_id":"public/2018/04/25/DOM/index.html","hash":"051c36d5315f53e31e415b83d85d19c359ba5a9f","modified":1525729439434},{"_id":"public/2018/04/23/JavaScript-函数/index.html","hash":"007dc7e79e2913b2a4d76a3aefa97f1deba37ec4","modified":1525729439434},{"_id":"public/2018/04/23/JavaScript-数组/index.html","hash":"5b9ce6684f278248ffbcea2c35f98af3802a3649","modified":1525729439434},{"_id":"public/2018/04/16/JavaScript-记了两个API/index.html","hash":"ee971a692b5c851878763b1788a9a4c493760dd5","modified":1525729439434},{"_id":"public/2018/04/12/JavaScript-对象/index.html","hash":"afdcdf0e6e552037b5173f59db65a3d1b9444156","modified":1525729439434},{"_id":"public/2018/04/11/JavaScript-类型/index.html","hash":"54c57ef76bfaab36d6f33d220c4cdfef4a680b12","modified":1525729439434},{"_id":"public/2018/04/10/JavaScript-数据/index.html","hash":"7682c633eb849e2034bc9d32b067ae8ae3596903","modified":1525729439434},{"_id":"public/2018/04/05/canvas画板/index.html","hash":"f263c6209bb87c3f7bbcda434ddbd2f54dc11da8","modified":1525729439434},{"_id":"public/2018/03/27/入门-CSS-II/index.html","hash":"0935809bd17fdd32d0160b9b6f858bcdb44b8cd9","modified":1525729439434},{"_id":"public/2018/03/24/入门-CSS/index.html","hash":"60a19238960ab7f1ee60294fea3769f66f2ab4a9","modified":1525729439434},{"_id":"public/2018/03/23/入门-HTML-II/index.html","hash":"ca867d8fe6846c64e08838faae992a3e59366433","modified":1525729439434},{"_id":"public/2018/03/22/入门-HTML/index.html","hash":"77ebd1a8bd2a16bfbd95a663c7aa47d59c19676d","modified":1525729439435},{"_id":"public/2018/03/19/入门-HTTP/index.html","hash":"3cb5b76871973a4a55888a19b6ef21001bbee547","modified":1525729439435},{"_id":"public/2018/03/17/配置Hexo博客/index.html","hash":"c6650be79acc30500c8c3f95fc5eead45ca648b9","modified":1525729439435},{"_id":"public/2018/03/17/命令行使用/index.html","hash":"a827b8a2f1c01a4bdd007f743a32bdb6ca6064db","modified":1525729439435},{"_id":"public/index.html","hash":"396a815d08984c79774f3e86403f277d1fda8a8e","modified":1525729439435},{"_id":"public/page/2/index.html","hash":"6c81306e15584f5036183da15d57bbd72a39deab","modified":1525729439435},{"_id":"public/archives/page/2/index.html","hash":"4a66877f8482d59aeba34a3e01c946fe899fc017","modified":1525729439435},{"_id":"public/archives/2018/index.html","hash":"5c1815d1d119c7a08d4fa8adfed2f95bce52b9c6","modified":1525729439435},{"_id":"public/archives/2018/page/2/index.html","hash":"5ad721d48470370369f9e4e96a645baaadef47a4","modified":1525729439435},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1525729439441},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1525729439442},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1525729439442},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1525729439442},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1525729439442},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1525729439442},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1525729439442},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1525729439442},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1525729439442},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1525729439442},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1525729439442},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525729439442},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1525729439442},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1525729439442},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1525729439442},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1525729439442},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1525729439443},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1525729439443},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1525729439443},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1525729439443},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1525729439931},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1525729439934},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1525729439940},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1525729439940},{"_id":"public/js/src/bootstrap.js","hash":"531cdedd7fbe8cb1dab2e4328774a9f6b15b59da","modified":1525729439940},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1525729439940},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1525729439940},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1525729439940},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1525729439940},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1525729439940},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1525729439940},{"_id":"public/js/src/utils.js","hash":"bb67eb5b5f301a92503c81b1f8edd2a4d1fcc879","modified":1525729439940},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1525729439940},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1525729439940},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1525729439940},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1525729439940},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1525729439941},{"_id":"public/css/main.css","hash":"d442b2732b71adae751f1e9bcec1501c26a9f4c4","modified":1525729439941},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1525729439941},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1525729439941},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1525729439941},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1525729439941},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1525729439941},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1525729439941},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1525729439941}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"DOM","date":"2018-04-25T11:02:01.000Z","_content":"\n# 1.DOM是什么\n\nDocument Object Model\nXML文档\n把文档变成对象的一种模型\n\n## I.DOM标准\n`Element`对象：`body` `head` `meta` `title` `script` `h1` `h2` `p`这些都是`Element`对象\n`Text`对象专门指文本：`span` 之类的\n`Document`对象：`html`因为它是用`Document`构造出来的\n`Comment`对象：注释\n\n而他们原型链的顶端叫做`Node`\n就像我们熟知的`Object.prorotype`\n\n每一个标签都有它相应的构造函数，浏览器看到标签就用对应的构造函数给它构造出一个对应的内存中的对象。\n\n           构造函数\n页面中节点  ========>  对象\n\n# 2.Node的接口\n就像讨论Object.prototype一样\n需要注意`Node`也是一种`object`\n\n因为超级多，记几个单词然后：\n`child`/`children`/`parent`\n`node`\n`first`/`last`\n`next`/`previous`\n`sibling`/`siblings`\n`type`\n`value`/`text`/`content`\n`inner`/`outer`\n`element`\n互相组合\n\n## I.childNodes\n所有的子节点（不是子元素）\n所以一旦有回车，就会得到一个text\n\n所以想要所有标签请使用`children`\n\n`nextSibling`是下一个兄弟节点（有回车也会返回text）\n\n`nextElementSibling`才是下一个兄弟标签（就是兼容性不好）\n\n导致这一堆奇怪问题的原因:`DOM`不是设计来给`HTML`用的，是给`XML`用的，所以不是很配套。\n\n## II.常用接口\n\n|接口|作用|备注|\n|:---:|:---:|:---:|\n|childNodes|所有子节点||\n|firstChild|第一个子节点|\n|innerText|内容文本|IE加的那点料，在小于等于IE11中修改`innerText`会移除当前元素的子节点，且永久性破坏所有后代文本节点|\n|lastChild|最后一个子节点|\n|nextSibling|下一个节点|\n|nodeName|节点名称|（获取的是大写除了svg）|\n|nodeType|节点类型|1:element 3:text 8:comment 9:document 10:DOCTYPE 11:DocumentFragment|\n|nodeValue|value是一个包含当前节点的值的字符串（如果有的话）。||\n|outerText|是一个非标准的属性。作为一个获得器，它返回与Node.innerText一致的值|作为一个设置器，它将删除当前节点并将其替换为给定的文本。|\n|ownerDocument|会返回当前节点的顶层的 document 对象|返回祖先|\n|parentElement|父级元素||\n|parentNode|父级节点|和上面那位作用不一样吗？|\n|previousSibling|上一个兄弟节点||\n|textContent|内容文本|FF和Opera加的那点料,会获取所有元素内容，包括`<script>`和`<style>`|\n\n# 3.方法\n|方法|作用|\n|:----:|:----:|\n|appendChild()|将一个节点添加到指定父节点的子节点列表末尾。|\n|cloneNode()|拷贝节点，可选深拷贝或浅拷贝|\n|contains()|判断传入的节点是否为该节点的后代节点。|\n|hasChildNodes()|一个元素是否有子节点|\n|insertBefore()|把一个东西插入一个东西的前面|\n|isEqualNode()|两个节点是否相等|\n|isSameNode()|两个节点是否是同一个节点`===`|\n|removeChild()|（从页面）干掉辣个子节点（但是他还在内存里）|\n|replaceChild()|替换子节点 （被替换的还在内存里）|\n|normalize()|常规化|\n\n## I.cloneNode()\n\n`var dupNode = node.cloneNode(deep)`\n\ndeep是可选参数，是否采用深拷贝。如果为true，则该节点的所有后代节点也都会被克隆，如果为false，则只克隆该节点本身\n\n### 深拷贝和浅拷贝\n\n深拷贝和浅拷贝只针对Object，Array这种复杂类型\n简单来说，浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。\n\n## II.normalize()\n\n```\nvar wrapper = document.createElement(\"div\");\n\nwrapper.appendChild(document.createTextNode(\"part 1\")); //俩都是文本\nwrapper.appentChild(document.createTextNode(\"part 2\"));\n\n//这时候 wrapper.childNodes.length === 2\n//wrapper.childNodes[0].textContent === \"part 1\"\n//wrapper.childNodes[1].textContent === \"part 2\"\n\nwrapper.normalize();\n\n//常规化以后 wrapper.childNodes.length === 1\nwrapper.childNodes[0].textContent === \"Part 1 Part 2\"\n```\n\n使这个 拆成两部分的文本合在一起了。（把不合常规的常规化）\n\n## III.学习方法\n\n1.他写的什么就是什么意思，看懂单词就明白它是干嘛的了\n2.看懂单词还是不知道怎么用？查MDN吧...\n\n把该记的特殊的记住就可以了。\n\n# 4.Document接口\n\n|接口|作用|备注|\n|:---:|:---:|:---:|\n|anchors|获取页面`<a>`标签|`H5已弃用`。由于向后兼容的原因，该属性只返回那些拥有`name`属性的`a`元素，而不是拥有`id`属性的`a`元素|\n|body|获取`<body>`元素||\n|characterSet|就是`char`（字符）字符编码|`document.characterSet`看它的字符编码是什么|\n|childElementCount|返回一个无符号长整型数字，表示给定元素的子元素数|\n|children|获取子元素咯|`document`是`html`的父级哟，但`html`还是根元素|\n|doctype|就是`!DOCTYPE`协议咯|\n|documentElement|返回文档对象的根元素|`HTML`文档的<html>元素|\n|domain|域名||\n|fullscreen||\n|head|头部|\n|hidden|是否被隐藏？|返回布尔值|\n|images|获取页面中所有`<img>`标签|\n|links|获取页面中所有`<a>`标签|\n|location|返回一个 Location 对象|包含有文档的 URL 相关的信息，并提供了改变该 URL 和加载其他 URL 的方法。|\n|onxxxxxxxx|当xxx时的事件监听|`onclick` `onmousemove` `onmousedown` 之类的|\n|origin|源||\n|plugins|检测用户有没有开启插件||\n|readyState|检测用户是否是否下载完毕||\n|referrer|引荐者|发请求的时候，浏览器要告诉服务器，它是通过什么渠道进来的。服务器可以通过`referrer`来拒绝为其他网站提供服务|\n|scripts|获取所有`script`标签|\n|scrollingElement|正在滚动的元素|\n|styleSheets|获取所有CSS||\n|title|获取所有`<title>`|\n|visibilityState|获取页面是否被显示（当前标签是否被激活）|返回布尔值|\n\n## I.方法\n|方法|作用|备注|\n|:---:|:---:|:---:|\n|close()|关闭文档|关闭向当前文档的数据写入，想要打开要使用document.open()|\n|createDocumentFragment()|创建一个DocumentFragment||\n|createElement()|创建由tagName 指定的HTML元素||\n|createTextNode()|创建一个文本节点||\n|execCommand()|执行一个命令|允许命令操纵可编辑区域的内容，主要用于富文本编辑器，相关内容查mdn|\n|exitFullscreen()|退出全屏||\n|getElementById()|通过`id`获取元素||\n|getElementsByClassName()|通过`class`名获取元素||\n|getElementsByName()|通过`name`属性获取元素||\n|getElementsByTagName|通过`标签名`获取元素||\n|getSelection()|获取用户选中的文本||\n|hasFocus()|用户是否`focus`到当前页面||\n|open()|和`close`对应||\n|querySelector()|通过`选择器（css）`获取元素|抄jQuery的|\n|querySelectorALL()|通过`选择器（css）`获取元素（返回所有元素）||\n|registerElement()|在浏览器注册一个新的 自定义元素 ，返回一个该元素的构造函数。|用的并不多...建议使用：customElements.define（）|\n|write()|写文本||\n|writeln()|写一行文本||\n\n\n### i.close()\n\n```\n<body>\nhello\n    <script>\n        documetn.write(1)\n        document.write(2)\n        setTimeout(()=>{\n            document.write(3)\n        },3000)\n    </script>\n</body>\n```\n\n`document => open => write => close => open`\n\n每次在`script`执行完以后页面会关闭，如果有延时性的`write`，就会把页面冲掉\n上面代码块中首先有`hello`和`1` `2`这时候文档close\n但是文档`close`了之后写了`3`\n所以就会把页面冲掉\n\n所以在写write的时候要谨慎设置延时和异步 \n\n# 5.Element接口\n最熟悉的`classList.add()`\n而且`Element`也可以`querySelector()`的\n可以`div.querySelector()`\n\n### i.innerHTML和innerText\n\n```\n<body>\n    <input type=\"text\" id=\"input1\"> <button id=x>写入页面</button>\n    <div id=\"output\"></div>\n</body>\n\nx.onclick = function(){\n    output.innerHTML = input1.value\n}\n\n/*x.onclick = function(){\n    output.innerText = input1.value\n}*/\n```\n\ninnerHTML可以识别写入页面的代码`<b></b>`就会加粗`<i></i>`就会变斜\n`<script></script>`怎么搞\n那麻烦了，用户真拿这个输入框把`cookie`爬了怎么办。\n所以还是很危险的\n他会把用户写的标签，真的当做开发者写的。\n\n","source":"_posts/DOM.md","raw":"---\ntitle: DOM\ndate: 2018-04-25 19:02:01\ntags: DOM\n---\n\n# 1.DOM是什么\n\nDocument Object Model\nXML文档\n把文档变成对象的一种模型\n\n## I.DOM标准\n`Element`对象：`body` `head` `meta` `title` `script` `h1` `h2` `p`这些都是`Element`对象\n`Text`对象专门指文本：`span` 之类的\n`Document`对象：`html`因为它是用`Document`构造出来的\n`Comment`对象：注释\n\n而他们原型链的顶端叫做`Node`\n就像我们熟知的`Object.prorotype`\n\n每一个标签都有它相应的构造函数，浏览器看到标签就用对应的构造函数给它构造出一个对应的内存中的对象。\n\n           构造函数\n页面中节点  ========>  对象\n\n# 2.Node的接口\n就像讨论Object.prototype一样\n需要注意`Node`也是一种`object`\n\n因为超级多，记几个单词然后：\n`child`/`children`/`parent`\n`node`\n`first`/`last`\n`next`/`previous`\n`sibling`/`siblings`\n`type`\n`value`/`text`/`content`\n`inner`/`outer`\n`element`\n互相组合\n\n## I.childNodes\n所有的子节点（不是子元素）\n所以一旦有回车，就会得到一个text\n\n所以想要所有标签请使用`children`\n\n`nextSibling`是下一个兄弟节点（有回车也会返回text）\n\n`nextElementSibling`才是下一个兄弟标签（就是兼容性不好）\n\n导致这一堆奇怪问题的原因:`DOM`不是设计来给`HTML`用的，是给`XML`用的，所以不是很配套。\n\n## II.常用接口\n\n|接口|作用|备注|\n|:---:|:---:|:---:|\n|childNodes|所有子节点||\n|firstChild|第一个子节点|\n|innerText|内容文本|IE加的那点料，在小于等于IE11中修改`innerText`会移除当前元素的子节点，且永久性破坏所有后代文本节点|\n|lastChild|最后一个子节点|\n|nextSibling|下一个节点|\n|nodeName|节点名称|（获取的是大写除了svg）|\n|nodeType|节点类型|1:element 3:text 8:comment 9:document 10:DOCTYPE 11:DocumentFragment|\n|nodeValue|value是一个包含当前节点的值的字符串（如果有的话）。||\n|outerText|是一个非标准的属性。作为一个获得器，它返回与Node.innerText一致的值|作为一个设置器，它将删除当前节点并将其替换为给定的文本。|\n|ownerDocument|会返回当前节点的顶层的 document 对象|返回祖先|\n|parentElement|父级元素||\n|parentNode|父级节点|和上面那位作用不一样吗？|\n|previousSibling|上一个兄弟节点||\n|textContent|内容文本|FF和Opera加的那点料,会获取所有元素内容，包括`<script>`和`<style>`|\n\n# 3.方法\n|方法|作用|\n|:----:|:----:|\n|appendChild()|将一个节点添加到指定父节点的子节点列表末尾。|\n|cloneNode()|拷贝节点，可选深拷贝或浅拷贝|\n|contains()|判断传入的节点是否为该节点的后代节点。|\n|hasChildNodes()|一个元素是否有子节点|\n|insertBefore()|把一个东西插入一个东西的前面|\n|isEqualNode()|两个节点是否相等|\n|isSameNode()|两个节点是否是同一个节点`===`|\n|removeChild()|（从页面）干掉辣个子节点（但是他还在内存里）|\n|replaceChild()|替换子节点 （被替换的还在内存里）|\n|normalize()|常规化|\n\n## I.cloneNode()\n\n`var dupNode = node.cloneNode(deep)`\n\ndeep是可选参数，是否采用深拷贝。如果为true，则该节点的所有后代节点也都会被克隆，如果为false，则只克隆该节点本身\n\n### 深拷贝和浅拷贝\n\n深拷贝和浅拷贝只针对Object，Array这种复杂类型\n简单来说，浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。\n\n## II.normalize()\n\n```\nvar wrapper = document.createElement(\"div\");\n\nwrapper.appendChild(document.createTextNode(\"part 1\")); //俩都是文本\nwrapper.appentChild(document.createTextNode(\"part 2\"));\n\n//这时候 wrapper.childNodes.length === 2\n//wrapper.childNodes[0].textContent === \"part 1\"\n//wrapper.childNodes[1].textContent === \"part 2\"\n\nwrapper.normalize();\n\n//常规化以后 wrapper.childNodes.length === 1\nwrapper.childNodes[0].textContent === \"Part 1 Part 2\"\n```\n\n使这个 拆成两部分的文本合在一起了。（把不合常规的常规化）\n\n## III.学习方法\n\n1.他写的什么就是什么意思，看懂单词就明白它是干嘛的了\n2.看懂单词还是不知道怎么用？查MDN吧...\n\n把该记的特殊的记住就可以了。\n\n# 4.Document接口\n\n|接口|作用|备注|\n|:---:|:---:|:---:|\n|anchors|获取页面`<a>`标签|`H5已弃用`。由于向后兼容的原因，该属性只返回那些拥有`name`属性的`a`元素，而不是拥有`id`属性的`a`元素|\n|body|获取`<body>`元素||\n|characterSet|就是`char`（字符）字符编码|`document.characterSet`看它的字符编码是什么|\n|childElementCount|返回一个无符号长整型数字，表示给定元素的子元素数|\n|children|获取子元素咯|`document`是`html`的父级哟，但`html`还是根元素|\n|doctype|就是`!DOCTYPE`协议咯|\n|documentElement|返回文档对象的根元素|`HTML`文档的<html>元素|\n|domain|域名||\n|fullscreen||\n|head|头部|\n|hidden|是否被隐藏？|返回布尔值|\n|images|获取页面中所有`<img>`标签|\n|links|获取页面中所有`<a>`标签|\n|location|返回一个 Location 对象|包含有文档的 URL 相关的信息，并提供了改变该 URL 和加载其他 URL 的方法。|\n|onxxxxxxxx|当xxx时的事件监听|`onclick` `onmousemove` `onmousedown` 之类的|\n|origin|源||\n|plugins|检测用户有没有开启插件||\n|readyState|检测用户是否是否下载完毕||\n|referrer|引荐者|发请求的时候，浏览器要告诉服务器，它是通过什么渠道进来的。服务器可以通过`referrer`来拒绝为其他网站提供服务|\n|scripts|获取所有`script`标签|\n|scrollingElement|正在滚动的元素|\n|styleSheets|获取所有CSS||\n|title|获取所有`<title>`|\n|visibilityState|获取页面是否被显示（当前标签是否被激活）|返回布尔值|\n\n## I.方法\n|方法|作用|备注|\n|:---:|:---:|:---:|\n|close()|关闭文档|关闭向当前文档的数据写入，想要打开要使用document.open()|\n|createDocumentFragment()|创建一个DocumentFragment||\n|createElement()|创建由tagName 指定的HTML元素||\n|createTextNode()|创建一个文本节点||\n|execCommand()|执行一个命令|允许命令操纵可编辑区域的内容，主要用于富文本编辑器，相关内容查mdn|\n|exitFullscreen()|退出全屏||\n|getElementById()|通过`id`获取元素||\n|getElementsByClassName()|通过`class`名获取元素||\n|getElementsByName()|通过`name`属性获取元素||\n|getElementsByTagName|通过`标签名`获取元素||\n|getSelection()|获取用户选中的文本||\n|hasFocus()|用户是否`focus`到当前页面||\n|open()|和`close`对应||\n|querySelector()|通过`选择器（css）`获取元素|抄jQuery的|\n|querySelectorALL()|通过`选择器（css）`获取元素（返回所有元素）||\n|registerElement()|在浏览器注册一个新的 自定义元素 ，返回一个该元素的构造函数。|用的并不多...建议使用：customElements.define（）|\n|write()|写文本||\n|writeln()|写一行文本||\n\n\n### i.close()\n\n```\n<body>\nhello\n    <script>\n        documetn.write(1)\n        document.write(2)\n        setTimeout(()=>{\n            document.write(3)\n        },3000)\n    </script>\n</body>\n```\n\n`document => open => write => close => open`\n\n每次在`script`执行完以后页面会关闭，如果有延时性的`write`，就会把页面冲掉\n上面代码块中首先有`hello`和`1` `2`这时候文档close\n但是文档`close`了之后写了`3`\n所以就会把页面冲掉\n\n所以在写write的时候要谨慎设置延时和异步 \n\n# 5.Element接口\n最熟悉的`classList.add()`\n而且`Element`也可以`querySelector()`的\n可以`div.querySelector()`\n\n### i.innerHTML和innerText\n\n```\n<body>\n    <input type=\"text\" id=\"input1\"> <button id=x>写入页面</button>\n    <div id=\"output\"></div>\n</body>\n\nx.onclick = function(){\n    output.innerHTML = input1.value\n}\n\n/*x.onclick = function(){\n    output.innerText = input1.value\n}*/\n```\n\ninnerHTML可以识别写入页面的代码`<b></b>`就会加粗`<i></i>`就会变斜\n`<script></script>`怎么搞\n那麻烦了，用户真拿这个输入框把`cookie`爬了怎么办。\n所以还是很危险的\n他会把用户写的标签，真的当做开发者写的。\n\n","slug":"DOM","published":1,"updated":"2018-04-25T15:35:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp330000t2g3bxzw05ny","content":"<h1 id=\"1-DOM是什么\"><a href=\"#1-DOM是什么\" class=\"headerlink\" title=\"1.DOM是什么\"></a>1.DOM是什么</h1><p>Document Object Model<br>XML文档<br>把文档变成对象的一种模型</p>\n<h2 id=\"I-DOM标准\"><a href=\"#I-DOM标准\" class=\"headerlink\" title=\"I.DOM标准\"></a>I.DOM标准</h2><p><code>Element</code>对象：<code>body</code> <code>head</code> <code>meta</code> <code>title</code> <code>script</code> <code>h1</code> <code>h2</code> <code>p</code>这些都是<code>Element</code>对象<br><code>Text</code>对象专门指文本：<code>span</code> 之类的<br><code>Document</code>对象：<code>html</code>因为它是用<code>Document</code>构造出来的<br><code>Comment</code>对象：注释</p>\n<p>而他们原型链的顶端叫做<code>Node</code><br>就像我们熟知的<code>Object.prorotype</code></p>\n<p>每一个标签都有它相应的构造函数，浏览器看到标签就用对应的构造函数给它构造出一个对应的内存中的对象。</p>\n<pre><code>构造函数\n</code></pre><p>页面中节点  ========&gt;  对象</p>\n<h1 id=\"2-Node的接口\"><a href=\"#2-Node的接口\" class=\"headerlink\" title=\"2.Node的接口\"></a>2.Node的接口</h1><p>就像讨论Object.prototype一样<br>需要注意<code>Node</code>也是一种<code>object</code></p>\n<p>因为超级多，记几个单词然后：<br><code>child</code>/<code>children</code>/<code>parent</code><br><code>node</code><br><code>first</code>/<code>last</code><br><code>next</code>/<code>previous</code><br><code>sibling</code>/<code>siblings</code><br><code>type</code><br><code>value</code>/<code>text</code>/<code>content</code><br><code>inner</code>/<code>outer</code><br><code>element</code><br>互相组合</p>\n<h2 id=\"I-childNodes\"><a href=\"#I-childNodes\" class=\"headerlink\" title=\"I.childNodes\"></a>I.childNodes</h2><p>所有的子节点（不是子元素）<br>所以一旦有回车，就会得到一个text</p>\n<p>所以想要所有标签请使用<code>children</code></p>\n<p><code>nextSibling</code>是下一个兄弟节点（有回车也会返回text）</p>\n<p><code>nextElementSibling</code>才是下一个兄弟标签（就是兼容性不好）</p>\n<p>导致这一堆奇怪问题的原因:<code>DOM</code>不是设计来给<code>HTML</code>用的，是给<code>XML</code>用的，所以不是很配套。</p>\n<h2 id=\"II-常用接口\"><a href=\"#II-常用接口\" class=\"headerlink\" title=\"II.常用接口\"></a>II.常用接口</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">接口</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">childNodes</td>\n<td style=\"text-align:center\">所有子节点</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">firstChild</td>\n<td style=\"text-align:center\">第一个子节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">innerText</td>\n<td style=\"text-align:center\">内容文本</td>\n<td style=\"text-align:center\">IE加的那点料，在小于等于IE11中修改<code>innerText</code>会移除当前元素的子节点，且永久性破坏所有后代文本节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lastChild</td>\n<td style=\"text-align:center\">最后一个子节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nextSibling</td>\n<td style=\"text-align:center\">下一个节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nodeName</td>\n<td style=\"text-align:center\">节点名称</td>\n<td style=\"text-align:center\">（获取的是大写除了svg）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nodeType</td>\n<td style=\"text-align:center\">节点类型</td>\n<td style=\"text-align:center\">1:element 3:text 8:comment 9:document 10:DOCTYPE 11:DocumentFragment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nodeValue</td>\n<td style=\"text-align:center\">value是一个包含当前节点的值的字符串（如果有的话）。</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outerText</td>\n<td style=\"text-align:center\">是一个非标准的属性。作为一个获得器，它返回与Node.innerText一致的值</td>\n<td style=\"text-align:center\">作为一个设置器，它将删除当前节点并将其替换为给定的文本。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ownerDocument</td>\n<td style=\"text-align:center\">会返回当前节点的顶层的 document 对象</td>\n<td style=\"text-align:center\">返回祖先</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentElement</td>\n<td style=\"text-align:center\">父级元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentNode</td>\n<td style=\"text-align:center\">父级节点</td>\n<td style=\"text-align:center\">和上面那位作用不一样吗？</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">previousSibling</td>\n<td style=\"text-align:center\">上一个兄弟节点</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">textContent</td>\n<td style=\"text-align:center\">内容文本</td>\n<td style=\"text-align:center\">FF和Opera加的那点料,会获取所有元素内容，包括<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3.方法\"></a>3.方法</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">appendChild()</td>\n<td style=\"text-align:center\">将一个节点添加到指定父节点的子节点列表末尾。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cloneNode()</td>\n<td style=\"text-align:center\">拷贝节点，可选深拷贝或浅拷贝</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">contains()</td>\n<td style=\"text-align:center\">判断传入的节点是否为该节点的后代节点。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hasChildNodes()</td>\n<td style=\"text-align:center\">一个元素是否有子节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insertBefore()</td>\n<td style=\"text-align:center\">把一个东西插入一个东西的前面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isEqualNode()</td>\n<td style=\"text-align:center\">两个节点是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isSameNode()</td>\n<td style=\"text-align:center\">两个节点是否是同一个节点<code>===</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">removeChild()</td>\n<td style=\"text-align:center\">（从页面）干掉辣个子节点（但是他还在内存里）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replaceChild()</td>\n<td style=\"text-align:center\">替换子节点 （被替换的还在内存里）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">normalize()</td>\n<td style=\"text-align:center\">常规化</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"I-cloneNode\"><a href=\"#I-cloneNode\" class=\"headerlink\" title=\"I.cloneNode()\"></a>I.cloneNode()</h2><p><code>var dupNode = node.cloneNode(deep)</code></p>\n<p>deep是可选参数，是否采用深拷贝。如果为true，则该节点的所有后代节点也都会被克隆，如果为false，则只克隆该节点本身</p>\n<h3 id=\"深拷贝和浅拷贝\"><a href=\"#深拷贝和浅拷贝\" class=\"headerlink\" title=\"深拷贝和浅拷贝\"></a>深拷贝和浅拷贝</h3><p>深拷贝和浅拷贝只针对Object，Array这种复杂类型<br>简单来说，浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。</p>\n<h2 id=\"II-normalize\"><a href=\"#II-normalize\" class=\"headerlink\" title=\"II.normalize()\"></a>II.normalize()</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"part 1\"</span>)); <span class=\"comment\">//俩都是文本</span></span><br><span class=\"line\">wrapper.appentChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"part 2\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时候 wrapper.childNodes.length === 2</span></span><br><span class=\"line\"><span class=\"comment\">//wrapper.childNodes[0].textContent === \"part 1\"</span></span><br><span class=\"line\"><span class=\"comment\">//wrapper.childNodes[1].textContent === \"part 2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.normalize();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//常规化以后 wrapper.childNodes.length === 1</span></span><br><span class=\"line\">wrapper.childNodes[<span class=\"number\">0</span>].textContent === <span class=\"string\">\"Part 1 Part 2\"</span></span><br></pre></td></tr></table></figure>\n<p>使这个 拆成两部分的文本合在一起了。（把不合常规的常规化）</p>\n<h2 id=\"III-学习方法\"><a href=\"#III-学习方法\" class=\"headerlink\" title=\"III.学习方法\"></a>III.学习方法</h2><p>1.他写的什么就是什么意思，看懂单词就明白它是干嘛的了<br>2.看懂单词还是不知道怎么用？查MDN吧…</p>\n<p>把该记的特殊的记住就可以了。</p>\n<h1 id=\"4-Document接口\"><a href=\"#4-Document接口\" class=\"headerlink\" title=\"4.Document接口\"></a>4.Document接口</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">接口</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">anchors</td>\n<td style=\"text-align:center\">获取页面<code>&lt;a&gt;</code>标签</td>\n<td style=\"text-align:center\"><code>H5已弃用</code>。由于向后兼容的原因，该属性只返回那些拥有<code>name</code>属性的<code>a</code>元素，而不是拥有<code>id</code>属性的<code>a</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">body</td>\n<td style=\"text-align:center\">获取<code>&lt;body&gt;</code>元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">characterSet</td>\n<td style=\"text-align:center\">就是<code>char</code>（字符）字符编码</td>\n<td style=\"text-align:center\"><code>document.characterSet</code>看它的字符编码是什么</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">childElementCount</td>\n<td style=\"text-align:center\">返回一个无符号长整型数字，表示给定元素的子元素数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">children</td>\n<td style=\"text-align:center\">获取子元素咯</td>\n<td style=\"text-align:center\"><code>document</code>是<code>html</code>的父级哟，但<code>html</code>还是根元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">doctype</td>\n<td style=\"text-align:center\">就是<code>!DOCTYPE</code>协议咯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">documentElement</td>\n<td style=\"text-align:center\">返回文档对象的根元素</td>\n<td style=\"text-align:center\"><code>HTML</code>文档的<html>元素</html></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">domain</td>\n<td style=\"text-align:center\">域名</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fullscreen</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">head</td>\n<td style=\"text-align:center\">头部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hidden</td>\n<td style=\"text-align:center\">是否被隐藏？</td>\n<td style=\"text-align:center\">返回布尔值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">images</td>\n<td style=\"text-align:center\">获取页面中所有<code>&lt;img&gt;</code>标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">links</td>\n<td style=\"text-align:center\">获取页面中所有<code>&lt;a&gt;</code>标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">location</td>\n<td style=\"text-align:center\">返回一个 Location 对象</td>\n<td style=\"text-align:center\">包含有文档的 URL 相关的信息，并提供了改变该 URL 和加载其他 URL 的方法。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onxxxxxxxx</td>\n<td style=\"text-align:center\">当xxx时的事件监听</td>\n<td style=\"text-align:center\"><code>onclick</code> <code>onmousemove</code> <code>onmousedown</code> 之类的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">origin</td>\n<td style=\"text-align:center\">源</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">plugins</td>\n<td style=\"text-align:center\">检测用户有没有开启插件</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readyState</td>\n<td style=\"text-align:center\">检测用户是否是否下载完毕</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">referrer</td>\n<td style=\"text-align:center\">引荐者</td>\n<td style=\"text-align:center\">发请求的时候，浏览器要告诉服务器，它是通过什么渠道进来的。服务器可以通过<code>referrer</code>来拒绝为其他网站提供服务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scripts</td>\n<td style=\"text-align:center\">获取所有<code>script</code>标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scrollingElement</td>\n<td style=\"text-align:center\">正在滚动的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">styleSheets</td>\n<td style=\"text-align:center\">获取所有CSS</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">获取所有<code>&lt;title&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">visibilityState</td>\n<td style=\"text-align:center\">获取页面是否被显示（当前标签是否被激活）</td>\n<td style=\"text-align:center\">返回布尔值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"I-方法\"><a href=\"#I-方法\" class=\"headerlink\" title=\"I.方法\"></a>I.方法</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">close()</td>\n<td style=\"text-align:center\">关闭文档</td>\n<td style=\"text-align:center\">关闭向当前文档的数据写入，想要打开要使用document.open()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createDocumentFragment()</td>\n<td style=\"text-align:center\">创建一个DocumentFragment</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createElement()</td>\n<td style=\"text-align:center\">创建由tagName 指定的HTML元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTextNode()</td>\n<td style=\"text-align:center\">创建一个文本节点</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">execCommand()</td>\n<td style=\"text-align:center\">执行一个命令</td>\n<td style=\"text-align:center\">允许命令操纵可编辑区域的内容，主要用于富文本编辑器，相关内容查mdn</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exitFullscreen()</td>\n<td style=\"text-align:center\">退出全屏</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementById()</td>\n<td style=\"text-align:center\">通过<code>id</code>获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementsByClassName()</td>\n<td style=\"text-align:center\">通过<code>class</code>名获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementsByName()</td>\n<td style=\"text-align:center\">通过<code>name</code>属性获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementsByTagName</td>\n<td style=\"text-align:center\">通过<code>标签名</code>获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getSelection()</td>\n<td style=\"text-align:center\">获取用户选中的文本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hasFocus()</td>\n<td style=\"text-align:center\">用户是否<code>focus</code>到当前页面</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">open()</td>\n<td style=\"text-align:center\">和<code>close</code>对应</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">querySelector()</td>\n<td style=\"text-align:center\">通过<code>选择器（css）</code>获取元素</td>\n<td style=\"text-align:center\">抄jQuery的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">querySelectorALL()</td>\n<td style=\"text-align:center\">通过<code>选择器（css）</code>获取元素（返回所有元素）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">registerElement()</td>\n<td style=\"text-align:center\">在浏览器注册一个新的 自定义元素 ，返回一个该元素的构造函数。</td>\n<td style=\"text-align:center\">用的并不多…建议使用：customElements.define（）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">write()</td>\n<td style=\"text-align:center\">写文本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">writeln()</td>\n<td style=\"text-align:center\">写一行文本</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"i-close\"><a href=\"#i-close\" class=\"headerlink\" title=\"i.close()\"></a>i.close()</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">hello</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        documetn.write(1)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.write(<span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.write(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,3000)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>document =&gt; open =&gt; write =&gt; close =&gt; open</code></p>\n<p>每次在<code>script</code>执行完以后页面会关闭，如果有延时性的<code>write</code>，就会把页面冲掉<br>上面代码块中首先有<code>hello</code>和<code>1</code> <code>2</code>这时候文档close<br>但是文档<code>close</code>了之后写了<code>3</code><br>所以就会把页面冲掉</p>\n<p>所以在写write的时候要谨慎设置延时和异步 </p>\n<h1 id=\"5-Element接口\"><a href=\"#5-Element接口\" class=\"headerlink\" title=\"5.Element接口\"></a>5.Element接口</h1><p>最熟悉的<code>classList.add()</code><br>而且<code>Element</code>也可以<code>querySelector()</code>的<br>可以<code>div.querySelector()</code></p>\n<h3 id=\"i-innerHTML和innerText\"><a href=\"#i-innerHTML和innerText\" class=\"headerlink\" title=\"i.innerHTML和innerText\"></a>i.innerHTML和innerText</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">input</span> type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"input1\"</span>&gt; &lt;<span class=\"selector-tag\">button</span> id=x&gt;写入页面&lt;/button&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> id=<span class=\"string\">\"output\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">x<span class=\"selector-class\">.onclick</span> = function()&#123;</span><br><span class=\"line\">    output<span class=\"selector-class\">.innerHTML</span> = input1.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*x.onclick = function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    output.innerText = input1.value</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n<p>innerHTML可以识别写入页面的代码<code>&lt;b&gt;&lt;/b&gt;</code>就会加粗<code>&lt;i&gt;&lt;/i&gt;</code>就会变斜<br><code>&lt;script&gt;&lt;/script&gt;</code>怎么搞<br>那麻烦了，用户真拿这个输入框把<code>cookie</code>爬了怎么办。<br>所以还是很危险的<br>他会把用户写的标签，真的当做开发者写的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-DOM是什么\"><a href=\"#1-DOM是什么\" class=\"headerlink\" title=\"1.DOM是什么\"></a>1.DOM是什么</h1><p>Document Object Model<br>XML文档<br>把文档变成对象的一种模型</p>\n<h2 id=\"I-DOM标准\"><a href=\"#I-DOM标准\" class=\"headerlink\" title=\"I.DOM标准\"></a>I.DOM标准</h2><p><code>Element</code>对象：<code>body</code> <code>head</code> <code>meta</code> <code>title</code> <code>script</code> <code>h1</code> <code>h2</code> <code>p</code>这些都是<code>Element</code>对象<br><code>Text</code>对象专门指文本：<code>span</code> 之类的<br><code>Document</code>对象：<code>html</code>因为它是用<code>Document</code>构造出来的<br><code>Comment</code>对象：注释</p>\n<p>而他们原型链的顶端叫做<code>Node</code><br>就像我们熟知的<code>Object.prorotype</code></p>\n<p>每一个标签都有它相应的构造函数，浏览器看到标签就用对应的构造函数给它构造出一个对应的内存中的对象。</p>\n<pre><code>构造函数\n</code></pre><p>页面中节点  ========&gt;  对象</p>\n<h1 id=\"2-Node的接口\"><a href=\"#2-Node的接口\" class=\"headerlink\" title=\"2.Node的接口\"></a>2.Node的接口</h1><p>就像讨论Object.prototype一样<br>需要注意<code>Node</code>也是一种<code>object</code></p>\n<p>因为超级多，记几个单词然后：<br><code>child</code>/<code>children</code>/<code>parent</code><br><code>node</code><br><code>first</code>/<code>last</code><br><code>next</code>/<code>previous</code><br><code>sibling</code>/<code>siblings</code><br><code>type</code><br><code>value</code>/<code>text</code>/<code>content</code><br><code>inner</code>/<code>outer</code><br><code>element</code><br>互相组合</p>\n<h2 id=\"I-childNodes\"><a href=\"#I-childNodes\" class=\"headerlink\" title=\"I.childNodes\"></a>I.childNodes</h2><p>所有的子节点（不是子元素）<br>所以一旦有回车，就会得到一个text</p>\n<p>所以想要所有标签请使用<code>children</code></p>\n<p><code>nextSibling</code>是下一个兄弟节点（有回车也会返回text）</p>\n<p><code>nextElementSibling</code>才是下一个兄弟标签（就是兼容性不好）</p>\n<p>导致这一堆奇怪问题的原因:<code>DOM</code>不是设计来给<code>HTML</code>用的，是给<code>XML</code>用的，所以不是很配套。</p>\n<h2 id=\"II-常用接口\"><a href=\"#II-常用接口\" class=\"headerlink\" title=\"II.常用接口\"></a>II.常用接口</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">接口</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">childNodes</td>\n<td style=\"text-align:center\">所有子节点</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">firstChild</td>\n<td style=\"text-align:center\">第一个子节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">innerText</td>\n<td style=\"text-align:center\">内容文本</td>\n<td style=\"text-align:center\">IE加的那点料，在小于等于IE11中修改<code>innerText</code>会移除当前元素的子节点，且永久性破坏所有后代文本节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lastChild</td>\n<td style=\"text-align:center\">最后一个子节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nextSibling</td>\n<td style=\"text-align:center\">下一个节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nodeName</td>\n<td style=\"text-align:center\">节点名称</td>\n<td style=\"text-align:center\">（获取的是大写除了svg）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nodeType</td>\n<td style=\"text-align:center\">节点类型</td>\n<td style=\"text-align:center\">1:element 3:text 8:comment 9:document 10:DOCTYPE 11:DocumentFragment</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">nodeValue</td>\n<td style=\"text-align:center\">value是一个包含当前节点的值的字符串（如果有的话）。</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">outerText</td>\n<td style=\"text-align:center\">是一个非标准的属性。作为一个获得器，它返回与Node.innerText一致的值</td>\n<td style=\"text-align:center\">作为一个设置器，它将删除当前节点并将其替换为给定的文本。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ownerDocument</td>\n<td style=\"text-align:center\">会返回当前节点的顶层的 document 对象</td>\n<td style=\"text-align:center\">返回祖先</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentElement</td>\n<td style=\"text-align:center\">父级元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">parentNode</td>\n<td style=\"text-align:center\">父级节点</td>\n<td style=\"text-align:center\">和上面那位作用不一样吗？</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">previousSibling</td>\n<td style=\"text-align:center\">上一个兄弟节点</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">textContent</td>\n<td style=\"text-align:center\">内容文本</td>\n<td style=\"text-align:center\">FF和Opera加的那点料,会获取所有元素内容，包括<code>&lt;script&gt;</code>和<code>&lt;style&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"3-方法\"><a href=\"#3-方法\" class=\"headerlink\" title=\"3.方法\"></a>3.方法</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">appendChild()</td>\n<td style=\"text-align:center\">将一个节点添加到指定父节点的子节点列表末尾。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cloneNode()</td>\n<td style=\"text-align:center\">拷贝节点，可选深拷贝或浅拷贝</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">contains()</td>\n<td style=\"text-align:center\">判断传入的节点是否为该节点的后代节点。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hasChildNodes()</td>\n<td style=\"text-align:center\">一个元素是否有子节点</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">insertBefore()</td>\n<td style=\"text-align:center\">把一个东西插入一个东西的前面</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isEqualNode()</td>\n<td style=\"text-align:center\">两个节点是否相等</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">isSameNode()</td>\n<td style=\"text-align:center\">两个节点是否是同一个节点<code>===</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">removeChild()</td>\n<td style=\"text-align:center\">（从页面）干掉辣个子节点（但是他还在内存里）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">replaceChild()</td>\n<td style=\"text-align:center\">替换子节点 （被替换的还在内存里）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">normalize()</td>\n<td style=\"text-align:center\">常规化</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"I-cloneNode\"><a href=\"#I-cloneNode\" class=\"headerlink\" title=\"I.cloneNode()\"></a>I.cloneNode()</h2><p><code>var dupNode = node.cloneNode(deep)</code></p>\n<p>deep是可选参数，是否采用深拷贝。如果为true，则该节点的所有后代节点也都会被克隆，如果为false，则只克隆该节点本身</p>\n<h3 id=\"深拷贝和浅拷贝\"><a href=\"#深拷贝和浅拷贝\" class=\"headerlink\" title=\"深拷贝和浅拷贝\"></a>深拷贝和浅拷贝</h3><p>深拷贝和浅拷贝只针对Object，Array这种复杂类型<br>简单来说，浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。</p>\n<h2 id=\"II-normalize\"><a href=\"#II-normalize\" class=\"headerlink\" title=\"II.normalize()\"></a>II.normalize()</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> wrapper = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"div\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.appendChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"part 1\"</span>)); <span class=\"comment\">//俩都是文本</span></span><br><span class=\"line\">wrapper.appentChild(<span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">\"part 2\"</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时候 wrapper.childNodes.length === 2</span></span><br><span class=\"line\"><span class=\"comment\">//wrapper.childNodes[0].textContent === \"part 1\"</span></span><br><span class=\"line\"><span class=\"comment\">//wrapper.childNodes[1].textContent === \"part 2\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">wrapper.normalize();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//常规化以后 wrapper.childNodes.length === 1</span></span><br><span class=\"line\">wrapper.childNodes[<span class=\"number\">0</span>].textContent === <span class=\"string\">\"Part 1 Part 2\"</span></span><br></pre></td></tr></table></figure>\n<p>使这个 拆成两部分的文本合在一起了。（把不合常规的常规化）</p>\n<h2 id=\"III-学习方法\"><a href=\"#III-学习方法\" class=\"headerlink\" title=\"III.学习方法\"></a>III.学习方法</h2><p>1.他写的什么就是什么意思，看懂单词就明白它是干嘛的了<br>2.看懂单词还是不知道怎么用？查MDN吧…</p>\n<p>把该记的特殊的记住就可以了。</p>\n<h1 id=\"4-Document接口\"><a href=\"#4-Document接口\" class=\"headerlink\" title=\"4.Document接口\"></a>4.Document接口</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">接口</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">anchors</td>\n<td style=\"text-align:center\">获取页面<code>&lt;a&gt;</code>标签</td>\n<td style=\"text-align:center\"><code>H5已弃用</code>。由于向后兼容的原因，该属性只返回那些拥有<code>name</code>属性的<code>a</code>元素，而不是拥有<code>id</code>属性的<code>a</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">body</td>\n<td style=\"text-align:center\">获取<code>&lt;body&gt;</code>元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">characterSet</td>\n<td style=\"text-align:center\">就是<code>char</code>（字符）字符编码</td>\n<td style=\"text-align:center\"><code>document.characterSet</code>看它的字符编码是什么</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">childElementCount</td>\n<td style=\"text-align:center\">返回一个无符号长整型数字，表示给定元素的子元素数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">children</td>\n<td style=\"text-align:center\">获取子元素咯</td>\n<td style=\"text-align:center\"><code>document</code>是<code>html</code>的父级哟，但<code>html</code>还是根元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">doctype</td>\n<td style=\"text-align:center\">就是<code>!DOCTYPE</code>协议咯</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">documentElement</td>\n<td style=\"text-align:center\">返回文档对象的根元素</td>\n<td style=\"text-align:center\"><code>HTML</code>文档的<html>元素</html></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">domain</td>\n<td style=\"text-align:center\">域名</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">fullscreen</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">head</td>\n<td style=\"text-align:center\">头部</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hidden</td>\n<td style=\"text-align:center\">是否被隐藏？</td>\n<td style=\"text-align:center\">返回布尔值</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">images</td>\n<td style=\"text-align:center\">获取页面中所有<code>&lt;img&gt;</code>标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">links</td>\n<td style=\"text-align:center\">获取页面中所有<code>&lt;a&gt;</code>标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">location</td>\n<td style=\"text-align:center\">返回一个 Location 对象</td>\n<td style=\"text-align:center\">包含有文档的 URL 相关的信息，并提供了改变该 URL 和加载其他 URL 的方法。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onxxxxxxxx</td>\n<td style=\"text-align:center\">当xxx时的事件监听</td>\n<td style=\"text-align:center\"><code>onclick</code> <code>onmousemove</code> <code>onmousedown</code> 之类的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">origin</td>\n<td style=\"text-align:center\">源</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">plugins</td>\n<td style=\"text-align:center\">检测用户有没有开启插件</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readyState</td>\n<td style=\"text-align:center\">检测用户是否是否下载完毕</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">referrer</td>\n<td style=\"text-align:center\">引荐者</td>\n<td style=\"text-align:center\">发请求的时候，浏览器要告诉服务器，它是通过什么渠道进来的。服务器可以通过<code>referrer</code>来拒绝为其他网站提供服务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scripts</td>\n<td style=\"text-align:center\">获取所有<code>script</code>标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scrollingElement</td>\n<td style=\"text-align:center\">正在滚动的元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">styleSheets</td>\n<td style=\"text-align:center\">获取所有CSS</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">获取所有<code>&lt;title&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">visibilityState</td>\n<td style=\"text-align:center\">获取页面是否被显示（当前标签是否被激活）</td>\n<td style=\"text-align:center\">返回布尔值</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"I-方法\"><a href=\"#I-方法\" class=\"headerlink\" title=\"I.方法\"></a>I.方法</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">方法</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">close()</td>\n<td style=\"text-align:center\">关闭文档</td>\n<td style=\"text-align:center\">关闭向当前文档的数据写入，想要打开要使用document.open()</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createDocumentFragment()</td>\n<td style=\"text-align:center\">创建一个DocumentFragment</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createElement()</td>\n<td style=\"text-align:center\">创建由tagName 指定的HTML元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">createTextNode()</td>\n<td style=\"text-align:center\">创建一个文本节点</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">execCommand()</td>\n<td style=\"text-align:center\">执行一个命令</td>\n<td style=\"text-align:center\">允许命令操纵可编辑区域的内容，主要用于富文本编辑器，相关内容查mdn</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exitFullscreen()</td>\n<td style=\"text-align:center\">退出全屏</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementById()</td>\n<td style=\"text-align:center\">通过<code>id</code>获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementsByClassName()</td>\n<td style=\"text-align:center\">通过<code>class</code>名获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementsByName()</td>\n<td style=\"text-align:center\">通过<code>name</code>属性获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getElementsByTagName</td>\n<td style=\"text-align:center\">通过<code>标签名</code>获取元素</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">getSelection()</td>\n<td style=\"text-align:center\">获取用户选中的文本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">hasFocus()</td>\n<td style=\"text-align:center\">用户是否<code>focus</code>到当前页面</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">open()</td>\n<td style=\"text-align:center\">和<code>close</code>对应</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">querySelector()</td>\n<td style=\"text-align:center\">通过<code>选择器（css）</code>获取元素</td>\n<td style=\"text-align:center\">抄jQuery的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">querySelectorALL()</td>\n<td style=\"text-align:center\">通过<code>选择器（css）</code>获取元素（返回所有元素）</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">registerElement()</td>\n<td style=\"text-align:center\">在浏览器注册一个新的 自定义元素 ，返回一个该元素的构造函数。</td>\n<td style=\"text-align:center\">用的并不多…建议使用：customElements.define（）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">write()</td>\n<td style=\"text-align:center\">写文本</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">writeln()</td>\n<td style=\"text-align:center\">写一行文本</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"i-close\"><a href=\"#i-close\" class=\"headerlink\" title=\"i.close()\"></a>i.close()</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">hello</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        documetn.write(1)</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">document</span>.write(<span class=\"number\">2</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">document</span>.write(<span class=\"number\">3</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;,3000)</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><code>document =&gt; open =&gt; write =&gt; close =&gt; open</code></p>\n<p>每次在<code>script</code>执行完以后页面会关闭，如果有延时性的<code>write</code>，就会把页面冲掉<br>上面代码块中首先有<code>hello</code>和<code>1</code> <code>2</code>这时候文档close<br>但是文档<code>close</code>了之后写了<code>3</code><br>所以就会把页面冲掉</p>\n<p>所以在写write的时候要谨慎设置延时和异步 </p>\n<h1 id=\"5-Element接口\"><a href=\"#5-Element接口\" class=\"headerlink\" title=\"5.Element接口\"></a>5.Element接口</h1><p>最熟悉的<code>classList.add()</code><br>而且<code>Element</code>也可以<code>querySelector()</code>的<br>可以<code>div.querySelector()</code></p>\n<h3 id=\"i-innerHTML和innerText\"><a href=\"#i-innerHTML和innerText\" class=\"headerlink\" title=\"i.innerHTML和innerText\"></a>i.innerHTML和innerText</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">input</span> type=<span class=\"string\">\"text\"</span> id=<span class=\"string\">\"input1\"</span>&gt; &lt;<span class=\"selector-tag\">button</span> id=x&gt;写入页面&lt;/button&gt;</span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">div</span> id=<span class=\"string\">\"output\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">x<span class=\"selector-class\">.onclick</span> = function()&#123;</span><br><span class=\"line\">    output<span class=\"selector-class\">.innerHTML</span> = input1.value</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*x.onclick = function()&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    output.innerText = input1.value</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*/</span></span><br></pre></td></tr></table></figure>\n<p>innerHTML可以识别写入页面的代码<code>&lt;b&gt;&lt;/b&gt;</code>就会加粗<code>&lt;i&gt;&lt;/i&gt;</code>就会变斜<br><code>&lt;script&gt;&lt;/script&gt;</code>怎么搞<br>那麻烦了，用户真拿这个输入框把<code>cookie</code>爬了怎么办。<br>所以还是很危险的<br>他会把用户写的标签，真的当做开发者写的。</p>\n"},{"title":"JavaScript-函数","date":"2018-04-22T19:48:49.000Z","_content":"函数就是一段可以反复调用的代码块。\n# 1.函数的五种声明方式：\n## I.具名函数\n\n```\nfunction f(x,y){\n    return x+y\n}\nf.name // 'f'\n```\n\n.name就是函数名\n\n## II.匿名函数\n\n```\nvar f\nf = function(x,y){\n    return x+y\n}\nf.name //'f'\n```\n\n.name就是变量名\n\n如果要声明匿名函数，必须把它给一个变量\n\n## III.具名函数赋值\n\n```\n var f\n f = function f2(x,y){ return x+y }\n f.name // 'f2'\n console.log(f2) // undefined\n```\n\n.name随具名函数的函数名\n\n和具名函数的区别： `f.name`是他相应具名函数的名字。\n`console.log(f)`的时候，会报错,因为js会找不到`f2`\n就很蠢：**这就是它的不一致性**\n这是个作用域问题：\n`function f2(){}`中的`f2`只能作用于花括号内\n\n## IV.window.Function\n\n```\nvar f = new Function('x','y','return x+y')\nf.name // anonymous\n```\n\n.name 是`anonymous` 他他娘的是匿名的，名字叫`匿名的`\n\n很不常用\n所有的部分用字符串表示，字符串可以拼起来，也可以在里面加变量。\n\n## V.箭头函数\n\n```\nvar f = (x,y) => {\n     return x+y\n }\n var sum = (x,y) => x+y\n var n2 = n => n*n\n```\n\n.name 是变量名\n\n**只有一个参数**，不需要圆括号\n如果**只有一句话**，不需要花括号也不需要return(也不能返回对象)\n**多句话**的时候，用**分号**隔开\n\n箭头函数是匿名的（没看到地方写名字呀）\n\n# 2.调用函数\n调用： call\n## I.函数是如何储存在内存里的\n\n```\nnew Function('x','y','return x+y')  //这时候栈里面存了地址ADDR\n//堆里存了函数的内容：\nname:   //名字，他叫匿名的\nparams: ['x','y']   //参数\nfbody: 'return x+y'     //函数体\n__proto__:指向函数，里面有个call\n```\n\n`eval：把字符串当代码执行`\n\n```\nf.call = function(){\n    return window.evaleval（f.functionBody）\n}\nf(){\n    return window.eval(f.functionBody)\n}\n```\n\n可以理解为：f指的是这个对象\nf.call()指的是执行这个对象的函数体\n\n**可以执行代码的对象被叫做函数**\n\n## II.f(1,2)和f.call(undefined,1,2)\nf.call()才是硬核（hardcore）调用\n贴心的f()语法糖\n\n不吃糖的选手一定喜欢玩黑魂\n不吃糖才能更加从容的了解this\n\n## III.如何使用call\n\n```\nfunction f(x,y){\n    return x+y\n}\nf.call(undefined,1,2)   //3\n//第一个参数写undefined，从第二个参数开始传\n```\n\n# 3.this? arguments?\n\n```\nf.call(undefined,1,2) //3\n//这时候好玩了，第一个参数就是this\n//第二第三个参数就是arguments\n```\n## I.规律\n1.call的第一个参数可以用this得到\n2.call的后面的参数可以用arguments得到\n\n```\nf = function(){\n    console.log(this)\n    console.log(arguments)\n}\nf.call(undefined,1,2,3)\n```\narguments会打出参数（除了第一个）组成**伪数组**\n**普通模式下：**\n如果this是undefined，浏览器会自动把this变成window(潜规则)\n**严格模式下：**\nthis是什么他就打什么。\n\n**所以，this就是call的第一个参数**\n\n为何JS一定要this，一定要new。因为：**要长得像JAVA**\n\n# 4. call stack\n## I.调用队栈\n\n```\nfunction a (){\n    console.log('a')\n    return 'a'\n}\nfunction b(){\n    console.log('b')\n    return 'b'\n}\nfunction c(){\n    console.log('c')\n    return 'c'\n}\na.call()\nb.call()\nc.call()\n```\n\n先进后出：\n先a.call()再console.log('a')\n然后console.log('a')抹\na.call()最后被抹掉\n\n**先进入call stack的后出去**\n\n## II.递归\n\n```\nfunction sum(n){\n    if(n =+ 1){\n        return 1\n    }else{\n        return n + sum.call(undefined, n-1)\n    }\n}\n\nsum.call(undefined, 5)  //5 + sum(4)\n//sum(10)  //10 + sum(9)\n//sum(4)  //4 + sum(3)\n```\n\n求sum(5)的时候发现要找sum(4)\n求sum(4)的时候发现要求sum(3)\n...\n一路找到sum(1)\n之后一个一个抹掉，出来到sum(5)\n\n## III.什么叫Stack Overflow\n栈溢出\n\n```\nfunction sum(n){\n    if(n =+ 1){\n        return 1\n    }else{\n        return n + sum.call(undefined, n-1)\n    }\n}\n\nsum.call(undefined, 1000000)\n```\n\n如果栈的长度没有1000000就会爆栈\n\nchrome里压stack是有上限的\n\n同时Stack Overflow是个网站，专门讨论bug的\n\n# 5.作用域（scope）\n\n## I.tree\n\n```\nvar a = 1\nfunction f1(){\n    var a = 2\n    f2.call()\n    console.log(a)\n    \n    function f2(){\n        var a = 3\n        console.log(a)\n    }\n}\n\nf1.call()\nconsole.log(a)\n```\n\n```\n            全局作用域（window/global）\n                        |\n    f1的作用域                         变量a\n        |\n 变量a      f2的作用域\n               |\n             变量a\n```\n\n如果把`var a = 2`改成`a = 2`JS会优先认为这是个赋值\nJS会在上一级作用域找，找到了就用这个a—— **就近原则**\n什么时候`a = 2`算声明全局？\n在找到最后也没找到`a`的时候\n\n## II.声明提升\n\n```\nvar a = 1\nfunction f1(){\n                    //var a 应该在这里\n    f2.call()   \n    console.log(a)\n    var a = 2           //变量提升： 先把它拆开看 var a 和 a = 2。 a = 2在这里\n    \n    function f2(){  //这里也有\n        var a = 3       //这里也有\n        console.log(a)  \n    }\n}\n\nf1.call()\nconsole.log(a)\n```\n\n拿到代码先提升**声明**部分\n声明部分声明部分声明部分\n改装完毕后它是这样的：\n\n```\nvar a = 1\nfunction f1(){\n    var a               //提升声明\n    function f2(){          //函数声明就不是声明了吗？也要提升\n        var a           //提升声明\n        a = 3\n        console.log(a)\n    }\n    f2.call()\n    console.log(a)\n    a = 2\n}\nf1.call()\nconsole.log(a)\n```\n\n所以调用f1以后`a`是什么？\n赋值在console.log后面，f2的作用域又碰不到\n那只有undefined咯\n\n作用域仅代表变量**是哪个**\n不表达变量的**值**\n\n```\n<ul>\n    <li>选项1</li>\n    <li>选项2</li>\n    <li>选项3</li>\n    <li>选项4</li>\n    <li>选项5</li>\n    <li>选项6</li>    \n</ul>\n\n\nvar liTags = document.querySelectorAll('li')\nfor(var i=0; i<liTags.length; i++){\n    \n    liTags[i].onclick = function(){\n        console.log(i)  //这个i是多少\n    }\n}\n\nconsole.log(i)\n```\n\ni还是那个i\n\n```\nvar liTags\nvar i\nliTags = document.querySelectorAll('li')\nfor(var i=0; i<liTags.length; i++){\n    \n    liTags[i].onclick = function(){\n        console.log(i)  //这个i是多少\n    }\n}\n\nconsole.log(i)\n```\n\n遍历之后才是点击，结果是6\n\n**只要它不是当场执行，都有可能变。**\n\n# 6.闭包（Closure）\n\n如果一个函数，使用了它范围外的变量，那么这个（函数+这个变量）就叫做闭包。\n\n# 7.全局变量可耻！\n\n```\n<script>\nfunction(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\nparent是个全局变量，直接声明赋值会覆盖它\n所以我们希望在用这个函数的局部变量——立即调用\n\n就是声明一个匿名函数，然后立即调用。只是为了用局部变量\n\n## I.浏览器会认为这是个语法错误\n所以需要一些小技巧来改一下↓这一坨\n\n```\n<script>\nfunction(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\n### i.括号\n\n```\n<script>\n(function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call())\n</script>\n```\n\n### ii.括号写在调用之前\n\n```\n<script>\n(function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}).call()\n</script>\n```\n\n### iii.符号\n负号\n因为不需要这个值，只是为了这个局部变量\n为了让浏览器知道：现在不是在声明一个函数，而是在声明并调用求值\n\n```\n<script>\n-function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\n同理`+`也可以咯\n\n```\n<script>\n-function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\n那`!`取反 `~`二进制的取反都可以\n\n只要触发，让浏览器明白这不是一个声明而是一个立即执行函数，就可以。浏览器就不报错。 \n\n## II.为了解决这个问题，我们有了`let`\n\n```\n<script>\n{\n    let parent = document.querySelector('#self')\n    console.log(parent)\n}\n</script>\n```\n\n用一个代码块来把它框起来，这时候不能用`var`因为：\n`var`这个东西只认函数，有函数就认没函数就创建全局变量。\n但是`let`不一样，它的作用域就在这个代码块里面\n\n做个试验\n\n```\n<script>\n{\n    var parent = document.querySelector('#self')  \n}\nconsole.log(parent)\n</script>\n```\n\n**这时候，有一个变量提升**\n\n```\n<script>\nvar parent\n{\n    parent = document.querySelector('#self')  \n}\nconsole.log(parent)\n</script>\n```\n\n这没办法呀，`var`就这样跑出去声明了一个全局变量，因为块包不住它。\n\n### i.伟大的es6特性","source":"_posts/JavaScript-函数.md","raw":"---\ntitle: JavaScript-函数\ndate: 2018-04-23 03:48:49\ntags: JS\n---\n函数就是一段可以反复调用的代码块。\n# 1.函数的五种声明方式：\n## I.具名函数\n\n```\nfunction f(x,y){\n    return x+y\n}\nf.name // 'f'\n```\n\n.name就是函数名\n\n## II.匿名函数\n\n```\nvar f\nf = function(x,y){\n    return x+y\n}\nf.name //'f'\n```\n\n.name就是变量名\n\n如果要声明匿名函数，必须把它给一个变量\n\n## III.具名函数赋值\n\n```\n var f\n f = function f2(x,y){ return x+y }\n f.name // 'f2'\n console.log(f2) // undefined\n```\n\n.name随具名函数的函数名\n\n和具名函数的区别： `f.name`是他相应具名函数的名字。\n`console.log(f)`的时候，会报错,因为js会找不到`f2`\n就很蠢：**这就是它的不一致性**\n这是个作用域问题：\n`function f2(){}`中的`f2`只能作用于花括号内\n\n## IV.window.Function\n\n```\nvar f = new Function('x','y','return x+y')\nf.name // anonymous\n```\n\n.name 是`anonymous` 他他娘的是匿名的，名字叫`匿名的`\n\n很不常用\n所有的部分用字符串表示，字符串可以拼起来，也可以在里面加变量。\n\n## V.箭头函数\n\n```\nvar f = (x,y) => {\n     return x+y\n }\n var sum = (x,y) => x+y\n var n2 = n => n*n\n```\n\n.name 是变量名\n\n**只有一个参数**，不需要圆括号\n如果**只有一句话**，不需要花括号也不需要return(也不能返回对象)\n**多句话**的时候，用**分号**隔开\n\n箭头函数是匿名的（没看到地方写名字呀）\n\n# 2.调用函数\n调用： call\n## I.函数是如何储存在内存里的\n\n```\nnew Function('x','y','return x+y')  //这时候栈里面存了地址ADDR\n//堆里存了函数的内容：\nname:   //名字，他叫匿名的\nparams: ['x','y']   //参数\nfbody: 'return x+y'     //函数体\n__proto__:指向函数，里面有个call\n```\n\n`eval：把字符串当代码执行`\n\n```\nf.call = function(){\n    return window.evaleval（f.functionBody）\n}\nf(){\n    return window.eval(f.functionBody)\n}\n```\n\n可以理解为：f指的是这个对象\nf.call()指的是执行这个对象的函数体\n\n**可以执行代码的对象被叫做函数**\n\n## II.f(1,2)和f.call(undefined,1,2)\nf.call()才是硬核（hardcore）调用\n贴心的f()语法糖\n\n不吃糖的选手一定喜欢玩黑魂\n不吃糖才能更加从容的了解this\n\n## III.如何使用call\n\n```\nfunction f(x,y){\n    return x+y\n}\nf.call(undefined,1,2)   //3\n//第一个参数写undefined，从第二个参数开始传\n```\n\n# 3.this? arguments?\n\n```\nf.call(undefined,1,2) //3\n//这时候好玩了，第一个参数就是this\n//第二第三个参数就是arguments\n```\n## I.规律\n1.call的第一个参数可以用this得到\n2.call的后面的参数可以用arguments得到\n\n```\nf = function(){\n    console.log(this)\n    console.log(arguments)\n}\nf.call(undefined,1,2,3)\n```\narguments会打出参数（除了第一个）组成**伪数组**\n**普通模式下：**\n如果this是undefined，浏览器会自动把this变成window(潜规则)\n**严格模式下：**\nthis是什么他就打什么。\n\n**所以，this就是call的第一个参数**\n\n为何JS一定要this，一定要new。因为：**要长得像JAVA**\n\n# 4. call stack\n## I.调用队栈\n\n```\nfunction a (){\n    console.log('a')\n    return 'a'\n}\nfunction b(){\n    console.log('b')\n    return 'b'\n}\nfunction c(){\n    console.log('c')\n    return 'c'\n}\na.call()\nb.call()\nc.call()\n```\n\n先进后出：\n先a.call()再console.log('a')\n然后console.log('a')抹\na.call()最后被抹掉\n\n**先进入call stack的后出去**\n\n## II.递归\n\n```\nfunction sum(n){\n    if(n =+ 1){\n        return 1\n    }else{\n        return n + sum.call(undefined, n-1)\n    }\n}\n\nsum.call(undefined, 5)  //5 + sum(4)\n//sum(10)  //10 + sum(9)\n//sum(4)  //4 + sum(3)\n```\n\n求sum(5)的时候发现要找sum(4)\n求sum(4)的时候发现要求sum(3)\n...\n一路找到sum(1)\n之后一个一个抹掉，出来到sum(5)\n\n## III.什么叫Stack Overflow\n栈溢出\n\n```\nfunction sum(n){\n    if(n =+ 1){\n        return 1\n    }else{\n        return n + sum.call(undefined, n-1)\n    }\n}\n\nsum.call(undefined, 1000000)\n```\n\n如果栈的长度没有1000000就会爆栈\n\nchrome里压stack是有上限的\n\n同时Stack Overflow是个网站，专门讨论bug的\n\n# 5.作用域（scope）\n\n## I.tree\n\n```\nvar a = 1\nfunction f1(){\n    var a = 2\n    f2.call()\n    console.log(a)\n    \n    function f2(){\n        var a = 3\n        console.log(a)\n    }\n}\n\nf1.call()\nconsole.log(a)\n```\n\n```\n            全局作用域（window/global）\n                        |\n    f1的作用域                         变量a\n        |\n 变量a      f2的作用域\n               |\n             变量a\n```\n\n如果把`var a = 2`改成`a = 2`JS会优先认为这是个赋值\nJS会在上一级作用域找，找到了就用这个a—— **就近原则**\n什么时候`a = 2`算声明全局？\n在找到最后也没找到`a`的时候\n\n## II.声明提升\n\n```\nvar a = 1\nfunction f1(){\n                    //var a 应该在这里\n    f2.call()   \n    console.log(a)\n    var a = 2           //变量提升： 先把它拆开看 var a 和 a = 2。 a = 2在这里\n    \n    function f2(){  //这里也有\n        var a = 3       //这里也有\n        console.log(a)  \n    }\n}\n\nf1.call()\nconsole.log(a)\n```\n\n拿到代码先提升**声明**部分\n声明部分声明部分声明部分\n改装完毕后它是这样的：\n\n```\nvar a = 1\nfunction f1(){\n    var a               //提升声明\n    function f2(){          //函数声明就不是声明了吗？也要提升\n        var a           //提升声明\n        a = 3\n        console.log(a)\n    }\n    f2.call()\n    console.log(a)\n    a = 2\n}\nf1.call()\nconsole.log(a)\n```\n\n所以调用f1以后`a`是什么？\n赋值在console.log后面，f2的作用域又碰不到\n那只有undefined咯\n\n作用域仅代表变量**是哪个**\n不表达变量的**值**\n\n```\n<ul>\n    <li>选项1</li>\n    <li>选项2</li>\n    <li>选项3</li>\n    <li>选项4</li>\n    <li>选项5</li>\n    <li>选项6</li>    \n</ul>\n\n\nvar liTags = document.querySelectorAll('li')\nfor(var i=0; i<liTags.length; i++){\n    \n    liTags[i].onclick = function(){\n        console.log(i)  //这个i是多少\n    }\n}\n\nconsole.log(i)\n```\n\ni还是那个i\n\n```\nvar liTags\nvar i\nliTags = document.querySelectorAll('li')\nfor(var i=0; i<liTags.length; i++){\n    \n    liTags[i].onclick = function(){\n        console.log(i)  //这个i是多少\n    }\n}\n\nconsole.log(i)\n```\n\n遍历之后才是点击，结果是6\n\n**只要它不是当场执行，都有可能变。**\n\n# 6.闭包（Closure）\n\n如果一个函数，使用了它范围外的变量，那么这个（函数+这个变量）就叫做闭包。\n\n# 7.全局变量可耻！\n\n```\n<script>\nfunction(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\nparent是个全局变量，直接声明赋值会覆盖它\n所以我们希望在用这个函数的局部变量——立即调用\n\n就是声明一个匿名函数，然后立即调用。只是为了用局部变量\n\n## I.浏览器会认为这是个语法错误\n所以需要一些小技巧来改一下↓这一坨\n\n```\n<script>\nfunction(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\n### i.括号\n\n```\n<script>\n(function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call())\n</script>\n```\n\n### ii.括号写在调用之前\n\n```\n<script>\n(function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}).call()\n</script>\n```\n\n### iii.符号\n负号\n因为不需要这个值，只是为了这个局部变量\n为了让浏览器知道：现在不是在声明一个函数，而是在声明并调用求值\n\n```\n<script>\n-function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\n同理`+`也可以咯\n\n```\n<script>\n-function(){\n    var parent = document.querySelector('#self')\n    console.log(parent)\n}.call()\n</script>\n```\n\n那`!`取反 `~`二进制的取反都可以\n\n只要触发，让浏览器明白这不是一个声明而是一个立即执行函数，就可以。浏览器就不报错。 \n\n## II.为了解决这个问题，我们有了`let`\n\n```\n<script>\n{\n    let parent = document.querySelector('#self')\n    console.log(parent)\n}\n</script>\n```\n\n用一个代码块来把它框起来，这时候不能用`var`因为：\n`var`这个东西只认函数，有函数就认没函数就创建全局变量。\n但是`let`不一样，它的作用域就在这个代码块里面\n\n做个试验\n\n```\n<script>\n{\n    var parent = document.querySelector('#self')  \n}\nconsole.log(parent)\n</script>\n```\n\n**这时候，有一个变量提升**\n\n```\n<script>\nvar parent\n{\n    parent = document.querySelector('#self')  \n}\nconsole.log(parent)\n</script>\n```\n\n这没办法呀，`var`就这样跑出去声明了一个全局变量，因为块包不住它。\n\n### i.伟大的es6特性","slug":"JavaScript-函数","published":1,"updated":"2018-04-28T15:32:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp390001t2g3etbpfzrv","content":"<p>函数就是一段可以反复调用的代码块。</p>\n<h1 id=\"1-函数的五种声明方式：\"><a href=\"#1-函数的五种声明方式：\" class=\"headerlink\" title=\"1.函数的五种声明方式：\"></a>1.函数的五种声明方式：</h1><h2 id=\"I-具名函数\"><a href=\"#I-具名函数\" class=\"headerlink\" title=\"I.具名函数\"></a>I.具名函数</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(x,y)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">x+y</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.name // <span class=\"string\">'f'</span></span><br></pre></td></tr></table></figure>\n<p>.name就是函数名</p>\n<h2 id=\"II-匿名函数\"><a href=\"#II-匿名函数\" class=\"headerlink\" title=\"II.匿名函数\"></a>II.匿名函数</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f</span><br><span class=\"line\">f = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x,y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.name <span class=\"comment\">//'f'</span></span><br></pre></td></tr></table></figure>\n<p>.name就是变量名</p>\n<p>如果要声明匿名函数，必须把它给一个变量</p>\n<h2 id=\"III-具名函数赋值\"><a href=\"#III-具名函数赋值\" class=\"headerlink\" title=\"III.具名函数赋值\"></a>III.具名函数赋值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f</span><br><span class=\"line\">f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\">x,y</span>)</span>&#123; <span class=\"keyword\">return</span> x+y &#125;</span><br><span class=\"line\">f.name <span class=\"comment\">// 'f2'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f2) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>.name随具名函数的函数名</p>\n<p>和具名函数的区别： <code>f.name</code>是他相应具名函数的名字。<br><code>console.log(f)</code>的时候，会报错,因为js会找不到<code>f2</code><br>就很蠢：<strong>这就是它的不一致性</strong><br>这是个作用域问题：<br><code>function f2(){}</code>中的<code>f2</code>只能作用于花括号内</p>\n<h2 id=\"IV-window-Function\"><a href=\"#IV-window-Function\" class=\"headerlink\" title=\"IV.window.Function\"></a>IV.window.Function</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> f = new Function(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x+y'</span>)</span><br><span class=\"line\">f<span class=\"selector-class\">.name</span> <span class=\"comment\">// anonymous</span></span><br></pre></td></tr></table></figure>\n<p>.name 是<code>anonymous</code> 他他娘的是匿名的，名字叫<code>匿名的</code></p>\n<p>很不常用<br>所有的部分用字符串表示，字符串可以拼起来，也可以在里面加变量。</p>\n<h2 id=\"V-箭头函数\"><a href=\"#V-箭头函数\" class=\"headerlink\" title=\"V.箭头函数\"></a>V.箭头函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> x+y</span><br><span class=\"line\"> <span class=\"keyword\">var</span> n2 = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n*n</span><br></pre></td></tr></table></figure>\n<p>.name 是变量名</p>\n<p><strong>只有一个参数</strong>，不需要圆括号<br>如果<strong>只有一句话</strong>，不需要花括号也不需要return(也不能返回对象)<br><strong>多句话</strong>的时候，用<strong>分号</strong>隔开</p>\n<p>箭头函数是匿名的（没看到地方写名字呀）</p>\n<h1 id=\"2-调用函数\"><a href=\"#2-调用函数\" class=\"headerlink\" title=\"2.调用函数\"></a>2.调用函数</h1><p>调用： call</p>\n<h2 id=\"I-函数是如何储存在内存里的\"><a href=\"#I-函数是如何储存在内存里的\" class=\"headerlink\" title=\"I.函数是如何储存在内存里的\"></a>I.函数是如何储存在内存里的</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Function(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x+y'</span>)  <span class=\"comment\">//这时候栈里面存了地址ADDR</span></span><br><span class=\"line\"><span class=\"comment\">//堆里存了函数的内容：</span></span><br><span class=\"line\"><span class=\"string\">name:</span>   <span class=\"comment\">//名字，他叫匿名的</span></span><br><span class=\"line\"><span class=\"string\">params:</span> [<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>]   <span class=\"comment\">//参数</span></span><br><span class=\"line\"><span class=\"string\">fbody:</span> <span class=\"string\">'return x+y'</span>     <span class=\"comment\">//函数体</span></span><br><span class=\"line\"><span class=\"string\">__proto__:</span>指向函数，里面有个call</span><br></pre></td></tr></table></figure>\n<p><code>eval：把字符串当代码执行</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.call = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.evaleval（f.functionBody）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.eval(f.functionBody)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以理解为：f指的是这个对象<br>f.call()指的是执行这个对象的函数体</p>\n<p><strong>可以执行代码的对象被叫做函数</strong></p>\n<h2 id=\"II-f-1-2-和f-call-undefined-1-2\"><a href=\"#II-f-1-2-和f-call-undefined-1-2\" class=\"headerlink\" title=\"II.f(1,2)和f.call(undefined,1,2)\"></a>II.f(1,2)和f.call(undefined,1,2)</h2><p>f.call()才是硬核（hardcore）调用<br>贴心的f()语法糖</p>\n<p>不吃糖的选手一定喜欢玩黑魂<br>不吃糖才能更加从容的了解this</p>\n<h2 id=\"III-如何使用call\"><a href=\"#III-如何使用call\" class=\"headerlink\" title=\"III.如何使用call\"></a>III.如何使用call</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span><span class=\"params\">(x,y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.call(<span class=\"literal\">undefined</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)   <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数写undefined，从第二个参数开始传</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-this-arguments\"><a href=\"#3-this-arguments\" class=\"headerlink\" title=\"3.this? arguments?\"></a>3.this? arguments?</h1><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.call(undefined,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//这时候好玩了，第一个参数就是this</span></span><br><span class=\"line\"><span class=\"comment\">//第二第三个参数就是arguments</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"I-规律\"><a href=\"#I-规律\" class=\"headerlink\" title=\"I.规律\"></a>I.规律</h2><p>1.call的第一个参数可以用this得到<br>2.call的后面的参数可以用arguments得到</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.call(<span class=\"literal\">undefined</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>arguments会打出参数（除了第一个）组成<strong>伪数组</strong><br><strong>普通模式下：</strong><br>如果this是undefined，浏览器会自动把this变成window(潜规则)<br><strong>严格模式下：</strong><br>this是什么他就打什么。</p>\n<p><strong>所以，this就是call的第一个参数</strong></p>\n<p>为何JS一定要this，一定要new。因为：<strong>要长得像JAVA</strong></p>\n<h1 id=\"4-call-stack\"><a href=\"#4-call-stack\" class=\"headerlink\" title=\"4. call stack\"></a>4. call stack</h1><h2 id=\"I-调用队栈\"><a href=\"#I-调用队栈\" class=\"headerlink\" title=\"I.调用队栈\"></a>I.调用队栈</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call()</span><br><span class=\"line\">b.call()</span><br><span class=\"line\">c.call()</span><br></pre></td></tr></table></figure>\n<p>先进后出：<br>先a.call()再console.log(‘a’)<br>然后console.log(‘a’)抹<br>a.call()最后被抹掉</p>\n<p><strong>先进入call stack的后出去</strong></p>\n<h2 id=\"II-递归\"><a href=\"#II-递归\" class=\"headerlink\" title=\"II.递归\"></a>II.递归</h2><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span></span> <span class=\"built_in\">sum</span>(n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n =+ <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n + <span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, <span class=\"number\">5</span>)  //<span class=\"number\">5</span> + <span class=\"built_in\">sum</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">//<span class=\"built_in\">sum</span>(<span class=\"number\">10</span>)  //<span class=\"number\">10</span> + <span class=\"built_in\">sum</span>(<span class=\"number\">9</span>)</span><br><span class=\"line\">//<span class=\"built_in\">sum</span>(<span class=\"number\">4</span>)  //<span class=\"number\">4</span> + <span class=\"built_in\">sum</span>(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>求sum(5)的时候发现要找sum(4)<br>求sum(4)的时候发现要求sum(3)<br>…<br>一路找到sum(1)<br>之后一个一个抹掉，出来到sum(5)</p>\n<h2 id=\"III-什么叫Stack-Overflow\"><a href=\"#III-什么叫Stack-Overflow\" class=\"headerlink\" title=\"III.什么叫Stack Overflow\"></a>III.什么叫Stack Overflow</h2><p>栈溢出</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span></span> <span class=\"built_in\">sum</span>(n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n =+ <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n + <span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, <span class=\"number\">1000000</span>)</span><br></pre></td></tr></table></figure>\n<p>如果栈的长度没有1000000就会爆栈</p>\n<p>chrome里压stack是有上限的</p>\n<p>同时Stack Overflow是个网站，专门讨论bug的</p>\n<h1 id=\"5-作用域（scope）\"><a href=\"#5-作用域（scope）\" class=\"headerlink\" title=\"5.作用域（scope）\"></a>5.作用域（scope）</h1><h2 id=\"I-tree\"><a href=\"#I-tree\" class=\"headerlink\" title=\"I.tree\"></a>I.tree</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>()&#123;</span></span><br><span class=\"line\">    var <span class=\"keyword\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\">    f2.call()</span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"keyword\">a</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>()&#123;</span></span><br><span class=\"line\">        var <span class=\"keyword\">a</span> = <span class=\"number\">3</span></span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"keyword\">a</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1.call()</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">a</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           全局作用域（window/<span class=\"built_in\">global</span>）</span><br><span class=\"line\">                       |</span><br><span class=\"line\">   f1的作用域                         变量<span class=\"keyword\">a</span></span><br><span class=\"line\">       |</span><br><span class=\"line\">变量<span class=\"keyword\">a</span>      f2的作用域</span><br><span class=\"line\">              |</span><br><span class=\"line\">            变量<span class=\"keyword\">a</span></span><br></pre></td></tr></table></figure>\n<p>如果把<code>var a = 2</code>改成<code>a = 2</code>JS会优先认为这是个赋值<br>JS会在上一级作用域找，找到了就用这个a—— <strong>就近原则</strong><br>什么时候<code>a = 2</code>算声明全局？<br>在找到最后也没找到<code>a</code>的时候</p>\n<h2 id=\"II-声明提升\"><a href=\"#II-声明提升\" class=\"headerlink\" title=\"II.声明提升\"></a>II.声明提升</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//var a 应该在这里</span></span><br><span class=\"line\">    f2.call()   </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>           <span class=\"comment\">//变量提升： 先把它拆开看 var a 和 a = 2。 a = 2在这里</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//这里也有</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>       <span class=\"comment\">//这里也有</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1.call()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>拿到代码先提升<strong>声明</strong>部分<br>声明部分声明部分声明部分<br>改装完毕后它是这样的：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span>               <span class=\"comment\">//提升声明</span></span><br><span class=\"line\">    function f2()&#123;          <span class=\"comment\">//函数声明就不是声明了吗？也要提升</span></span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span>           <span class=\"comment\">//提升声明</span></span><br><span class=\"line\">        <span class=\"selector-tag\">a</span> = <span class=\"number\">3</span></span><br><span class=\"line\">        console.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f2.call()</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1.call()</span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n<p>所以调用f1以后<code>a</code>是什么？<br>赋值在console.log后面，f2的作用域又碰不到<br>那只有undefined咯</p>\n<p>作用域仅代表变量<strong>是哪个</strong><br>不表达变量的<strong>值</strong></p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">1</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">2</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">3</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">4</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">5</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">6</span>&lt;/<span class=\"built_in\">li</span>&gt;    </span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> liTags = document.querySelectorAll('<span class=\"built_in\">li</span>')</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> i=<span class=\"number\">0</span>; i&lt;liTags.<span class=\"built_in\">length</span>; i++)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    liTags[i].onclick = function()&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(i)  //这个i是多少</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(i)</span><br></pre></td></tr></table></figure>\n<p>i还是那个i</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> liTags</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> i</span><br><span class=\"line\">liTags = document.querySelectorAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(var i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onclick</span> = function()&#123;</span><br><span class=\"line\">        console.log(i)  <span class=\"comment\">//这个i是多少</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i)</span><br></pre></td></tr></table></figure>\n<p>遍历之后才是点击，结果是6</p>\n<p><strong>只要它不是当场执行，都有可能变。</strong></p>\n<h1 id=\"6-闭包（Closure）\"><a href=\"#6-闭包（Closure）\" class=\"headerlink\" title=\"6.闭包（Closure）\"></a>6.闭包（Closure）</h1><p>如果一个函数，使用了它范围外的变量，那么这个（函数+这个变量）就叫做闭包。</p>\n<h1 id=\"7-全局变量可耻！\"><a href=\"#7-全局变量可耻！\" class=\"headerlink\" title=\"7.全局变量可耻！\"></a>7.全局变量可耻！</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>parent是个全局变量，直接声明赋值会覆盖它<br>所以我们希望在用这个函数的局部变量——立即调用</p>\n<p>就是声明一个匿名函数，然后立即调用。只是为了用局部变量</p>\n<h2 id=\"I-浏览器会认为这是个语法错误\"><a href=\"#I-浏览器会认为这是个语法错误\" class=\"headerlink\" title=\"I.浏览器会认为这是个语法错误\"></a>I.浏览器会认为这是个语法错误</h2><p>所以需要一些小技巧来改一下↓这一坨</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"i-括号\"><a href=\"#i-括号\" class=\"headerlink\" title=\"i.括号\"></a>i.括号</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call())</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-括号写在调用之前\"><a href=\"#ii-括号写在调用之前\" class=\"headerlink\" title=\"ii.括号写在调用之前\"></a>ii.括号写在调用之前</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;).call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"iii-符号\"><a href=\"#iii-符号\" class=\"headerlink\" title=\"iii.符号\"></a>iii.符号</h3><p>负号<br>因为不需要这个值，只是为了这个局部变量<br>为了让浏览器知道：现在不是在声明一个函数，而是在声明并调用求值</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">-<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同理<code>+</code>也可以咯</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">-<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>那<code>!</code>取反 <code>~</code>二进制的取反都可以</p>\n<p>只要触发，让浏览器明白这不是一个声明而是一个立即执行函数，就可以。浏览器就不报错。 </p>\n<h2 id=\"II-为了解决这个问题，我们有了let\"><a href=\"#II-为了解决这个问题，我们有了let\" class=\"headerlink\" title=\"II.为了解决这个问题，我们有了let\"></a>II.为了解决这个问题，我们有了<code>let</code></h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>用一个代码块来把它框起来，这时候不能用<code>var</code>因为：<br><code>var</code>这个东西只认函数，有函数就认没函数就创建全局变量。<br>但是<code>let</code>不一样，它的作用域就在这个代码块里面</p>\n<p>做个试验</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>这时候，有一个变量提升</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> parent</span></span><br><span class=\"line\"><span class=\"undefined\">&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这没办法呀，<code>var</code>就这样跑出去声明了一个全局变量，因为块包不住它。</p>\n<h3 id=\"i-伟大的es6特性\"><a href=\"#i-伟大的es6特性\" class=\"headerlink\" title=\"i.伟大的es6特性\"></a>i.伟大的es6特性</h3>","site":{"data":{}},"excerpt":"","more":"<p>函数就是一段可以反复调用的代码块。</p>\n<h1 id=\"1-函数的五种声明方式：\"><a href=\"#1-函数的五种声明方式：\" class=\"headerlink\" title=\"1.函数的五种声明方式：\"></a>1.函数的五种声明方式：</h1><h2 id=\"I-具名函数\"><a href=\"#I-具名函数\" class=\"headerlink\" title=\"I.具名函数\"></a>I.具名函数</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(x,y)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">x+y</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.name // <span class=\"string\">'f'</span></span><br></pre></td></tr></table></figure>\n<p>.name就是函数名</p>\n<h2 id=\"II-匿名函数\"><a href=\"#II-匿名函数\" class=\"headerlink\" title=\"II.匿名函数\"></a>II.匿名函数</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f</span><br><span class=\"line\">f = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x,y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.name <span class=\"comment\">//'f'</span></span><br></pre></td></tr></table></figure>\n<p>.name就是变量名</p>\n<p>如果要声明匿名函数，必须把它给一个变量</p>\n<h2 id=\"III-具名函数赋值\"><a href=\"#III-具名函数赋值\" class=\"headerlink\" title=\"III.具名函数赋值\"></a>III.具名函数赋值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f</span><br><span class=\"line\">f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\">x,y</span>)</span>&#123; <span class=\"keyword\">return</span> x+y &#125;</span><br><span class=\"line\">f.name <span class=\"comment\">// 'f2'</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f2) <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>.name随具名函数的函数名</p>\n<p>和具名函数的区别： <code>f.name</code>是他相应具名函数的名字。<br><code>console.log(f)</code>的时候，会报错,因为js会找不到<code>f2</code><br>就很蠢：<strong>这就是它的不一致性</strong><br>这是个作用域问题：<br><code>function f2(){}</code>中的<code>f2</code>只能作用于花括号内</p>\n<h2 id=\"IV-window-Function\"><a href=\"#IV-window-Function\" class=\"headerlink\" title=\"IV.window.Function\"></a>IV.window.Function</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> f = new Function(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x+y'</span>)</span><br><span class=\"line\">f<span class=\"selector-class\">.name</span> <span class=\"comment\">// anonymous</span></span><br></pre></td></tr></table></figure>\n<p>.name 是<code>anonymous</code> 他他娘的是匿名的，名字叫<code>匿名的</code></p>\n<p>很不常用<br>所有的部分用字符串表示，字符串可以拼起来，也可以在里面加变量。</p>\n<h2 id=\"V-箭头函数\"><a href=\"#V-箭头函数\" class=\"headerlink\" title=\"V.箭头函数\"></a>V.箭头函数</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> &#123;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> sum = <span class=\"function\">(<span class=\"params\">x,y</span>) =&gt;</span> x+y</span><br><span class=\"line\"> <span class=\"keyword\">var</span> n2 = <span class=\"function\"><span class=\"params\">n</span> =&gt;</span> n*n</span><br></pre></td></tr></table></figure>\n<p>.name 是变量名</p>\n<p><strong>只有一个参数</strong>，不需要圆括号<br>如果<strong>只有一句话</strong>，不需要花括号也不需要return(也不能返回对象)<br><strong>多句话</strong>的时候，用<strong>分号</strong>隔开</p>\n<p>箭头函数是匿名的（没看到地方写名字呀）</p>\n<h1 id=\"2-调用函数\"><a href=\"#2-调用函数\" class=\"headerlink\" title=\"2.调用函数\"></a>2.调用函数</h1><p>调用： call</p>\n<h2 id=\"I-函数是如何储存在内存里的\"><a href=\"#I-函数是如何储存在内存里的\" class=\"headerlink\" title=\"I.函数是如何储存在内存里的\"></a>I.函数是如何储存在内存里的</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Function(<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>,<span class=\"string\">'return x+y'</span>)  <span class=\"comment\">//这时候栈里面存了地址ADDR</span></span><br><span class=\"line\"><span class=\"comment\">//堆里存了函数的内容：</span></span><br><span class=\"line\"><span class=\"string\">name:</span>   <span class=\"comment\">//名字，他叫匿名的</span></span><br><span class=\"line\"><span class=\"string\">params:</span> [<span class=\"string\">'x'</span>,<span class=\"string\">'y'</span>]   <span class=\"comment\">//参数</span></span><br><span class=\"line\"><span class=\"string\">fbody:</span> <span class=\"string\">'return x+y'</span>     <span class=\"comment\">//函数体</span></span><br><span class=\"line\"><span class=\"string\">__proto__:</span>指向函数，里面有个call</span><br></pre></td></tr></table></figure>\n<p><code>eval：把字符串当代码执行</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.call = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.evaleval（f.functionBody）</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">window</span>.eval(f.functionBody)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以理解为：f指的是这个对象<br>f.call()指的是执行这个对象的函数体</p>\n<p><strong>可以执行代码的对象被叫做函数</strong></p>\n<h2 id=\"II-f-1-2-和f-call-undefined-1-2\"><a href=\"#II-f-1-2-和f-call-undefined-1-2\" class=\"headerlink\" title=\"II.f(1,2)和f.call(undefined,1,2)\"></a>II.f(1,2)和f.call(undefined,1,2)</h2><p>f.call()才是硬核（hardcore）调用<br>贴心的f()语法糖</p>\n<p>不吃糖的选手一定喜欢玩黑魂<br>不吃糖才能更加从容的了解this</p>\n<h2 id=\"III-如何使用call\"><a href=\"#III-如何使用call\" class=\"headerlink\" title=\"III.如何使用call\"></a>III.如何使用call</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span><span class=\"params\">(x,y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x+y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.call(<span class=\"literal\">undefined</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>)   <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//第一个参数写undefined，从第二个参数开始传</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-this-arguments\"><a href=\"#3-this-arguments\" class=\"headerlink\" title=\"3.this? arguments?\"></a>3.this? arguments?</h1><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f.call(undefined,<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"comment\">//这时候好玩了，第一个参数就是this</span></span><br><span class=\"line\"><span class=\"comment\">//第二第三个参数就是arguments</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"I-规律\"><a href=\"#I-规律\" class=\"headerlink\" title=\"I.规律\"></a>I.规律</h2><p>1.call的第一个参数可以用this得到<br>2.call的后面的参数可以用arguments得到</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f.call(<span class=\"literal\">undefined</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>arguments会打出参数（除了第一个）组成<strong>伪数组</strong><br><strong>普通模式下：</strong><br>如果this是undefined，浏览器会自动把this变成window(潜规则)<br><strong>严格模式下：</strong><br>this是什么他就打什么。</p>\n<p><strong>所以，this就是call的第一个参数</strong></p>\n<p>为何JS一定要this，一定要new。因为：<strong>要长得像JAVA</strong></p>\n<h1 id=\"4-call-stack\"><a href=\"#4-call-stack\" class=\"headerlink\" title=\"4. call stack\"></a>4. call stack</h1><h2 id=\"I-调用队栈\"><a href=\"#I-调用队栈\" class=\"headerlink\" title=\"I.调用队栈\"></a>I.调用队栈</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'a'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'b'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'b'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">c</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'c'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a.call()</span><br><span class=\"line\">b.call()</span><br><span class=\"line\">c.call()</span><br></pre></td></tr></table></figure>\n<p>先进后出：<br>先a.call()再console.log(‘a’)<br>然后console.log(‘a’)抹<br>a.call()最后被抹掉</p>\n<p><strong>先进入call stack的后出去</strong></p>\n<h2 id=\"II-递归\"><a href=\"#II-递归\" class=\"headerlink\" title=\"II.递归\"></a>II.递归</h2><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span></span> <span class=\"built_in\">sum</span>(n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n =+ <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n + <span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, <span class=\"number\">5</span>)  //<span class=\"number\">5</span> + <span class=\"built_in\">sum</span>(<span class=\"number\">4</span>)</span><br><span class=\"line\">//<span class=\"built_in\">sum</span>(<span class=\"number\">10</span>)  //<span class=\"number\">10</span> + <span class=\"built_in\">sum</span>(<span class=\"number\">9</span>)</span><br><span class=\"line\">//<span class=\"built_in\">sum</span>(<span class=\"number\">4</span>)  //<span class=\"number\">4</span> + <span class=\"built_in\">sum</span>(<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>求sum(5)的时候发现要找sum(4)<br>求sum(4)的时候发现要求sum(3)<br>…<br>一路找到sum(1)<br>之后一个一个抹掉，出来到sum(5)</p>\n<h2 id=\"III-什么叫Stack-Overflow\"><a href=\"#III-什么叫Stack-Overflow\" class=\"headerlink\" title=\"III.什么叫Stack Overflow\"></a>III.什么叫Stack Overflow</h2><p>栈溢出</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span></span> <span class=\"built_in\">sum</span>(n)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n =+ <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n + <span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, n-<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sum</span>.<span class=\"keyword\">call</span>(undefined, <span class=\"number\">1000000</span>)</span><br></pre></td></tr></table></figure>\n<p>如果栈的长度没有1000000就会爆栈</p>\n<p>chrome里压stack是有上限的</p>\n<p>同时Stack Overflow是个网站，专门讨论bug的</p>\n<h1 id=\"5-作用域（scope）\"><a href=\"#5-作用域（scope）\" class=\"headerlink\" title=\"5.作用域（scope）\"></a>5.作用域（scope）</h1><h2 id=\"I-tree\"><a href=\"#I-tree\" class=\"headerlink\" title=\"I.tree\"></a>I.tree</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>()&#123;</span></span><br><span class=\"line\">    var <span class=\"keyword\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\">    f2.call()</span><br><span class=\"line\">    console.<span class=\"built_in\">log</span>(<span class=\"keyword\">a</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>()&#123;</span></span><br><span class=\"line\">        var <span class=\"keyword\">a</span> = <span class=\"number\">3</span></span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"keyword\">a</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1.call()</span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(<span class=\"keyword\">a</span>)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">           全局作用域（window/<span class=\"built_in\">global</span>）</span><br><span class=\"line\">                       |</span><br><span class=\"line\">   f1的作用域                         变量<span class=\"keyword\">a</span></span><br><span class=\"line\">       |</span><br><span class=\"line\">变量<span class=\"keyword\">a</span>      f2的作用域</span><br><span class=\"line\">              |</span><br><span class=\"line\">            变量<span class=\"keyword\">a</span></span><br></pre></td></tr></table></figure>\n<p>如果把<code>var a = 2</code>改成<code>a = 2</code>JS会优先认为这是个赋值<br>JS会在上一级作用域找，找到了就用这个a—— <strong>就近原则</strong><br>什么时候<code>a = 2</code>算声明全局？<br>在找到最后也没找到<code>a</code>的时候</p>\n<h2 id=\"II-声明提升\"><a href=\"#II-声明提升\" class=\"headerlink\" title=\"II.声明提升\"></a>II.声明提升</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//var a 应该在这里</span></span><br><span class=\"line\">    f2.call()   </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(a)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>           <span class=\"comment\">//变量提升： 先把它拆开看 var a 和 a = 2。 a = 2在这里</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f2</span>(<span class=\"params\"></span>)</span>&#123;  <span class=\"comment\">//这里也有</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>       <span class=\"comment\">//这里也有</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(a)  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f1.call()</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a)</span><br></pre></td></tr></table></figure>\n<p>拿到代码先提升<strong>声明</strong>部分<br>声明部分声明部分声明部分<br>改装完毕后它是这样的：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\">function f1()&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span>               <span class=\"comment\">//提升声明</span></span><br><span class=\"line\">    function f2()&#123;          <span class=\"comment\">//函数声明就不是声明了吗？也要提升</span></span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span>           <span class=\"comment\">//提升声明</span></span><br><span class=\"line\">        <span class=\"selector-tag\">a</span> = <span class=\"number\">3</span></span><br><span class=\"line\">        console.log(a)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    f2.call()</span><br><span class=\"line\">    console.log(a)</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> = <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1.call()</span><br><span class=\"line\">console.log(a)</span><br></pre></td></tr></table></figure>\n<p>所以调用f1以后<code>a</code>是什么？<br>赋值在console.log后面，f2的作用域又碰不到<br>那只有undefined咯</p>\n<p>作用域仅代表变量<strong>是哪个</strong><br>不表达变量的<strong>值</strong></p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">1</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">2</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">3</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">4</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">5</span>&lt;/<span class=\"built_in\">li</span>&gt;</span><br><span class=\"line\">    &lt;<span class=\"built_in\">li</span>&gt;选项<span class=\"number\">6</span>&lt;/<span class=\"built_in\">li</span>&gt;    </span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> liTags = document.querySelectorAll('<span class=\"built_in\">li</span>')</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> i=<span class=\"number\">0</span>; i&lt;liTags.<span class=\"built_in\">length</span>; i++)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    liTags[i].onclick = function()&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(i)  //这个i是多少</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.<span class=\"built_in\">log</span>(i)</span><br></pre></td></tr></table></figure>\n<p>i还是那个i</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> liTags</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> i</span><br><span class=\"line\">liTags = document.querySelectorAll(<span class=\"string\">'li'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(var i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onclick</span> = function()&#123;</span><br><span class=\"line\">        console.log(i)  <span class=\"comment\">//这个i是多少</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(i)</span><br></pre></td></tr></table></figure>\n<p>遍历之后才是点击，结果是6</p>\n<p><strong>只要它不是当场执行，都有可能变。</strong></p>\n<h1 id=\"6-闭包（Closure）\"><a href=\"#6-闭包（Closure）\" class=\"headerlink\" title=\"6.闭包（Closure）\"></a>6.闭包（Closure）</h1><p>如果一个函数，使用了它范围外的变量，那么这个（函数+这个变量）就叫做闭包。</p>\n<h1 id=\"7-全局变量可耻！\"><a href=\"#7-全局变量可耻！\" class=\"headerlink\" title=\"7.全局变量可耻！\"></a>7.全局变量可耻！</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>parent是个全局变量，直接声明赋值会覆盖它<br>所以我们希望在用这个函数的局部变量——立即调用</p>\n<p>就是声明一个匿名函数，然后立即调用。只是为了用局部变量</p>\n<h2 id=\"I-浏览器会认为这是个语法错误\"><a href=\"#I-浏览器会认为这是个语法错误\" class=\"headerlink\" title=\"I.浏览器会认为这是个语法错误\"></a>I.浏览器会认为这是个语法错误</h2><p>所以需要一些小技巧来改一下↓这一坨</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"i-括号\"><a href=\"#i-括号\" class=\"headerlink\" title=\"i.括号\"></a>i.括号</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call())</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-括号写在调用之前\"><a href=\"#ii-括号写在调用之前\" class=\"headerlink\" title=\"ii.括号写在调用之前\"></a>ii.括号写在调用之前</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;).call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"iii-符号\"><a href=\"#iii-符号\" class=\"headerlink\" title=\"iii.符号\"></a>iii.符号</h3><p>负号<br>因为不需要这个值，只是为了这个局部变量<br>为了让浏览器知道：现在不是在声明一个函数，而是在声明并调用求值</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">-<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>同理<code>+</code>也可以咯</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">-<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;.call()</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>那<code>!</code>取反 <code>~</code>二进制的取反都可以</p>\n<p>只要触发，让浏览器明白这不是一个声明而是一个立即执行函数，就可以。浏览器就不报错。 </p>\n<h2 id=\"II-为了解决这个问题，我们有了let\"><a href=\"#II-为了解决这个问题，我们有了let\" class=\"headerlink\" title=\"II.为了解决这个问题，我们有了let\"></a>II.为了解决这个问题，我们有了<code>let</code></h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>用一个代码块来把它框起来，这时候不能用<code>var</code>因为：<br><code>var</code>这个东西只认函数，有函数就认没函数就创建全局变量。<br>但是<code>let</code>不一样，它的作用域就在这个代码块里面</p>\n<p>做个试验</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>这时候，有一个变量提升</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">var</span> parent</span></span><br><span class=\"line\"><span class=\"undefined\">&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    parent = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#self'</span>)  </span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"built_in\">console</span>.log(parent)</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这没办法呀，<code>var</code>就这样跑出去声明了一个全局变量，因为块包不住它。</p>\n<h3 id=\"i-伟大的es6特性\"><a href=\"#i-伟大的es6特性\" class=\"headerlink\" title=\"i.伟大的es6特性\"></a>i.伟大的es6特性</h3>"},{"title":"JSONP","date":"2018-05-07T12:09:31.000Z","_content":"# 0.有些个名词\n\n## 跨域\n跨域指在受到浏览器同源策略限制时（即不在同一个域下）跨域访问资源的一系列相关操作。\n所谓跨域，或者异源，是指主机名（域名）、协议、端口号只要有其一不同，就为不同的域（或源）。浏览器中有一个基本的策略，叫同源策略，即限制“源”自己的脚本只能操作“同源”页面的DOM。（不然不乱套了，你的脚本改我的网站怎么办）\n\n### js中的跨域\n对于一段`JavaScript`脚本来说，其“源”与它存储的地址无关，而取决于脚本被加载的页面（我这里调用jQuery的库就可以用呀）\n除了`<script>`，还有`<img>`、`<iframe>`、`<link>`等都具有跨域加载资源的能力。\n\n## SRJ\nServer Rendered Javascript\n服务器返回的JS\n在AJAX出现之前想出的不刷新页面但更新局部页面的方案\n发送一个`script`之后`remove`这个`script`\n\n# 1.什么是JSONP\n\nJSON + padding = JSONP\n\n```\n${query.callback}.call(undefined,/*从这里开始*/{\n    \"success\": true,\n    \"left\": ${newAmount}\n}/*到这里结束是JSON*/)\n\n//头和尾分别是左右padding\n```\n\n同理String + padding = StringP\n\n如果按照他的作用命名的话应该叫做：动态标签跨域请求\n\n## I.用文字描述一下它是什么\n\n请求方： frank.com 的前端程序员（浏览器）\n响应方： jack.com 的后端程序员\n\n~~以下functionName均表示要执行的函数名~~\n\n### i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName\n\n```\nscript.src = 'http://jack.com:8002/pay?callback=' + functionName\n```\n\n### ii.响应方根据查询参数callbackName，构造形如：\n    1.functionName.call(undefined,'你要的数据')\n    2.functionName('你要的数据')\n    这种响应\n\n### iii.浏览器接收到响应\n就会执行`functionName.call(undefined,'你要的数据')`\n\n### iv.请求方得到了他要的数据\n\n**这就是JSONP的过程**\n\n## II.约定\n### i.callbackName\n统一叫做`callback`\n### ii.functionName会用随机数\n每个网站都得想个名字是不是很麻烦\n所以用随机数：\n避免函数名重复\n\n```\nlet functionName = 'frank' + parseInt(Math.random()*100000)\nwindow[functionName] = function(result){\n    //里面改你的dom内容\n}\nscript.src = 'http://jack.com:8002/pay?callback=' + functionName\ndocument.body.appendChild(script)\nscript.onload = function(e){\n    e.currentTarget.remove()\n    delete window[functionName]     //反正这个函数只用一次，用完再用就再创建呗\n}\nscript.onerror = function(){\n    alert('fail')\n    e.currentTarget.remove()\n    delete window[functionName]         //用完干掉，成功失败都要干掉哟。\n}\n```\n\n**用随机数然后用完干掉是为了不污染全局变量**\n\n# 2.jQuery怎么说的？\n\n```\n$.ajax({\n    url:\"http://jack.com:8002/pay\",\n    dataType: \"jsonp\",\n    success: function( response ){\n        if(response === 'success'){\n            amount.innerText = amount.innerText - 1\n        }\n    }\n})\n```\n\n`callback`呢？\njQuery帮你传了\n函数呢？\njQuery帮你造了\n\n要管的只有：成功以后执行什么。\n\n## 然而这个不是ajax\n`.ajax`这个方法是个动态script\n\n# 3.JSONP为什么不支持POST请求\n\n因为JSONP是通过**动态创建script**的方法进行的，\n而script**只能**发送GET请求不能发送POST请求。\n","source":"_posts/JSONP.md","raw":"---\ntitle: JSONP\ndate: 2018-05-07 20:09:31\ntags: JSONP\n---\n# 0.有些个名词\n\n## 跨域\n跨域指在受到浏览器同源策略限制时（即不在同一个域下）跨域访问资源的一系列相关操作。\n所谓跨域，或者异源，是指主机名（域名）、协议、端口号只要有其一不同，就为不同的域（或源）。浏览器中有一个基本的策略，叫同源策略，即限制“源”自己的脚本只能操作“同源”页面的DOM。（不然不乱套了，你的脚本改我的网站怎么办）\n\n### js中的跨域\n对于一段`JavaScript`脚本来说，其“源”与它存储的地址无关，而取决于脚本被加载的页面（我这里调用jQuery的库就可以用呀）\n除了`<script>`，还有`<img>`、`<iframe>`、`<link>`等都具有跨域加载资源的能力。\n\n## SRJ\nServer Rendered Javascript\n服务器返回的JS\n在AJAX出现之前想出的不刷新页面但更新局部页面的方案\n发送一个`script`之后`remove`这个`script`\n\n# 1.什么是JSONP\n\nJSON + padding = JSONP\n\n```\n${query.callback}.call(undefined,/*从这里开始*/{\n    \"success\": true,\n    \"left\": ${newAmount}\n}/*到这里结束是JSON*/)\n\n//头和尾分别是左右padding\n```\n\n同理String + padding = StringP\n\n如果按照他的作用命名的话应该叫做：动态标签跨域请求\n\n## I.用文字描述一下它是什么\n\n请求方： frank.com 的前端程序员（浏览器）\n响应方： jack.com 的后端程序员\n\n~~以下functionName均表示要执行的函数名~~\n\n### i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName\n\n```\nscript.src = 'http://jack.com:8002/pay?callback=' + functionName\n```\n\n### ii.响应方根据查询参数callbackName，构造形如：\n    1.functionName.call(undefined,'你要的数据')\n    2.functionName('你要的数据')\n    这种响应\n\n### iii.浏览器接收到响应\n就会执行`functionName.call(undefined,'你要的数据')`\n\n### iv.请求方得到了他要的数据\n\n**这就是JSONP的过程**\n\n## II.约定\n### i.callbackName\n统一叫做`callback`\n### ii.functionName会用随机数\n每个网站都得想个名字是不是很麻烦\n所以用随机数：\n避免函数名重复\n\n```\nlet functionName = 'frank' + parseInt(Math.random()*100000)\nwindow[functionName] = function(result){\n    //里面改你的dom内容\n}\nscript.src = 'http://jack.com:8002/pay?callback=' + functionName\ndocument.body.appendChild(script)\nscript.onload = function(e){\n    e.currentTarget.remove()\n    delete window[functionName]     //反正这个函数只用一次，用完再用就再创建呗\n}\nscript.onerror = function(){\n    alert('fail')\n    e.currentTarget.remove()\n    delete window[functionName]         //用完干掉，成功失败都要干掉哟。\n}\n```\n\n**用随机数然后用完干掉是为了不污染全局变量**\n\n# 2.jQuery怎么说的？\n\n```\n$.ajax({\n    url:\"http://jack.com:8002/pay\",\n    dataType: \"jsonp\",\n    success: function( response ){\n        if(response === 'success'){\n            amount.innerText = amount.innerText - 1\n        }\n    }\n})\n```\n\n`callback`呢？\njQuery帮你传了\n函数呢？\njQuery帮你造了\n\n要管的只有：成功以后执行什么。\n\n## 然而这个不是ajax\n`.ajax`这个方法是个动态script\n\n# 3.JSONP为什么不支持POST请求\n\n因为JSONP是通过**动态创建script**的方法进行的，\n而script**只能**发送GET请求不能发送POST请求。\n","slug":"JSONP","published":1,"updated":"2018-05-07T21:43:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3d0003t2g3116mtl59","content":"<h1 id=\"0-有些个名词\"><a href=\"#0-有些个名词\" class=\"headerlink\" title=\"0.有些个名词\"></a>0.有些个名词</h1><h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><p>跨域指在受到浏览器同源策略限制时（即不在同一个域下）跨域访问资源的一系列相关操作。<br>所谓跨域，或者异源，是指主机名（域名）、协议、端口号只要有其一不同，就为不同的域（或源）。浏览器中有一个基本的策略，叫同源策略，即限制“源”自己的脚本只能操作“同源”页面的DOM。（不然不乱套了，你的脚本改我的网站怎么办）</p>\n<h3 id=\"js中的跨域\"><a href=\"#js中的跨域\" class=\"headerlink\" title=\"js中的跨域\"></a>js中的跨域</h3><p>对于一段<code>JavaScript</code>脚本来说，其“源”与它存储的地址无关，而取决于脚本被加载的页面（我这里调用jQuery的库就可以用呀）<br>除了<code>&lt;script&gt;</code>，还有<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;link&gt;</code>等都具有跨域加载资源的能力。</p>\n<h2 id=\"SRJ\"><a href=\"#SRJ\" class=\"headerlink\" title=\"SRJ\"></a>SRJ</h2><p>Server Rendered Javascript<br>服务器返回的JS<br>在AJAX出现之前想出的不刷新页面但更新局部页面的方案<br>发送一个<code>script</code>之后<code>remove</code>这个<code>script</code></p>\n<h1 id=\"1-什么是JSONP\"><a href=\"#1-什么是JSONP\" class=\"headerlink\" title=\"1.什么是JSONP\"></a>1.什么是JSONP</h1><p>JSON + padding = JSONP</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;query.callback&#125;.call(<span class=\"literal\">undefined</span>,<span class=\"comment\">/*从这里开始*/</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"left\"</span>: $&#123;newAmount&#125;</span><br><span class=\"line\">&#125;<span class=\"comment\">/*到这里结束是JSON*/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//头和尾分别是左右padding</span></span><br></pre></td></tr></table></figure>\n<p>同理String + padding = StringP</p>\n<p>如果按照他的作用命名的话应该叫做：动态标签跨域请求</p>\n<h2 id=\"I-用文字描述一下它是什么\"><a href=\"#I-用文字描述一下它是什么\" class=\"headerlink\" title=\"I.用文字描述一下它是什么\"></a>I.用文字描述一下它是什么</h2><p>请求方： frank.com 的前端程序员（浏览器）<br>响应方： jack.com 的后端程序员</p>\n<p><del>以下functionName均表示要执行的函数名</del></p>\n<h3 id=\"i-请求方创建script-src指向响应方，同时传一个查询参数-callbackName-functionName\"><a href=\"#i-请求方创建script-src指向响应方，同时传一个查询参数-callbackName-functionName\" class=\"headerlink\" title=\"i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName\"></a>i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script<span class=\"selector-class\">.src</span> = <span class=\"string\">'http://jack.com:8002/pay?callback='</span> + functionName</span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-响应方根据查询参数callbackName，构造形如：\"><a href=\"#ii-响应方根据查询参数callbackName，构造形如：\" class=\"headerlink\" title=\"ii.响应方根据查询参数callbackName，构造形如：\"></a>ii.响应方根据查询参数callbackName，构造形如：</h3><pre><code>1.functionName.call(undefined,&apos;你要的数据&apos;)\n2.functionName(&apos;你要的数据&apos;)\n这种响应\n</code></pre><h3 id=\"iii-浏览器接收到响应\"><a href=\"#iii-浏览器接收到响应\" class=\"headerlink\" title=\"iii.浏览器接收到响应\"></a>iii.浏览器接收到响应</h3><p>就会执行<code>functionName.call(undefined,&#39;你要的数据&#39;)</code></p>\n<h3 id=\"iv-请求方得到了他要的数据\"><a href=\"#iv-请求方得到了他要的数据\" class=\"headerlink\" title=\"iv.请求方得到了他要的数据\"></a>iv.请求方得到了他要的数据</h3><p><strong>这就是JSONP的过程</strong></p>\n<h2 id=\"II-约定\"><a href=\"#II-约定\" class=\"headerlink\" title=\"II.约定\"></a>II.约定</h2><h3 id=\"i-callbackName\"><a href=\"#i-callbackName\" class=\"headerlink\" title=\"i.callbackName\"></a>i.callbackName</h3><p>统一叫做<code>callback</code></p>\n<h3 id=\"ii-functionName会用随机数\"><a href=\"#ii-functionName会用随机数\" class=\"headerlink\" title=\"ii.functionName会用随机数\"></a>ii.functionName会用随机数</h3><p>每个网站都得想个名字是不是很麻烦<br>所以用随机数：<br>避免函数名重复</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> functionName = <span class=\"string\">'frank'</span> + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[functionName] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//里面改你的dom内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.src = <span class=\"string\">'http://jack.com:8002/pay?callback='</span> + functionName</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(script)</span><br><span class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[functionName]     <span class=\"comment\">//反正这个函数只用一次，用完再用就再创建呗</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'fail'</span>)</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[functionName]         <span class=\"comment\">//用完干掉，成功失败都要干掉哟。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>用随机数然后用完干掉是为了不污染全局变量</strong></p>\n<h1 id=\"2-jQuery怎么说的？\"><a href=\"#2-jQuery怎么说的？\" class=\"headerlink\" title=\"2.jQuery怎么说的？\"></a>2.jQuery怎么说的？</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://jack.com:8002/pay\"</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">\"jsonp\"</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> response </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response === <span class=\"string\">'success'</span>)&#123;</span><br><span class=\"line\">            amount.innerText = amount.innerText - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>callback</code>呢？<br>jQuery帮你传了<br>函数呢？<br>jQuery帮你造了</p>\n<p>要管的只有：成功以后执行什么。</p>\n<h2 id=\"然而这个不是ajax\"><a href=\"#然而这个不是ajax\" class=\"headerlink\" title=\"然而这个不是ajax\"></a>然而这个不是ajax</h2><p><code>.ajax</code>这个方法是个动态script</p>\n<h1 id=\"3-JSONP为什么不支持POST请求\"><a href=\"#3-JSONP为什么不支持POST请求\" class=\"headerlink\" title=\"3.JSONP为什么不支持POST请求\"></a>3.JSONP为什么不支持POST请求</h1><p>因为JSONP是通过<strong>动态创建script</strong>的方法进行的，<br>而script<strong>只能</strong>发送GET请求不能发送POST请求。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"0-有些个名词\"><a href=\"#0-有些个名词\" class=\"headerlink\" title=\"0.有些个名词\"></a>0.有些个名词</h1><h2 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h2><p>跨域指在受到浏览器同源策略限制时（即不在同一个域下）跨域访问资源的一系列相关操作。<br>所谓跨域，或者异源，是指主机名（域名）、协议、端口号只要有其一不同，就为不同的域（或源）。浏览器中有一个基本的策略，叫同源策略，即限制“源”自己的脚本只能操作“同源”页面的DOM。（不然不乱套了，你的脚本改我的网站怎么办）</p>\n<h3 id=\"js中的跨域\"><a href=\"#js中的跨域\" class=\"headerlink\" title=\"js中的跨域\"></a>js中的跨域</h3><p>对于一段<code>JavaScript</code>脚本来说，其“源”与它存储的地址无关，而取决于脚本被加载的页面（我这里调用jQuery的库就可以用呀）<br>除了<code>&lt;script&gt;</code>，还有<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;link&gt;</code>等都具有跨域加载资源的能力。</p>\n<h2 id=\"SRJ\"><a href=\"#SRJ\" class=\"headerlink\" title=\"SRJ\"></a>SRJ</h2><p>Server Rendered Javascript<br>服务器返回的JS<br>在AJAX出现之前想出的不刷新页面但更新局部页面的方案<br>发送一个<code>script</code>之后<code>remove</code>这个<code>script</code></p>\n<h1 id=\"1-什么是JSONP\"><a href=\"#1-什么是JSONP\" class=\"headerlink\" title=\"1.什么是JSONP\"></a>1.什么是JSONP</h1><p>JSON + padding = JSONP</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$&#123;query.callback&#125;.call(<span class=\"literal\">undefined</span>,<span class=\"comment\">/*从这里开始*/</span>&#123;</span><br><span class=\"line\">    <span class=\"string\">\"success\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"string\">\"left\"</span>: $&#123;newAmount&#125;</span><br><span class=\"line\">&#125;<span class=\"comment\">/*到这里结束是JSON*/</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//头和尾分别是左右padding</span></span><br></pre></td></tr></table></figure>\n<p>同理String + padding = StringP</p>\n<p>如果按照他的作用命名的话应该叫做：动态标签跨域请求</p>\n<h2 id=\"I-用文字描述一下它是什么\"><a href=\"#I-用文字描述一下它是什么\" class=\"headerlink\" title=\"I.用文字描述一下它是什么\"></a>I.用文字描述一下它是什么</h2><p>请求方： frank.com 的前端程序员（浏览器）<br>响应方： jack.com 的后端程序员</p>\n<p><del>以下functionName均表示要执行的函数名</del></p>\n<h3 id=\"i-请求方创建script-src指向响应方，同时传一个查询参数-callbackName-functionName\"><a href=\"#i-请求方创建script-src指向响应方，同时传一个查询参数-callbackName-functionName\" class=\"headerlink\" title=\"i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName\"></a>i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script<span class=\"selector-class\">.src</span> = <span class=\"string\">'http://jack.com:8002/pay?callback='</span> + functionName</span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-响应方根据查询参数callbackName，构造形如：\"><a href=\"#ii-响应方根据查询参数callbackName，构造形如：\" class=\"headerlink\" title=\"ii.响应方根据查询参数callbackName，构造形如：\"></a>ii.响应方根据查询参数callbackName，构造形如：</h3><pre><code>1.functionName.call(undefined,&apos;你要的数据&apos;)\n2.functionName(&apos;你要的数据&apos;)\n这种响应\n</code></pre><h3 id=\"iii-浏览器接收到响应\"><a href=\"#iii-浏览器接收到响应\" class=\"headerlink\" title=\"iii.浏览器接收到响应\"></a>iii.浏览器接收到响应</h3><p>就会执行<code>functionName.call(undefined,&#39;你要的数据&#39;)</code></p>\n<h3 id=\"iv-请求方得到了他要的数据\"><a href=\"#iv-请求方得到了他要的数据\" class=\"headerlink\" title=\"iv.请求方得到了他要的数据\"></a>iv.请求方得到了他要的数据</h3><p><strong>这就是JSONP的过程</strong></p>\n<h2 id=\"II-约定\"><a href=\"#II-约定\" class=\"headerlink\" title=\"II.约定\"></a>II.约定</h2><h3 id=\"i-callbackName\"><a href=\"#i-callbackName\" class=\"headerlink\" title=\"i.callbackName\"></a>i.callbackName</h3><p>统一叫做<code>callback</code></p>\n<h3 id=\"ii-functionName会用随机数\"><a href=\"#ii-functionName会用随机数\" class=\"headerlink\" title=\"ii.functionName会用随机数\"></a>ii.functionName会用随机数</h3><p>每个网站都得想个名字是不是很麻烦<br>所以用随机数：<br>避免函数名重复</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> functionName = <span class=\"string\">'frank'</span> + <span class=\"built_in\">parseInt</span>(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">100000</span>)</span><br><span class=\"line\"><span class=\"built_in\">window</span>[functionName] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//里面改你的dom内容</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.src = <span class=\"string\">'http://jack.com:8002/pay?callback='</span> + functionName</span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(script)</span><br><span class=\"line\">script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[functionName]     <span class=\"comment\">//反正这个函数只用一次，用完再用就再创建呗</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">script.onerror = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">'fail'</span>)</span><br><span class=\"line\">    e.currentTarget.remove()</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"built_in\">window</span>[functionName]         <span class=\"comment\">//用完干掉，成功失败都要干掉哟。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>用随机数然后用完干掉是为了不污染全局变量</strong></p>\n<h1 id=\"2-jQuery怎么说的？\"><a href=\"#2-jQuery怎么说的？\" class=\"headerlink\" title=\"2.jQuery怎么说的？\"></a>2.jQuery怎么说的？</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">\"http://jack.com:8002/pay\"</span>,</span><br><span class=\"line\">    dataType: <span class=\"string\">\"jsonp\"</span>,</span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> response </span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(response === <span class=\"string\">'success'</span>)&#123;</span><br><span class=\"line\">            amount.innerText = amount.innerText - <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>callback</code>呢？<br>jQuery帮你传了<br>函数呢？<br>jQuery帮你造了</p>\n<p>要管的只有：成功以后执行什么。</p>\n<h2 id=\"然而这个不是ajax\"><a href=\"#然而这个不是ajax\" class=\"headerlink\" title=\"然而这个不是ajax\"></a>然而这个不是ajax</h2><p><code>.ajax</code>这个方法是个动态script</p>\n<h1 id=\"3-JSONP为什么不支持POST请求\"><a href=\"#3-JSONP为什么不支持POST请求\" class=\"headerlink\" title=\"3.JSONP为什么不支持POST请求\"></a>3.JSONP为什么不支持POST请求</h1><p>因为JSONP是通过<strong>动态创建script</strong>的方法进行的，<br>而script<strong>只能</strong>发送GET请求不能发送POST请求。</p>\n"},{"title":"JavaScript-数据","date":"2018-04-10T04:17:16.000Z","_content":"# 1.数据类型\n### 种类&备注\n七种数据类型：\n\n```\nnumber;\nstring;\nboolean;\nsymbol;\nundefined;\nnull;\nobject\n```\n\n没有array类也没有function类，因为他们都算object。\n**永远不要说JS里一切都是对象**\n\n## I.number\n### i.整数和小数\n`1`是一个整数\n如何得到`1.1`这个数呢?\n可以用`0.1`也可以用`.1`\n### ii.科学计数法\n`1.23e2`是合理的可识别的`123`\n### iii.二进制\n开头是`0b`的\n### iv.八进制\n开头是`0`的，后来ES5添加了0o11语法\n### v.十六进制\n开头是`0x`的\n## II.string\n### i.空字符串\n`''`或者`\"\"`空字符串，里面什么都没有\n### ii.转义符\n表达这个字符串里面只有一个`'`怎么办\n`\"'\"`这么来\n那么问题来了，我要表达这个字符串是`\"'`怎么办，一个单引号一个双引号区分不开呀\n这时候需要一个`\\`反杠，`\\`来告诉浏览器，这个引号不是拿来结束字符串的。\n这就叫做，**转义符**\n他不仅仅有这个作用还有：\n\n|转义符|作用|Unicode|\n|:---:|:---:|:---:|\n|`\\0`|null|（\\u0000）|\n|`\\b`|后退键|（\\u0008）|\n|`\\f`|换页符|（\\u000C）|\n|`\\n`|换行符|（\\u000A）|\n|`\\r`|回车键|（\\u000D）|\n|`\\t`|制表符|（\\u0009）|\n|`\\v`|垂直制表符|（\\u000B）|\n|`\\'`|单引号|（\\u0027）|\n|`\\\"`|双引号|（\\u0022）|\n|`\\\\`|反斜杠|（\\u005C）|\n\n### iii.多行字符串\n不是字符串里面有回车\n而是我希望字符串有换行\n\n```\nvar s = '12345 \\\n        67890'\n```\n\n就像命令行一样\n\n```\nvar s2 = '12345' + '67890'\n```\n\n这样也可以\n**但是方法一有个很鬼的问题**\n\n```\nvar s = '12345 \\     //反杠后面如果有一堆空格\n67890'\n```\n\n反杠后面有一堆空格那么就热闹了，反杠会把第一个空格变成...字符串里的空格...\n遭重了，很坑很坑。\n所以最好用第二个方法了。\n\n**既然这个这么坑，那JS要解决它呀**\n所以在ES6里就有了这个符号`就是这个点\n\n```\nvar s4 = `12345\n67890`\n```\n\n他会记录里面的一切，包括回车\n所以这就是11个字符`s4.length`是`11`\n## III.boolean\n### i.George Boole\n数学家、哲学家，发明逻辑学。\n为了纪念他，我们把`ture`和`false`两个值叫做布尔\n`&&`与\n`||`或\n## IV.symbol\n### i.是什么\nES6引入了新的数据类型Symbol，用于生成一个全局唯一的值。\n### ii.怎么用\n借用方方老师的例子\n```\nvar race = {\n  protoss: 'protoss', // 神族\n  terran: 'terran', // 人族\n  zerg: 'zerg' // 虫族\n}\n\nfunction createRole(type){\n  if(type === race.protoss){选择神族兵种}\n  else if(type === race.terran){选择人族兵种}\n  else if(type === race.zerg){选择虫族兵种}\n}\n```\n\n打星际选择兵种。race的键-值组合中，值显得并不重要。\n那么值甚至可以乱敲只要他们三个种族的值不重复就可以。\n那么Symbol可以替代对应的值\n\n```\nvar race = {\n  protoss: Symbol(),\n  terran: Symbol(),\n  zerg: Symbol()\n}\n\nrace.protoss !== race.terran // true\nrace.protoss !== race.zerg // true\n```\n\n还可以给`Symbol()`加个注释`Symbol('protoss')`仅仅就是个提示，起什么和值没有任何关系。\n\n总结：占位置的。起名字福音。\n## V.undefined和null\n### i.null\n是一个类型。只有一个值`null`\n### ii.undefined\n是一个类型。只有一个值`undefined`\n### iii.这两个兄弟干嘛的\n这是个BUG，语言问题。\n都表达了一个：`什么也没有`原创BUG哟\n### iv.那他们有什么区别呢？？？\n① 变量没有值 - undefined\n② 如果你想有一个对象（`obj`），但是目前不想赋值，那就给他一个`null`（推荐）.`var obj = null`\n如果你有一个非对象，目前不想赋值，那就给他一个`undefined`（推荐）。`var n`那它就是一个`undefine`\n③ **②为惯例 ①为语法**\n总结一下，null是空对象，undefined是非对象。\n## VI.object\n之前说的，都是基本（简单）类型，到了对象，就是复杂类型了。\n复杂类型由简单类型组成。\n举个例子：\n\n```\nvar name = 'Oracle'\nvar age = '24'\nvar gender = 'male'\n```\n\n他们三个都是一对一，冥冥之中似乎可以放在一起。\n\n```\nvar person = \n{\n'name':'Oracle',\n'age':'24',\n'gender':'male'\n}\n```\n\n变成这种`键-值`组合\n### i.语法\n`{`开头\n`}`结尾\n左边的键，可以不用引号，左边永远都是字符串。\n右边该怎么写怎么写\n需要变量去容纳它`var person = `，他就是一个类型是对象的变量\n读取它`person['name']`这个`name`必须加引号\n为了避免之前有变量也叫name\n如果他符合标识符规则那可以`person.name`\n### ii.对象里还可以套对象\n**那么对象里套的对象，里面的对象是否可以是自己？**\n这个麻烦了\n**解决这个问题之前请参见([JavaScript-类型](https://574549756.github.io/2018/04/11/JavaScript-%E7%B1%BB%E5%9E%8B/))**\n\n```\nvar a = {}\na.self = a\na.self.self.self是什么\n```\n\n首先对象存了一个ADDR然后不断引用这个地址\n\n### iii.空字符串是否能当做key？\n\n```\nperson = {'':'oracle'}\nperson['']   //oracle\n```\n\n可以\n### iv.key的第一个字是否可以是数字\n不可以。\n`9name: 'oracle',` 这种是不可以\n如果不加引号，key必须依照标识符（变量名）原则\n不加引号，写起来舒服。加上引号，功能多。\n同理，如果是**数组**那么读取数组成员的时候就**不能用点结构**\n单独的数值不能作为标识符。数组成员只能用方括号`arr[0]`来表示\n### v.key能不能有空格\n一样的规则，有引号就可以，没有就GG\n### vi.key可不可以加中文\n可以，因为中文可以当做变量名。\n### vii.for in\n\n```\nfor(var key in person){\n        console.log(key)\n}\n```\n\n遍历数组的`key`但是\n出现`key`的顺序是看天的。\n那我想打出值呢？\n\n```\nfor(var key in person){\n        console.log(person[key])\n}\n```\n\n那一起打呢？\n\n```\nfor(var key in person){\n        console.log(key,person[key])\n}\n```\n\n和上面说的一样，随机的\n## VII.typeof\n### i.干吗用的？\n看类型的\n\n```\nvar t = 1\ntypeof t //\"number\"\n\nvar t = true\ntypeof t //\"boolean\"\n```\n### ii.但是有一个特殊\n**这是JS的BUG**\n他叫做`null`\n如果测`typeof null`会返回`‘object’`\n如果声明一个`函数`\n用`typeof fn`本应该是`‘object’`但是他会返回`‘function’`\n什么时候函数也是独立的类型了？","source":"_posts/JavaScript-数据.md","raw":"---\ntitle: JavaScript-数据\ndate: 2018-04-10 12:17:16\ntags: JS\n---\n# 1.数据类型\n### 种类&备注\n七种数据类型：\n\n```\nnumber;\nstring;\nboolean;\nsymbol;\nundefined;\nnull;\nobject\n```\n\n没有array类也没有function类，因为他们都算object。\n**永远不要说JS里一切都是对象**\n\n## I.number\n### i.整数和小数\n`1`是一个整数\n如何得到`1.1`这个数呢?\n可以用`0.1`也可以用`.1`\n### ii.科学计数法\n`1.23e2`是合理的可识别的`123`\n### iii.二进制\n开头是`0b`的\n### iv.八进制\n开头是`0`的，后来ES5添加了0o11语法\n### v.十六进制\n开头是`0x`的\n## II.string\n### i.空字符串\n`''`或者`\"\"`空字符串，里面什么都没有\n### ii.转义符\n表达这个字符串里面只有一个`'`怎么办\n`\"'\"`这么来\n那么问题来了，我要表达这个字符串是`\"'`怎么办，一个单引号一个双引号区分不开呀\n这时候需要一个`\\`反杠，`\\`来告诉浏览器，这个引号不是拿来结束字符串的。\n这就叫做，**转义符**\n他不仅仅有这个作用还有：\n\n|转义符|作用|Unicode|\n|:---:|:---:|:---:|\n|`\\0`|null|（\\u0000）|\n|`\\b`|后退键|（\\u0008）|\n|`\\f`|换页符|（\\u000C）|\n|`\\n`|换行符|（\\u000A）|\n|`\\r`|回车键|（\\u000D）|\n|`\\t`|制表符|（\\u0009）|\n|`\\v`|垂直制表符|（\\u000B）|\n|`\\'`|单引号|（\\u0027）|\n|`\\\"`|双引号|（\\u0022）|\n|`\\\\`|反斜杠|（\\u005C）|\n\n### iii.多行字符串\n不是字符串里面有回车\n而是我希望字符串有换行\n\n```\nvar s = '12345 \\\n        67890'\n```\n\n就像命令行一样\n\n```\nvar s2 = '12345' + '67890'\n```\n\n这样也可以\n**但是方法一有个很鬼的问题**\n\n```\nvar s = '12345 \\     //反杠后面如果有一堆空格\n67890'\n```\n\n反杠后面有一堆空格那么就热闹了，反杠会把第一个空格变成...字符串里的空格...\n遭重了，很坑很坑。\n所以最好用第二个方法了。\n\n**既然这个这么坑，那JS要解决它呀**\n所以在ES6里就有了这个符号`就是这个点\n\n```\nvar s4 = `12345\n67890`\n```\n\n他会记录里面的一切，包括回车\n所以这就是11个字符`s4.length`是`11`\n## III.boolean\n### i.George Boole\n数学家、哲学家，发明逻辑学。\n为了纪念他，我们把`ture`和`false`两个值叫做布尔\n`&&`与\n`||`或\n## IV.symbol\n### i.是什么\nES6引入了新的数据类型Symbol，用于生成一个全局唯一的值。\n### ii.怎么用\n借用方方老师的例子\n```\nvar race = {\n  protoss: 'protoss', // 神族\n  terran: 'terran', // 人族\n  zerg: 'zerg' // 虫族\n}\n\nfunction createRole(type){\n  if(type === race.protoss){选择神族兵种}\n  else if(type === race.terran){选择人族兵种}\n  else if(type === race.zerg){选择虫族兵种}\n}\n```\n\n打星际选择兵种。race的键-值组合中，值显得并不重要。\n那么值甚至可以乱敲只要他们三个种族的值不重复就可以。\n那么Symbol可以替代对应的值\n\n```\nvar race = {\n  protoss: Symbol(),\n  terran: Symbol(),\n  zerg: Symbol()\n}\n\nrace.protoss !== race.terran // true\nrace.protoss !== race.zerg // true\n```\n\n还可以给`Symbol()`加个注释`Symbol('protoss')`仅仅就是个提示，起什么和值没有任何关系。\n\n总结：占位置的。起名字福音。\n## V.undefined和null\n### i.null\n是一个类型。只有一个值`null`\n### ii.undefined\n是一个类型。只有一个值`undefined`\n### iii.这两个兄弟干嘛的\n这是个BUG，语言问题。\n都表达了一个：`什么也没有`原创BUG哟\n### iv.那他们有什么区别呢？？？\n① 变量没有值 - undefined\n② 如果你想有一个对象（`obj`），但是目前不想赋值，那就给他一个`null`（推荐）.`var obj = null`\n如果你有一个非对象，目前不想赋值，那就给他一个`undefined`（推荐）。`var n`那它就是一个`undefine`\n③ **②为惯例 ①为语法**\n总结一下，null是空对象，undefined是非对象。\n## VI.object\n之前说的，都是基本（简单）类型，到了对象，就是复杂类型了。\n复杂类型由简单类型组成。\n举个例子：\n\n```\nvar name = 'Oracle'\nvar age = '24'\nvar gender = 'male'\n```\n\n他们三个都是一对一，冥冥之中似乎可以放在一起。\n\n```\nvar person = \n{\n'name':'Oracle',\n'age':'24',\n'gender':'male'\n}\n```\n\n变成这种`键-值`组合\n### i.语法\n`{`开头\n`}`结尾\n左边的键，可以不用引号，左边永远都是字符串。\n右边该怎么写怎么写\n需要变量去容纳它`var person = `，他就是一个类型是对象的变量\n读取它`person['name']`这个`name`必须加引号\n为了避免之前有变量也叫name\n如果他符合标识符规则那可以`person.name`\n### ii.对象里还可以套对象\n**那么对象里套的对象，里面的对象是否可以是自己？**\n这个麻烦了\n**解决这个问题之前请参见([JavaScript-类型](https://574549756.github.io/2018/04/11/JavaScript-%E7%B1%BB%E5%9E%8B/))**\n\n```\nvar a = {}\na.self = a\na.self.self.self是什么\n```\n\n首先对象存了一个ADDR然后不断引用这个地址\n\n### iii.空字符串是否能当做key？\n\n```\nperson = {'':'oracle'}\nperson['']   //oracle\n```\n\n可以\n### iv.key的第一个字是否可以是数字\n不可以。\n`9name: 'oracle',` 这种是不可以\n如果不加引号，key必须依照标识符（变量名）原则\n不加引号，写起来舒服。加上引号，功能多。\n同理，如果是**数组**那么读取数组成员的时候就**不能用点结构**\n单独的数值不能作为标识符。数组成员只能用方括号`arr[0]`来表示\n### v.key能不能有空格\n一样的规则，有引号就可以，没有就GG\n### vi.key可不可以加中文\n可以，因为中文可以当做变量名。\n### vii.for in\n\n```\nfor(var key in person){\n        console.log(key)\n}\n```\n\n遍历数组的`key`但是\n出现`key`的顺序是看天的。\n那我想打出值呢？\n\n```\nfor(var key in person){\n        console.log(person[key])\n}\n```\n\n那一起打呢？\n\n```\nfor(var key in person){\n        console.log(key,person[key])\n}\n```\n\n和上面说的一样，随机的\n## VII.typeof\n### i.干吗用的？\n看类型的\n\n```\nvar t = 1\ntypeof t //\"number\"\n\nvar t = true\ntypeof t //\"boolean\"\n```\n### ii.但是有一个特殊\n**这是JS的BUG**\n他叫做`null`\n如果测`typeof null`会返回`‘object’`\n如果声明一个`函数`\n用`typeof fn`本应该是`‘object’`但是他会返回`‘function’`\n什么时候函数也是独立的类型了？","slug":"JavaScript-数据","published":1,"updated":"2018-04-11T12:32:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3f0004t2g3gct2dalr","content":"<h1 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h1><h3 id=\"种类-amp-备注\"><a href=\"#种类-amp-备注\" class=\"headerlink\" title=\"种类&amp;备注\"></a>种类&amp;备注</h3><p>七种数据类型：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number<span class=\"comment\">;</span></span><br><span class=\"line\">string<span class=\"comment\">;</span></span><br><span class=\"line\">boolean<span class=\"comment\">;</span></span><br><span class=\"line\">symbol<span class=\"comment\">;</span></span><br><span class=\"line\">undefined<span class=\"comment\">;</span></span><br><span class=\"line\">null<span class=\"comment\">;</span></span><br><span class=\"line\">object</span><br></pre></td></tr></table></figure>\n<p>没有array类也没有function类，因为他们都算object。<br><strong>永远不要说JS里一切都是对象</strong></p>\n<h2 id=\"I-number\"><a href=\"#I-number\" class=\"headerlink\" title=\"I.number\"></a>I.number</h2><h3 id=\"i-整数和小数\"><a href=\"#i-整数和小数\" class=\"headerlink\" title=\"i.整数和小数\"></a>i.整数和小数</h3><p><code>1</code>是一个整数<br>如何得到<code>1.1</code>这个数呢?<br>可以用<code>0.1</code>也可以用<code>.1</code></p>\n<h3 id=\"ii-科学计数法\"><a href=\"#ii-科学计数法\" class=\"headerlink\" title=\"ii.科学计数法\"></a>ii.科学计数法</h3><p><code>1.23e2</code>是合理的可识别的<code>123</code></p>\n<h3 id=\"iii-二进制\"><a href=\"#iii-二进制\" class=\"headerlink\" title=\"iii.二进制\"></a>iii.二进制</h3><p>开头是<code>0b</code>的</p>\n<h3 id=\"iv-八进制\"><a href=\"#iv-八进制\" class=\"headerlink\" title=\"iv.八进制\"></a>iv.八进制</h3><p>开头是<code>0</code>的，后来ES5添加了0o11语法</p>\n<h3 id=\"v-十六进制\"><a href=\"#v-十六进制\" class=\"headerlink\" title=\"v.十六进制\"></a>v.十六进制</h3><p>开头是<code>0x</code>的</p>\n<h2 id=\"II-string\"><a href=\"#II-string\" class=\"headerlink\" title=\"II.string\"></a>II.string</h2><h3 id=\"i-空字符串\"><a href=\"#i-空字符串\" class=\"headerlink\" title=\"i.空字符串\"></a>i.空字符串</h3><p><code>&#39;&#39;</code>或者<code>&quot;&quot;</code>空字符串，里面什么都没有</p>\n<h3 id=\"ii-转义符\"><a href=\"#ii-转义符\" class=\"headerlink\" title=\"ii.转义符\"></a>ii.转义符</h3><p>表达这个字符串里面只有一个<code>&#39;</code>怎么办<br><code>&quot;&#39;&quot;</code>这么来<br>那么问题来了，我要表达这个字符串是<code>&quot;&#39;</code>怎么办，一个单引号一个双引号区分不开呀<br>这时候需要一个<code>\\</code>反杠，<code>\\</code>来告诉浏览器，这个引号不是拿来结束字符串的。<br>这就叫做，<strong>转义符</strong><br>他不仅仅有这个作用还有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">转义符</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">Unicode</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>\\0</code></td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">（\\u0000）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td style=\"text-align:center\">后退键</td>\n<td style=\"text-align:center\">（\\u0008）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\f</code></td>\n<td style=\"text-align:center\">换页符</td>\n<td style=\"text-align:center\">（\\u000C）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\n</code></td>\n<td style=\"text-align:center\">换行符</td>\n<td style=\"text-align:center\">（\\u000A）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\r</code></td>\n<td style=\"text-align:center\">回车键</td>\n<td style=\"text-align:center\">（\\u000D）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\t</code></td>\n<td style=\"text-align:center\">制表符</td>\n<td style=\"text-align:center\">（\\u0009）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\v</code></td>\n<td style=\"text-align:center\">垂直制表符</td>\n<td style=\"text-align:center\">（\\u000B）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\&#39;</code></td>\n<td style=\"text-align:center\">单引号</td>\n<td style=\"text-align:center\">（\\u0027）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\&quot;</code></td>\n<td style=\"text-align:center\">双引号</td>\n<td style=\"text-align:center\">（\\u0022）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\\\</code></td>\n<td style=\"text-align:center\">反斜杠</td>\n<td style=\"text-align:center\">（\\u005C）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"iii-多行字符串\"><a href=\"#iii-多行字符串\" class=\"headerlink\" title=\"iii.多行字符串\"></a>iii.多行字符串</h3><p>不是字符串里面有回车<br>而是我希望字符串有换行</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = '<span class=\"number\">1234</span>5 \\</span><br><span class=\"line\">        <span class=\"number\">6789</span>0'</span><br></pre></td></tr></table></figure>\n<p>就像命令行一样</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s2 = '<span class=\"number\">1234</span>5' + '<span class=\"number\">6789</span>0'</span><br></pre></td></tr></table></figure>\n<p>这样也可以<br><strong>但是方法一有个很鬼的问题</strong></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = '<span class=\"number\">1234</span>5 \\     //反杠后面如果有一堆空格</span><br><span class=\"line\"><span class=\"number\">6789</span>0'</span><br></pre></td></tr></table></figure>\n<p>反杠后面有一堆空格那么就热闹了，反杠会把第一个空格变成…字符串里的空格…<br>遭重了，很坑很坑。<br>所以最好用第二个方法了。</p>\n<p><strong>既然这个这么坑，那JS要解决它呀</strong><br>所以在ES6里就有了这个符号`就是这个点</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s4 = `<span class=\"number\">12345</span></span><br><span class=\"line\"><span class=\"number\">67890</span>`</span><br></pre></td></tr></table></figure>\n<p>他会记录里面的一切，包括回车<br>所以这就是11个字符<code>s4.length</code>是<code>11</code></p>\n<h2 id=\"III-boolean\"><a href=\"#III-boolean\" class=\"headerlink\" title=\"III.boolean\"></a>III.boolean</h2><h3 id=\"i-George-Boole\"><a href=\"#i-George-Boole\" class=\"headerlink\" title=\"i.George Boole\"></a>i.George Boole</h3><p>数学家、哲学家，发明逻辑学。<br>为了纪念他，我们把<code>ture</code>和<code>false</code>两个值叫做布尔<br><code>&amp;&amp;</code>与<br><code>||</code>或</p>\n<h2 id=\"IV-symbol\"><a href=\"#IV-symbol\" class=\"headerlink\" title=\"IV.symbol\"></a>IV.symbol</h2><h3 id=\"i-是什么\"><a href=\"#i-是什么\" class=\"headerlink\" title=\"i.是什么\"></a>i.是什么</h3><p>ES6引入了新的数据类型Symbol，用于生成一个全局唯一的值。</p>\n<h3 id=\"ii-怎么用\"><a href=\"#ii-怎么用\" class=\"headerlink\" title=\"ii.怎么用\"></a>ii.怎么用</h3><p>借用方方老师的例子<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> race = &#123;</span><br><span class=\"line\">  protoss: <span class=\"symbol\">'protos</span>s', <span class=\"comment\">// 神族</span></span><br><span class=\"line\">  terran: <span class=\"symbol\">'terra</span>n', <span class=\"comment\">// 人族</span></span><br><span class=\"line\">  zerg: <span class=\"symbol\">'zer</span>g' <span class=\"comment\">// 虫族</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function createRole(<span class=\"class\"><span class=\"keyword\">type</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">===</span> <span class=\"title\">race</span>.<span class=\"title\">protoss</span>)</span>&#123;选择神族兵种&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">===</span> <span class=\"title\">race</span>.<span class=\"title\">terran</span>)</span>&#123;选择人族兵种&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">===</span> <span class=\"title\">race</span>.<span class=\"title\">zerg</span>)</span>&#123;选择虫族兵种&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打星际选择兵种。race的键-值组合中，值显得并不重要。<br>那么值甚至可以乱敲只要他们三个种族的值不重复就可以。<br>那么Symbol可以替代对应的值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> race = &#123;</span><br><span class=\"line\">  protoss: Symbol(),</span><br><span class=\"line\">  terran: Symbol(),</span><br><span class=\"line\">  zerg: Symbol()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">race<span class=\"selector-class\">.protoss</span> !== race<span class=\"selector-class\">.terran</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">race<span class=\"selector-class\">.protoss</span> !== race<span class=\"selector-class\">.zerg</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>还可以给<code>Symbol()</code>加个注释<code>Symbol(&#39;protoss&#39;)</code>仅仅就是个提示，起什么和值没有任何关系。</p>\n<p>总结：占位置的。起名字福音。</p>\n<h2 id=\"V-undefined和null\"><a href=\"#V-undefined和null\" class=\"headerlink\" title=\"V.undefined和null\"></a>V.undefined和null</h2><h3 id=\"i-null\"><a href=\"#i-null\" class=\"headerlink\" title=\"i.null\"></a>i.null</h3><p>是一个类型。只有一个值<code>null</code></p>\n<h3 id=\"ii-undefined\"><a href=\"#ii-undefined\" class=\"headerlink\" title=\"ii.undefined\"></a>ii.undefined</h3><p>是一个类型。只有一个值<code>undefined</code></p>\n<h3 id=\"iii-这两个兄弟干嘛的\"><a href=\"#iii-这两个兄弟干嘛的\" class=\"headerlink\" title=\"iii.这两个兄弟干嘛的\"></a>iii.这两个兄弟干嘛的</h3><p>这是个BUG，语言问题。<br>都表达了一个：<code>什么也没有</code>原创BUG哟</p>\n<h3 id=\"iv-那他们有什么区别呢？？？\"><a href=\"#iv-那他们有什么区别呢？？？\" class=\"headerlink\" title=\"iv.那他们有什么区别呢？？？\"></a>iv.那他们有什么区别呢？？？</h3><p>① 变量没有值 - undefined<br>② 如果你想有一个对象（<code>obj</code>），但是目前不想赋值，那就给他一个<code>null</code>（推荐）.<code>var obj = null</code><br>如果你有一个非对象，目前不想赋值，那就给他一个<code>undefined</code>（推荐）。<code>var n</code>那它就是一个<code>undefine</code><br>③ <strong>②为惯例 ①为语法</strong><br>总结一下，null是空对象，undefined是非对象。</p>\n<h2 id=\"VI-object\"><a href=\"#VI-object\" class=\"headerlink\" title=\"VI.object\"></a>VI.object</h2><p>之前说的，都是基本（简单）类型，到了对象，就是复杂类型了。<br>复杂类型由简单类型组成。<br>举个例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> name = <span class=\"string\">'Oracle'</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> age = <span class=\"string\">'24'</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> gender = <span class=\"string\">'male'</span></span><br></pre></td></tr></table></figure>\n<p>他们三个都是一对一，冥冥之中似乎可以放在一起。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> person = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">'name'</span>:<span class=\"string\">'Oracle'</span>,</span><br><span class=\"line\"><span class=\"string\">'age'</span>:<span class=\"string\">'24'</span>,</span><br><span class=\"line\"><span class=\"string\">'gender'</span>:<span class=\"string\">'male'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变成这种<code>键-值</code>组合</p>\n<h3 id=\"i-语法\"><a href=\"#i-语法\" class=\"headerlink\" title=\"i.语法\"></a>i.语法</h3><p><code>{</code>开头<br><code>}</code>结尾<br>左边的键，可以不用引号，左边永远都是字符串。<br>右边该怎么写怎么写<br>需要变量去容纳它<code>var person =</code>，他就是一个类型是对象的变量<br>读取它<code>person[&#39;name&#39;]</code>这个<code>name</code>必须加引号<br>为了避免之前有变量也叫name<br>如果他符合标识符规则那可以<code>person.name</code></p>\n<h3 id=\"ii-对象里还可以套对象\"><a href=\"#ii-对象里还可以套对象\" class=\"headerlink\" title=\"ii.对象里还可以套对象\"></a>ii.对象里还可以套对象</h3><p><strong>那么对象里套的对象，里面的对象是否可以是自己？</strong><br>这个麻烦了<br><strong>解决这个问题之前请参见(<a href=\"https://574549756.github.io/2018/04/11/JavaScript-%E7%B1%BB%E5%9E%8B/\" target=\"_blank\" rel=\"noopener\">JavaScript-类型</a>)</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.self</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.self</span><span class=\"selector-class\">.self</span><span class=\"selector-class\">.self</span>是什么</span><br></pre></td></tr></table></figure>\n<p>首先对象存了一个ADDR然后不断引用这个地址</p>\n<h3 id=\"iii-空字符串是否能当做key？\"><a href=\"#iii-空字符串是否能当做key？\" class=\"headerlink\" title=\"iii.空字符串是否能当做key？\"></a>iii.空字符串是否能当做key？</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person = &#123;'':'oracle'&#125;</span><br><span class=\"line\">person['']   <span class=\"comment\">//oracle</span></span><br></pre></td></tr></table></figure>\n<p>可以</p>\n<h3 id=\"iv-key的第一个字是否可以是数字\"><a href=\"#iv-key的第一个字是否可以是数字\" class=\"headerlink\" title=\"iv.key的第一个字是否可以是数字\"></a>iv.key的第一个字是否可以是数字</h3><p>不可以。<br><code>9name: &#39;oracle&#39;,</code> 这种是不可以<br>如果不加引号，key必须依照标识符（变量名）原则<br>不加引号，写起来舒服。加上引号，功能多。<br>同理，如果是<strong>数组</strong>那么读取数组成员的时候就<strong>不能用点结构</strong><br>单独的数值不能作为标识符。数组成员只能用方括号<code>arr[0]</code>来表示</p>\n<h3 id=\"v-key能不能有空格\"><a href=\"#v-key能不能有空格\" class=\"headerlink\" title=\"v.key能不能有空格\"></a>v.key能不能有空格</h3><p>一样的规则，有引号就可以，没有就GG</p>\n<h3 id=\"vi-key可不可以加中文\"><a href=\"#vi-key可不可以加中文\" class=\"headerlink\" title=\"vi.key可不可以加中文\"></a>vi.key可不可以加中文</h3><p>可以，因为中文可以当做变量名。</p>\n<h3 id=\"vii-for-in\"><a href=\"#vii-for-in\" class=\"headerlink\" title=\"vii.for in\"></a>vii.for in</h3><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> <span class=\"built_in\">key</span> <span class=\"keyword\">in</span> person)&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"built_in\">key</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遍历数组的<code>key</code>但是<br>出现<code>key</code>的顺序是看天的。<br>那我想打出值呢？</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> <span class=\"built_in\">key</span> <span class=\"keyword\">in</span> person)&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(person[<span class=\"built_in\">key</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那一起打呢？</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> <span class=\"built_in\">key</span> <span class=\"keyword\">in</span> person)&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"built_in\">key</span>,person[<span class=\"built_in\">key</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和上面说的一样，随机的</p>\n<h2 id=\"VII-typeof\"><a href=\"#VII-typeof\" class=\"headerlink\" title=\"VII.typeof\"></a>VII.typeof</h2><h3 id=\"i-干吗用的？\"><a href=\"#i-干吗用的？\" class=\"headerlink\" title=\"i.干吗用的？\"></a>i.干吗用的？</h3><p>看类型的</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">t</span> = <span class=\"number\">1</span></span><br><span class=\"line\">typeof <span class=\"built_in\">t</span> //<span class=\"string\">\"number\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">t</span> = <span class=\"built_in\">true</span></span><br><span class=\"line\">typeof <span class=\"built_in\">t</span> //<span class=\"string\">\"boolean\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-但是有一个特殊\"><a href=\"#ii-但是有一个特殊\" class=\"headerlink\" title=\"ii.但是有一个特殊\"></a>ii.但是有一个特殊</h3><p><strong>这是JS的BUG</strong><br>他叫做<code>null</code><br>如果测<code>typeof null</code>会返回<code>‘object’</code><br>如果声明一个<code>函数</code><br>用<code>typeof fn</code>本应该是<code>‘object’</code>但是他会返回<code>‘function’</code><br>什么时候函数也是独立的类型了？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1.数据类型\"></a>1.数据类型</h1><h3 id=\"种类-amp-备注\"><a href=\"#种类-amp-备注\" class=\"headerlink\" title=\"种类&amp;备注\"></a>种类&amp;备注</h3><p>七种数据类型：</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">number<span class=\"comment\">;</span></span><br><span class=\"line\">string<span class=\"comment\">;</span></span><br><span class=\"line\">boolean<span class=\"comment\">;</span></span><br><span class=\"line\">symbol<span class=\"comment\">;</span></span><br><span class=\"line\">undefined<span class=\"comment\">;</span></span><br><span class=\"line\">null<span class=\"comment\">;</span></span><br><span class=\"line\">object</span><br></pre></td></tr></table></figure>\n<p>没有array类也没有function类，因为他们都算object。<br><strong>永远不要说JS里一切都是对象</strong></p>\n<h2 id=\"I-number\"><a href=\"#I-number\" class=\"headerlink\" title=\"I.number\"></a>I.number</h2><h3 id=\"i-整数和小数\"><a href=\"#i-整数和小数\" class=\"headerlink\" title=\"i.整数和小数\"></a>i.整数和小数</h3><p><code>1</code>是一个整数<br>如何得到<code>1.1</code>这个数呢?<br>可以用<code>0.1</code>也可以用<code>.1</code></p>\n<h3 id=\"ii-科学计数法\"><a href=\"#ii-科学计数法\" class=\"headerlink\" title=\"ii.科学计数法\"></a>ii.科学计数法</h3><p><code>1.23e2</code>是合理的可识别的<code>123</code></p>\n<h3 id=\"iii-二进制\"><a href=\"#iii-二进制\" class=\"headerlink\" title=\"iii.二进制\"></a>iii.二进制</h3><p>开头是<code>0b</code>的</p>\n<h3 id=\"iv-八进制\"><a href=\"#iv-八进制\" class=\"headerlink\" title=\"iv.八进制\"></a>iv.八进制</h3><p>开头是<code>0</code>的，后来ES5添加了0o11语法</p>\n<h3 id=\"v-十六进制\"><a href=\"#v-十六进制\" class=\"headerlink\" title=\"v.十六进制\"></a>v.十六进制</h3><p>开头是<code>0x</code>的</p>\n<h2 id=\"II-string\"><a href=\"#II-string\" class=\"headerlink\" title=\"II.string\"></a>II.string</h2><h3 id=\"i-空字符串\"><a href=\"#i-空字符串\" class=\"headerlink\" title=\"i.空字符串\"></a>i.空字符串</h3><p><code>&#39;&#39;</code>或者<code>&quot;&quot;</code>空字符串，里面什么都没有</p>\n<h3 id=\"ii-转义符\"><a href=\"#ii-转义符\" class=\"headerlink\" title=\"ii.转义符\"></a>ii.转义符</h3><p>表达这个字符串里面只有一个<code>&#39;</code>怎么办<br><code>&quot;&#39;&quot;</code>这么来<br>那么问题来了，我要表达这个字符串是<code>&quot;&#39;</code>怎么办，一个单引号一个双引号区分不开呀<br>这时候需要一个<code>\\</code>反杠，<code>\\</code>来告诉浏览器，这个引号不是拿来结束字符串的。<br>这就叫做，<strong>转义符</strong><br>他不仅仅有这个作用还有：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">转义符</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">Unicode</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>\\0</code></td>\n<td style=\"text-align:center\">null</td>\n<td style=\"text-align:center\">（\\u0000）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\b</code></td>\n<td style=\"text-align:center\">后退键</td>\n<td style=\"text-align:center\">（\\u0008）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\f</code></td>\n<td style=\"text-align:center\">换页符</td>\n<td style=\"text-align:center\">（\\u000C）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\n</code></td>\n<td style=\"text-align:center\">换行符</td>\n<td style=\"text-align:center\">（\\u000A）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\r</code></td>\n<td style=\"text-align:center\">回车键</td>\n<td style=\"text-align:center\">（\\u000D）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\t</code></td>\n<td style=\"text-align:center\">制表符</td>\n<td style=\"text-align:center\">（\\u0009）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\v</code></td>\n<td style=\"text-align:center\">垂直制表符</td>\n<td style=\"text-align:center\">（\\u000B）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\&#39;</code></td>\n<td style=\"text-align:center\">单引号</td>\n<td style=\"text-align:center\">（\\u0027）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\&quot;</code></td>\n<td style=\"text-align:center\">双引号</td>\n<td style=\"text-align:center\">（\\u0022）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\\\</code></td>\n<td style=\"text-align:center\">反斜杠</td>\n<td style=\"text-align:center\">（\\u005C）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"iii-多行字符串\"><a href=\"#iii-多行字符串\" class=\"headerlink\" title=\"iii.多行字符串\"></a>iii.多行字符串</h3><p>不是字符串里面有回车<br>而是我希望字符串有换行</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = '<span class=\"number\">1234</span>5 \\</span><br><span class=\"line\">        <span class=\"number\">6789</span>0'</span><br></pre></td></tr></table></figure>\n<p>就像命令行一样</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s2 = '<span class=\"number\">1234</span>5' + '<span class=\"number\">6789</span>0'</span><br></pre></td></tr></table></figure>\n<p>这样也可以<br><strong>但是方法一有个很鬼的问题</strong></p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s = '<span class=\"number\">1234</span>5 \\     //反杠后面如果有一堆空格</span><br><span class=\"line\"><span class=\"number\">6789</span>0'</span><br></pre></td></tr></table></figure>\n<p>反杠后面有一堆空格那么就热闹了，反杠会把第一个空格变成…字符串里的空格…<br>遭重了，很坑很坑。<br>所以最好用第二个方法了。</p>\n<p><strong>既然这个这么坑，那JS要解决它呀</strong><br>所以在ES6里就有了这个符号`就是这个点</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var s4 = `<span class=\"number\">12345</span></span><br><span class=\"line\"><span class=\"number\">67890</span>`</span><br></pre></td></tr></table></figure>\n<p>他会记录里面的一切，包括回车<br>所以这就是11个字符<code>s4.length</code>是<code>11</code></p>\n<h2 id=\"III-boolean\"><a href=\"#III-boolean\" class=\"headerlink\" title=\"III.boolean\"></a>III.boolean</h2><h3 id=\"i-George-Boole\"><a href=\"#i-George-Boole\" class=\"headerlink\" title=\"i.George Boole\"></a>i.George Boole</h3><p>数学家、哲学家，发明逻辑学。<br>为了纪念他，我们把<code>ture</code>和<code>false</code>两个值叫做布尔<br><code>&amp;&amp;</code>与<br><code>||</code>或</p>\n<h2 id=\"IV-symbol\"><a href=\"#IV-symbol\" class=\"headerlink\" title=\"IV.symbol\"></a>IV.symbol</h2><h3 id=\"i-是什么\"><a href=\"#i-是什么\" class=\"headerlink\" title=\"i.是什么\"></a>i.是什么</h3><p>ES6引入了新的数据类型Symbol，用于生成一个全局唯一的值。</p>\n<h3 id=\"ii-怎么用\"><a href=\"#ii-怎么用\" class=\"headerlink\" title=\"ii.怎么用\"></a>ii.怎么用</h3><p>借用方方老师的例子<br><figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> race = &#123;</span><br><span class=\"line\">  protoss: <span class=\"symbol\">'protos</span>s', <span class=\"comment\">// 神族</span></span><br><span class=\"line\">  terran: <span class=\"symbol\">'terra</span>n', <span class=\"comment\">// 人族</span></span><br><span class=\"line\">  zerg: <span class=\"symbol\">'zer</span>g' <span class=\"comment\">// 虫族</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function createRole(<span class=\"class\"><span class=\"keyword\">type</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">===</span> <span class=\"title\">race</span>.<span class=\"title\">protoss</span>)</span>&#123;选择神族兵种&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">===</span> <span class=\"title\">race</span>.<span class=\"title\">terran</span>)</span>&#123;选择人族兵种&#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"class\"><span class=\"keyword\">type</span> <span class=\"title\">===</span> <span class=\"title\">race</span>.<span class=\"title\">zerg</span>)</span>&#123;选择虫族兵种&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打星际选择兵种。race的键-值组合中，值显得并不重要。<br>那么值甚至可以乱敲只要他们三个种族的值不重复就可以。<br>那么Symbol可以替代对应的值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> race = &#123;</span><br><span class=\"line\">  protoss: Symbol(),</span><br><span class=\"line\">  terran: Symbol(),</span><br><span class=\"line\">  zerg: Symbol()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">race<span class=\"selector-class\">.protoss</span> !== race<span class=\"selector-class\">.terran</span> <span class=\"comment\">// true</span></span><br><span class=\"line\">race<span class=\"selector-class\">.protoss</span> !== race<span class=\"selector-class\">.zerg</span> <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>还可以给<code>Symbol()</code>加个注释<code>Symbol(&#39;protoss&#39;)</code>仅仅就是个提示，起什么和值没有任何关系。</p>\n<p>总结：占位置的。起名字福音。</p>\n<h2 id=\"V-undefined和null\"><a href=\"#V-undefined和null\" class=\"headerlink\" title=\"V.undefined和null\"></a>V.undefined和null</h2><h3 id=\"i-null\"><a href=\"#i-null\" class=\"headerlink\" title=\"i.null\"></a>i.null</h3><p>是一个类型。只有一个值<code>null</code></p>\n<h3 id=\"ii-undefined\"><a href=\"#ii-undefined\" class=\"headerlink\" title=\"ii.undefined\"></a>ii.undefined</h3><p>是一个类型。只有一个值<code>undefined</code></p>\n<h3 id=\"iii-这两个兄弟干嘛的\"><a href=\"#iii-这两个兄弟干嘛的\" class=\"headerlink\" title=\"iii.这两个兄弟干嘛的\"></a>iii.这两个兄弟干嘛的</h3><p>这是个BUG，语言问题。<br>都表达了一个：<code>什么也没有</code>原创BUG哟</p>\n<h3 id=\"iv-那他们有什么区别呢？？？\"><a href=\"#iv-那他们有什么区别呢？？？\" class=\"headerlink\" title=\"iv.那他们有什么区别呢？？？\"></a>iv.那他们有什么区别呢？？？</h3><p>① 变量没有值 - undefined<br>② 如果你想有一个对象（<code>obj</code>），但是目前不想赋值，那就给他一个<code>null</code>（推荐）.<code>var obj = null</code><br>如果你有一个非对象，目前不想赋值，那就给他一个<code>undefined</code>（推荐）。<code>var n</code>那它就是一个<code>undefine</code><br>③ <strong>②为惯例 ①为语法</strong><br>总结一下，null是空对象，undefined是非对象。</p>\n<h2 id=\"VI-object\"><a href=\"#VI-object\" class=\"headerlink\" title=\"VI.object\"></a>VI.object</h2><p>之前说的，都是基本（简单）类型，到了对象，就是复杂类型了。<br>复杂类型由简单类型组成。<br>举个例子：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> name = <span class=\"string\">'Oracle'</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> age = <span class=\"string\">'24'</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> gender = <span class=\"string\">'male'</span></span><br></pre></td></tr></table></figure>\n<p>他们三个都是一对一，冥冥之中似乎可以放在一起。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> person = </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"string\">'name'</span>:<span class=\"string\">'Oracle'</span>,</span><br><span class=\"line\"><span class=\"string\">'age'</span>:<span class=\"string\">'24'</span>,</span><br><span class=\"line\"><span class=\"string\">'gender'</span>:<span class=\"string\">'male'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>变成这种<code>键-值</code>组合</p>\n<h3 id=\"i-语法\"><a href=\"#i-语法\" class=\"headerlink\" title=\"i.语法\"></a>i.语法</h3><p><code>{</code>开头<br><code>}</code>结尾<br>左边的键，可以不用引号，左边永远都是字符串。<br>右边该怎么写怎么写<br>需要变量去容纳它<code>var person =</code>，他就是一个类型是对象的变量<br>读取它<code>person[&#39;name&#39;]</code>这个<code>name</code>必须加引号<br>为了避免之前有变量也叫name<br>如果他符合标识符规则那可以<code>person.name</code></p>\n<h3 id=\"ii-对象里还可以套对象\"><a href=\"#ii-对象里还可以套对象\" class=\"headerlink\" title=\"ii.对象里还可以套对象\"></a>ii.对象里还可以套对象</h3><p><strong>那么对象里套的对象，里面的对象是否可以是自己？</strong><br>这个麻烦了<br><strong>解决这个问题之前请参见(<a href=\"https://574549756.github.io/2018/04/11/JavaScript-%E7%B1%BB%E5%9E%8B/\" target=\"_blank\" rel=\"noopener\">JavaScript-类型</a>)</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = &#123;&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.self</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.self</span><span class=\"selector-class\">.self</span><span class=\"selector-class\">.self</span>是什么</span><br></pre></td></tr></table></figure>\n<p>首先对象存了一个ADDR然后不断引用这个地址</p>\n<h3 id=\"iii-空字符串是否能当做key？\"><a href=\"#iii-空字符串是否能当做key？\" class=\"headerlink\" title=\"iii.空字符串是否能当做key？\"></a>iii.空字符串是否能当做key？</h3><figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">person = &#123;'':'oracle'&#125;</span><br><span class=\"line\">person['']   <span class=\"comment\">//oracle</span></span><br></pre></td></tr></table></figure>\n<p>可以</p>\n<h3 id=\"iv-key的第一个字是否可以是数字\"><a href=\"#iv-key的第一个字是否可以是数字\" class=\"headerlink\" title=\"iv.key的第一个字是否可以是数字\"></a>iv.key的第一个字是否可以是数字</h3><p>不可以。<br><code>9name: &#39;oracle&#39;,</code> 这种是不可以<br>如果不加引号，key必须依照标识符（变量名）原则<br>不加引号，写起来舒服。加上引号，功能多。<br>同理，如果是<strong>数组</strong>那么读取数组成员的时候就<strong>不能用点结构</strong><br>单独的数值不能作为标识符。数组成员只能用方括号<code>arr[0]</code>来表示</p>\n<h3 id=\"v-key能不能有空格\"><a href=\"#v-key能不能有空格\" class=\"headerlink\" title=\"v.key能不能有空格\"></a>v.key能不能有空格</h3><p>一样的规则，有引号就可以，没有就GG</p>\n<h3 id=\"vi-key可不可以加中文\"><a href=\"#vi-key可不可以加中文\" class=\"headerlink\" title=\"vi.key可不可以加中文\"></a>vi.key可不可以加中文</h3><p>可以，因为中文可以当做变量名。</p>\n<h3 id=\"vii-for-in\"><a href=\"#vii-for-in\" class=\"headerlink\" title=\"vii.for in\"></a>vii.for in</h3><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> <span class=\"built_in\">key</span> <span class=\"keyword\">in</span> person)&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"built_in\">key</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>遍历数组的<code>key</code>但是<br>出现<code>key</code>的顺序是看天的。<br>那我想打出值呢？</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> <span class=\"built_in\">key</span> <span class=\"keyword\">in</span> person)&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(person[<span class=\"built_in\">key</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那一起打呢？</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"built_in\">var</span> <span class=\"built_in\">key</span> <span class=\"keyword\">in</span> person)&#123;</span><br><span class=\"line\">        console.<span class=\"built_in\">log</span>(<span class=\"built_in\">key</span>,person[<span class=\"built_in\">key</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>和上面说的一样，随机的</p>\n<h2 id=\"VII-typeof\"><a href=\"#VII-typeof\" class=\"headerlink\" title=\"VII.typeof\"></a>VII.typeof</h2><h3 id=\"i-干吗用的？\"><a href=\"#i-干吗用的？\" class=\"headerlink\" title=\"i.干吗用的？\"></a>i.干吗用的？</h3><p>看类型的</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">t</span> = <span class=\"number\">1</span></span><br><span class=\"line\">typeof <span class=\"built_in\">t</span> //<span class=\"string\">\"number\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">var</span> <span class=\"built_in\">t</span> = <span class=\"built_in\">true</span></span><br><span class=\"line\">typeof <span class=\"built_in\">t</span> //<span class=\"string\">\"boolean\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-但是有一个特殊\"><a href=\"#ii-但是有一个特殊\" class=\"headerlink\" title=\"ii.但是有一个特殊\"></a>ii.但是有一个特殊</h3><p><strong>这是JS的BUG</strong><br>他叫做<code>null</code><br>如果测<code>typeof null</code>会返回<code>‘object’</code><br>如果声明一个<code>函数</code><br>用<code>typeof fn</code>本应该是<code>‘object’</code>但是他会返回<code>‘function’</code><br>什么时候函数也是独立的类型了？</p>\n"},{"title":"JavaScript-数组","date":"2018-04-22T19:44:38.000Z","_content":"# 1.标准库\n\n```\nObject()\nString()\nNumber()\nArray()\nBoolean()\nFunction()\n```\n\n这些东西。\n\n# 2.new\n除了`Object`\n其他类型加上`new`\n都会变成对应的对象（`复杂类型`）。\n\n不加new返回的是`基本类型`\n\n# 3.Array\n`人类`：数组就是数据的有序集合\n`JS`：数据就是原型链中有 Array.prototype 的对象(用Array构造出来的对象)\n## I.他的一些属性\n### new\n因为它是对象，所以加不加`new`都一样。\n### 它存在不一致性\n\n```\nvar a = Array(3)    //length = 3\nvar a = Array(3,3)      //0:3,1:3,length: 2\n```\n\n是不是很坑，它传一个参数和传两个参数的功能是不一样的\n传一个参数的时候仅代表它的长度。\n## II.伪数组\n原型链中没有Array.prototype\n\n```\nfunction f(1,2,3){\n    console.dir(arguments)\n}\n//argument就是一个伪数组    长得像数组，但是__proto__直接指向Object.Prototype\n```\n\n## III.API\n### i..forEach()\n\n```\na = ['a','b','c','d']\na.forEach( function(x,y){        //接受参数是一个函数\n    console.log('value', x)     //函数必定有两个参数\n    console.log('key', y)        \n} )\n```\n\n在写出`a.forEach`的时候，`a`这个数组已经被当做参数传进去了（想象成`this`）\n### ii..sort\n排序用的，一般内置的排序是快排\n但是如何让JS知道你要`顺序`还是`倒序`呢？\n\n```\na = [4,3,6,8,1,2,43,5]\na.sort(function(x,y){       //传入一个函数，函数必须有两个参数\n    return x-y            //返回值必须是0 正数 负数\n} )                         //0表示相等，位置相同 正数表示前一个大，放后面 负数表示前一个放前面。\n```\n\n这里可以得出，改变顺序和倒序只需要改变`return`后面的`x-y`或`y-x`就可以了\n所以排完以后不是你想要的时候**换一下就行了**\n### iii..join\n\n```\na = [1,2,3]\na.join('逗号')   //\"1逗号2逗号3\"\na.join(',')         //\"1,2,3\"\n```\n\n干吗用的，加我一个用的。\n### iv..concat\n干嘛用的？\n连起来用的\n\n**一般用法：**\n\n```\nvar a = [1,2,3]\nvar b = [4,5,6]\nvar c = a.concat(b)      //c = [1,2,3,4,5,6]\n```\n\n用来连接数组\n\n**特殊用法：**\n\n```\nvar a = [1,2,3]\nvar b = a.concat([])    //b = [1,2,3]\n\n//这时候 a === b   //false\n    //所以这是一种复制数组的方法\n//b是一个和a数组内容相同的不同数组（ADDR不一样）\n```\n\n用来复制数组。\n### v..map\n和`forEach`几乎一样\n区别在于`.map`有返回值\n`forEach`返回`undefined`\n\n```\nvar a = [1,2,3]\na.map(function(value,key){\n    return value * 2\n})\n\n//[2,4,6]\n    //也可以这么写，好看一点：\na.map(value => value * 2)\n```\n\n**映射**\n一波操作以后，`a`还是没有变化\n**return**\n想return什么就return什么\n对象什么的都可以。\n### vi..filter\n**过滤**\n\n```\na = [1,2,3,4,5,6,7,8,9,10]\na.filter(function(value, key){\n    return value >= 5\n})\n//[5, 6, 7, 8, 9, 10]\n```\n\n**拿来判断奇偶也可以**\n\n```\na = [1,2,3,4,5,6,7,8,9,10]\na.filter(function(value, key){      \n    return value % 2 === 0      //能被2整除的数\n})\n//[2, 4, 6, 8, 10]\n```\n\n### vii..reduce\n**减少**\n\n```\n//求和用\na = [1,2,3,4,5,6,7,8,9]\na.reduce(function(sum,n){   //参数是个函数(必须两个参数)和一个初始项\n    return sum + n              //把之前的项和当前项相加，返回下一次遍历的结果\n},0)                        //遍历一遍以后得到总和\n// 45\na.reduce((sum,n)=> sum + n , 0)\n```\n\n#### map可以用reduce表示\n\n```\na = [1,2,3]\na.reduce(function(arr,n){   //之前项是arr，当前项是n\n    arr.push(n*2)               //把当前项的两倍push进数组\n    return arr              //返回到初始项(空数组)\n}[])                            //遍历一遍以后填满空数组\n// [2,4,6]\n```\n\n#### filter可以用reduce表示\n\n```\na = [1,2,3,4,5,6,7,8,9,10]\na.reduce(function(arr,n){   //之前项是arr，当前项是n\n    if(n % 2 === 0){            //是不是偶数？是偶数就到碗里来\n        arr.push(n)         //偶数推进去\n    }\n    return arr                  //返回到数组\n}[])                        //遍历一遍后填满空数组\n```\n\n# 4.Function\n\n```\nvar f = function(a,b){\n    return a+b\n}\n\n/////////用构造函数构造出来//////\n\nvar f = new Function('a', 'b', 'return a+b')        //把所有参数一字排开\n//var f = new Function('参数', '参数', '构造体') \n\n//加不加new都一样 \n```\n\n## I.函数","source":"_posts/JavaScript-数组.md","raw":"---\ntitle: JavaScript-数组\ndate: 2018-04-23 03:44:38\ntags:  JS\n---\n# 1.标准库\n\n```\nObject()\nString()\nNumber()\nArray()\nBoolean()\nFunction()\n```\n\n这些东西。\n\n# 2.new\n除了`Object`\n其他类型加上`new`\n都会变成对应的对象（`复杂类型`）。\n\n不加new返回的是`基本类型`\n\n# 3.Array\n`人类`：数组就是数据的有序集合\n`JS`：数据就是原型链中有 Array.prototype 的对象(用Array构造出来的对象)\n## I.他的一些属性\n### new\n因为它是对象，所以加不加`new`都一样。\n### 它存在不一致性\n\n```\nvar a = Array(3)    //length = 3\nvar a = Array(3,3)      //0:3,1:3,length: 2\n```\n\n是不是很坑，它传一个参数和传两个参数的功能是不一样的\n传一个参数的时候仅代表它的长度。\n## II.伪数组\n原型链中没有Array.prototype\n\n```\nfunction f(1,2,3){\n    console.dir(arguments)\n}\n//argument就是一个伪数组    长得像数组，但是__proto__直接指向Object.Prototype\n```\n\n## III.API\n### i..forEach()\n\n```\na = ['a','b','c','d']\na.forEach( function(x,y){        //接受参数是一个函数\n    console.log('value', x)     //函数必定有两个参数\n    console.log('key', y)        \n} )\n```\n\n在写出`a.forEach`的时候，`a`这个数组已经被当做参数传进去了（想象成`this`）\n### ii..sort\n排序用的，一般内置的排序是快排\n但是如何让JS知道你要`顺序`还是`倒序`呢？\n\n```\na = [4,3,6,8,1,2,43,5]\na.sort(function(x,y){       //传入一个函数，函数必须有两个参数\n    return x-y            //返回值必须是0 正数 负数\n} )                         //0表示相等，位置相同 正数表示前一个大，放后面 负数表示前一个放前面。\n```\n\n这里可以得出，改变顺序和倒序只需要改变`return`后面的`x-y`或`y-x`就可以了\n所以排完以后不是你想要的时候**换一下就行了**\n### iii..join\n\n```\na = [1,2,3]\na.join('逗号')   //\"1逗号2逗号3\"\na.join(',')         //\"1,2,3\"\n```\n\n干吗用的，加我一个用的。\n### iv..concat\n干嘛用的？\n连起来用的\n\n**一般用法：**\n\n```\nvar a = [1,2,3]\nvar b = [4,5,6]\nvar c = a.concat(b)      //c = [1,2,3,4,5,6]\n```\n\n用来连接数组\n\n**特殊用法：**\n\n```\nvar a = [1,2,3]\nvar b = a.concat([])    //b = [1,2,3]\n\n//这时候 a === b   //false\n    //所以这是一种复制数组的方法\n//b是一个和a数组内容相同的不同数组（ADDR不一样）\n```\n\n用来复制数组。\n### v..map\n和`forEach`几乎一样\n区别在于`.map`有返回值\n`forEach`返回`undefined`\n\n```\nvar a = [1,2,3]\na.map(function(value,key){\n    return value * 2\n})\n\n//[2,4,6]\n    //也可以这么写，好看一点：\na.map(value => value * 2)\n```\n\n**映射**\n一波操作以后，`a`还是没有变化\n**return**\n想return什么就return什么\n对象什么的都可以。\n### vi..filter\n**过滤**\n\n```\na = [1,2,3,4,5,6,7,8,9,10]\na.filter(function(value, key){\n    return value >= 5\n})\n//[5, 6, 7, 8, 9, 10]\n```\n\n**拿来判断奇偶也可以**\n\n```\na = [1,2,3,4,5,6,7,8,9,10]\na.filter(function(value, key){      \n    return value % 2 === 0      //能被2整除的数\n})\n//[2, 4, 6, 8, 10]\n```\n\n### vii..reduce\n**减少**\n\n```\n//求和用\na = [1,2,3,4,5,6,7,8,9]\na.reduce(function(sum,n){   //参数是个函数(必须两个参数)和一个初始项\n    return sum + n              //把之前的项和当前项相加，返回下一次遍历的结果\n},0)                        //遍历一遍以后得到总和\n// 45\na.reduce((sum,n)=> sum + n , 0)\n```\n\n#### map可以用reduce表示\n\n```\na = [1,2,3]\na.reduce(function(arr,n){   //之前项是arr，当前项是n\n    arr.push(n*2)               //把当前项的两倍push进数组\n    return arr              //返回到初始项(空数组)\n}[])                            //遍历一遍以后填满空数组\n// [2,4,6]\n```\n\n#### filter可以用reduce表示\n\n```\na = [1,2,3,4,5,6,7,8,9,10]\na.reduce(function(arr,n){   //之前项是arr，当前项是n\n    if(n % 2 === 0){            //是不是偶数？是偶数就到碗里来\n        arr.push(n)         //偶数推进去\n    }\n    return arr                  //返回到数组\n}[])                        //遍历一遍后填满空数组\n```\n\n# 4.Function\n\n```\nvar f = function(a,b){\n    return a+b\n}\n\n/////////用构造函数构造出来//////\n\nvar f = new Function('a', 'b', 'return a+b')        //把所有参数一字排开\n//var f = new Function('参数', '参数', '构造体') \n\n//加不加new都一样 \n```\n\n## I.函数","slug":"JavaScript-数组","published":1,"updated":"2018-04-22T19:45:23.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3g0005t2g35hlozsxk","content":"<h1 id=\"1-标准库\"><a href=\"#1-标准库\" class=\"headerlink\" title=\"1.标准库\"></a>1.标准库</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">String</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Array</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Boolean</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Function</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>这些东西。</p>\n<h1 id=\"2-new\"><a href=\"#2-new\" class=\"headerlink\" title=\"2.new\"></a>2.new</h1><p>除了<code>Object</code><br>其他类型加上<code>new</code><br>都会变成对应的对象（<code>复杂类型</code>）。</p>\n<p>不加new返回的是<code>基本类型</code></p>\n<h1 id=\"3-Array\"><a href=\"#3-Array\" class=\"headerlink\" title=\"3.Array\"></a>3.Array</h1><p><code>人类</code>：数组就是数据的有序集合<br><code>JS</code>：数据就是原型链中有 Array.prototype 的对象(用Array构造出来的对象)</p>\n<h2 id=\"I-他的一些属性\"><a href=\"#I-他的一些属性\" class=\"headerlink\" title=\"I.他的一些属性\"></a>I.他的一些属性</h2><h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>因为它是对象，所以加不加<code>new</code>都一样。</p>\n<h3 id=\"它存在不一致性\"><a href=\"#它存在不一致性\" class=\"headerlink\" title=\"它存在不一致性\"></a>它存在不一致性</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = Array(<span class=\"number\">3</span>)    <span class=\"comment\">//length = 3</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = Array(<span class=\"number\">3</span>,<span class=\"number\">3</span>)      <span class=\"comment\">//0:3,1:3,length: 2</span></span><br></pre></td></tr></table></figure>\n<p>是不是很坑，它传一个参数和传两个参数的功能是不一样的<br>传一个参数的时候仅代表它的长度。</p>\n<h2 id=\"II-伪数组\"><a href=\"#II-伪数组\" class=\"headerlink\" title=\"II.伪数组\"></a>II.伪数组</h2><p>原型链中没有Array.prototype</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"><span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//argument就是一个伪数组    长得像数组，但是__proto__直接指向Object.Prototype</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"III-API\"><a href=\"#III-API\" class=\"headerlink\" title=\"III.API\"></a>III.API</h2><h3 id=\"i-forEach\"><a href=\"#i-forEach\" class=\"headerlink\" title=\"i..forEach()\"></a>i..forEach()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>]</span><br><span class=\"line\">a.forEach( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;        <span class=\"comment\">//接受参数是一个函数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'value'</span>, x)     <span class=\"comment\">//函数必定有两个参数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'key'</span>, y)        </span><br><span class=\"line\">&#125; )</span><br></pre></td></tr></table></figure>\n<p>在写出<code>a.forEach</code>的时候，<code>a</code>这个数组已经被当做参数传进去了（想象成<code>this</code>）</p>\n<h3 id=\"ii-sort\"><a href=\"#ii-sort\" class=\"headerlink\" title=\"ii..sort\"></a>ii..sort</h3><p>排序用的，一般内置的排序是快排<br>但是如何让JS知道你要<code>顺序</code>还是<code>倒序</code>呢？</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">43</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">a.sort(function(x,y)&#123;       <span class=\"comment\">//传入一个函数，函数必须有两个参数</span></span><br><span class=\"line\">    return x-y            <span class=\"comment\">//返回值必须是0 正数 负数</span></span><br><span class=\"line\">&#125; )                         <span class=\"comment\">//0表示相等，位置相同 正数表示前一个大，放后面 负数表示前一个放前面。</span></span><br></pre></td></tr></table></figure>\n<p>这里可以得出，改变顺序和倒序只需要改变<code>return</code>后面的<code>x-y</code>或<code>y-x</code>就可以了<br>所以排完以后不是你想要的时候<strong>换一下就行了</strong></p>\n<h3 id=\"iii-join\"><a href=\"#iii-join\" class=\"headerlink\" title=\"iii..join\"></a>iii..join</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>.join(<span class=\"string\">'逗号'</span>)   <span class=\"comment\">//\"1逗号2逗号3\"</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span>.join(<span class=\"string\">','</span>)         <span class=\"comment\">//\"1,2,3\"</span></span><br></pre></td></tr></table></figure>\n<p>干吗用的，加我一个用的。</p>\n<h3 id=\"iv-concat\"><a href=\"#iv-concat\" class=\"headerlink\" title=\"iv..concat\"></a>iv..concat</h3><p>干嘛用的？<br>连起来用的</p>\n<p><strong>一般用法：</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> c = <span class=\"selector-tag\">a</span>.concat(b)      <span class=\"comment\">//c = [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>\n<p>用来连接数组</p>\n<p><strong>特殊用法：</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = <span class=\"selector-tag\">a</span>.concat([])    <span class=\"comment\">//b = [1,2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时候 a === b   //false</span></span><br><span class=\"line\">    <span class=\"comment\">//所以这是一种复制数组的方法</span></span><br><span class=\"line\"><span class=\"comment\">//b是一个和a数组内容相同的不同数组（ADDR不一样）</span></span><br></pre></td></tr></table></figure>\n<p>用来复制数组。</p>\n<h3 id=\"v-map\"><a href=\"#v-map\" class=\"headerlink\" title=\"v..map\"></a>v..map</h3><p>和<code>forEach</code>几乎一样<br>区别在于<code>.map</code>有返回值<br><code>forEach</code>返回<code>undefined</code></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">a</span>.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"title\">value</span>,<span class=\"title\">key</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"literal\">return</span> <span class=\"built_in\">value</span> * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">   <span class=\"comment\"> //也可以这么写，好看一点：</span></span><br><span class=\"line\"><span class=\"keyword\">a</span>.map(<span class=\"built_in\">value</span> =&gt; <span class=\"built_in\">value</span> * <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>映射</strong><br>一波操作以后，<code>a</code>还是没有变化<br><strong>return</strong><br>想return什么就return什么<br>对象什么的都可以。</p>\n<h3 id=\"vi-filter\"><a href=\"#vi-filter\" class=\"headerlink\" title=\"vi..filter\"></a>vi..filter</h3><p><strong>过滤</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">a.filter(function(value, <span class=\"type\">key</span>)&#123;</span><br><span class=\"line\">    return value &gt;= <span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//[5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>\n<p><strong>拿来判断奇偶也可以</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">a.filter(function(value, <span class=\"type\">key</span>)&#123;      </span><br><span class=\"line\">    return value % <span class=\"number\">2</span> === <span class=\"number\">0</span>      <span class=\"comment\">//能被2整除的数</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"vii-reduce\"><a href=\"#vii-reduce\" class=\"headerlink\" title=\"vii..reduce\"></a>vii..reduce</h3><p><strong>减少</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求和用</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">a.reduce(function(sum,n)&#123;   <span class=\"comment\">//参数是个函数(必须两个参数)和一个初始项</span></span><br><span class=\"line\">    return sum + n              <span class=\"comment\">//把之前的项和当前项相加，返回下一次遍历的结果</span></span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)                        <span class=\"comment\">//遍历一遍以后得到总和</span></span><br><span class=\"line\"><span class=\"comment\">// 45</span></span><br><span class=\"line\">a.reduce((sum,n)=&gt; sum + n , <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"map可以用reduce表示\"><a href=\"#map可以用reduce表示\" class=\"headerlink\" title=\"map可以用reduce表示\"></a>map可以用reduce表示</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(arr,n)</span></span>&#123;   <span class=\"comment\">//之前项是arr，当前项是n</span></span><br><span class=\"line\">    arr.push(n*<span class=\"number\">2</span>)               <span class=\"comment\">//把当前项的两倍push进数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr              <span class=\"comment\">//返回到初始项(空数组)</span></span><br><span class=\"line\">&#125;[])                            <span class=\"comment\">//遍历一遍以后填满空数组</span></span><br><span class=\"line\"><span class=\"comment\">// [2,4,6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"filter可以用reduce表示\"><a href=\"#filter可以用reduce表示\" class=\"headerlink\" title=\"filter可以用reduce表示\"></a>filter可以用reduce表示</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">a.reduce(function(arr,n)&#123;   <span class=\"comment\">//之前项是arr，当前项是n</span></span><br><span class=\"line\">    if(n % <span class=\"number\">2</span> === <span class=\"number\">0</span>)&#123;            <span class=\"comment\">//是不是偶数？是偶数就到碗里来</span></span><br><span class=\"line\">        arr.push(n)         <span class=\"comment\">//偶数推进去</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr                  <span class=\"comment\">//返回到数组</span></span><br><span class=\"line\">&#125;[])                        <span class=\"comment\">//遍历一遍后填满空数组</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-Function\"><a href=\"#4-Function\" class=\"headerlink\" title=\"4.Function\"></a>4.Function</h1><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">function</span>(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">/用构造函数构造出来/</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Function(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'return a+b'</span>)        <span class=\"regexp\">//把所有参数一字排开</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Function(<span class=\"string\">'参数'</span>, <span class=\"string\">'参数'</span>, <span class=\"string\">'构造体'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//加不加new都一样</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"I-函数\"><a href=\"#I-函数\" class=\"headerlink\" title=\"I.函数\"></a>I.函数</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-标准库\"><a href=\"#1-标准库\" class=\"headerlink\" title=\"1.标准库\"></a>1.标准库</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">String</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Array</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Boolean</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Function</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>这些东西。</p>\n<h1 id=\"2-new\"><a href=\"#2-new\" class=\"headerlink\" title=\"2.new\"></a>2.new</h1><p>除了<code>Object</code><br>其他类型加上<code>new</code><br>都会变成对应的对象（<code>复杂类型</code>）。</p>\n<p>不加new返回的是<code>基本类型</code></p>\n<h1 id=\"3-Array\"><a href=\"#3-Array\" class=\"headerlink\" title=\"3.Array\"></a>3.Array</h1><p><code>人类</code>：数组就是数据的有序集合<br><code>JS</code>：数据就是原型链中有 Array.prototype 的对象(用Array构造出来的对象)</p>\n<h2 id=\"I-他的一些属性\"><a href=\"#I-他的一些属性\" class=\"headerlink\" title=\"I.他的一些属性\"></a>I.他的一些属性</h2><h3 id=\"new\"><a href=\"#new\" class=\"headerlink\" title=\"new\"></a>new</h3><p>因为它是对象，所以加不加<code>new</code>都一样。</p>\n<h3 id=\"它存在不一致性\"><a href=\"#它存在不一致性\" class=\"headerlink\" title=\"它存在不一致性\"></a>它存在不一致性</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = Array(<span class=\"number\">3</span>)    <span class=\"comment\">//length = 3</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = Array(<span class=\"number\">3</span>,<span class=\"number\">3</span>)      <span class=\"comment\">//0:3,1:3,length: 2</span></span><br></pre></td></tr></table></figure>\n<p>是不是很坑，它传一个参数和传两个参数的功能是不一样的<br>传一个参数的时候仅代表它的长度。</p>\n<h2 id=\"II-伪数组\"><a href=\"#II-伪数组\" class=\"headerlink\" title=\"II.伪数组\"></a>II.伪数组</h2><p>原型链中没有Array.prototype</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"><span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(<span class=\"built_in\">arguments</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//argument就是一个伪数组    长得像数组，但是__proto__直接指向Object.Prototype</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"III-API\"><a href=\"#III-API\" class=\"headerlink\" title=\"III.API\"></a>III.API</h2><h3 id=\"i-forEach\"><a href=\"#i-forEach\" class=\"headerlink\" title=\"i..forEach()\"></a>i..forEach()</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'d'</span>]</span><br><span class=\"line\">a.forEach( <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;        <span class=\"comment\">//接受参数是一个函数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'value'</span>, x)     <span class=\"comment\">//函数必定有两个参数</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'key'</span>, y)        </span><br><span class=\"line\">&#125; )</span><br></pre></td></tr></table></figure>\n<p>在写出<code>a.forEach</code>的时候，<code>a</code>这个数组已经被当做参数传进去了（想象成<code>this</code>）</p>\n<h3 id=\"ii-sort\"><a href=\"#ii-sort\" class=\"headerlink\" title=\"ii..sort\"></a>ii..sort</h3><p>排序用的，一般内置的排序是快排<br>但是如何让JS知道你要<code>顺序</code>还是<code>倒序</code>呢？</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">4</span>,<span class=\"number\">3</span>,<span class=\"number\">6</span>,<span class=\"number\">8</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">43</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">a.sort(function(x,y)&#123;       <span class=\"comment\">//传入一个函数，函数必须有两个参数</span></span><br><span class=\"line\">    return x-y            <span class=\"comment\">//返回值必须是0 正数 负数</span></span><br><span class=\"line\">&#125; )                         <span class=\"comment\">//0表示相等，位置相同 正数表示前一个大，放后面 负数表示前一个放前面。</span></span><br></pre></td></tr></table></figure>\n<p>这里可以得出，改变顺序和倒序只需要改变<code>return</code>后面的<code>x-y</code>或<code>y-x</code>就可以了<br>所以排完以后不是你想要的时候<strong>换一下就行了</strong></p>\n<h3 id=\"iii-join\"><a href=\"#iii-join\" class=\"headerlink\" title=\"iii..join\"></a>iii..join</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">a</span>.join(<span class=\"string\">'逗号'</span>)   <span class=\"comment\">//\"1逗号2逗号3\"</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span>.join(<span class=\"string\">','</span>)         <span class=\"comment\">//\"1,2,3\"</span></span><br></pre></td></tr></table></figure>\n<p>干吗用的，加我一个用的。</p>\n<h3 id=\"iv-concat\"><a href=\"#iv-concat\" class=\"headerlink\" title=\"iv..concat\"></a>iv..concat</h3><p>干嘛用的？<br>连起来用的</p>\n<p><strong>一般用法：</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> c = <span class=\"selector-tag\">a</span>.concat(b)      <span class=\"comment\">//c = [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure>\n<p>用来连接数组</p>\n<p><strong>特殊用法：</strong></p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = <span class=\"selector-tag\">a</span>.concat([])    <span class=\"comment\">//b = [1,2,3]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这时候 a === b   //false</span></span><br><span class=\"line\">    <span class=\"comment\">//所以这是一种复制数组的方法</span></span><br><span class=\"line\"><span class=\"comment\">//b是一个和a数组内容相同的不同数组（ADDR不一样）</span></span><br></pre></td></tr></table></figure>\n<p>用来复制数组。</p>\n<h3 id=\"v-map\"><a href=\"#v-map\" class=\"headerlink\" title=\"v..map\"></a>v..map</h3><p>和<code>forEach</code>几乎一样<br>区别在于<code>.map</code>有返回值<br><code>forEach</code>返回<code>undefined</code></p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"keyword\">a</span> = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">a</span>.map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"title\">value</span>,<span class=\"title\">key</span>)&#123;</span></span><br><span class=\"line\">    <span class=\"literal\">return</span> <span class=\"built_in\">value</span> * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//[<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>]</span><br><span class=\"line\">   <span class=\"comment\"> //也可以这么写，好看一点：</span></span><br><span class=\"line\"><span class=\"keyword\">a</span>.map(<span class=\"built_in\">value</span> =&gt; <span class=\"built_in\">value</span> * <span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>映射</strong><br>一波操作以后，<code>a</code>还是没有变化<br><strong>return</strong><br>想return什么就return什么<br>对象什么的都可以。</p>\n<h3 id=\"vi-filter\"><a href=\"#vi-filter\" class=\"headerlink\" title=\"vi..filter\"></a>vi..filter</h3><p><strong>过滤</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">a.filter(function(value, <span class=\"type\">key</span>)&#123;</span><br><span class=\"line\">    return value &gt;= <span class=\"number\">5</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//[5, 6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>\n<p><strong>拿来判断奇偶也可以</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">a.filter(function(value, <span class=\"type\">key</span>)&#123;      </span><br><span class=\"line\">    return value % <span class=\"number\">2</span> === <span class=\"number\">0</span>      <span class=\"comment\">//能被2整除的数</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//[2, 4, 6, 8, 10]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"vii-reduce\"><a href=\"#vii-reduce\" class=\"headerlink\" title=\"vii..reduce\"></a>vii..reduce</h3><p><strong>减少</strong></p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求和用</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>]</span><br><span class=\"line\">a.reduce(function(sum,n)&#123;   <span class=\"comment\">//参数是个函数(必须两个参数)和一个初始项</span></span><br><span class=\"line\">    return sum + n              <span class=\"comment\">//把之前的项和当前项相加，返回下一次遍历的结果</span></span><br><span class=\"line\">&#125;,<span class=\"number\">0</span>)                        <span class=\"comment\">//遍历一遍以后得到总和</span></span><br><span class=\"line\"><span class=\"comment\">// 45</span></span><br><span class=\"line\">a.reduce((sum,n)=&gt; sum + n , <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"map可以用reduce表示\"><a href=\"#map可以用reduce表示\" class=\"headerlink\" title=\"map可以用reduce表示\"></a>map可以用reduce表示</h4><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br><span class=\"line\">a.reduce(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(arr,n)</span></span>&#123;   <span class=\"comment\">//之前项是arr，当前项是n</span></span><br><span class=\"line\">    arr.push(n*<span class=\"number\">2</span>)               <span class=\"comment\">//把当前项的两倍push进数组</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr              <span class=\"comment\">//返回到初始项(空数组)</span></span><br><span class=\"line\">&#125;[])                            <span class=\"comment\">//遍历一遍以后填满空数组</span></span><br><span class=\"line\"><span class=\"comment\">// [2,4,6]</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"filter可以用reduce表示\"><a href=\"#filter可以用reduce表示\" class=\"headerlink\" title=\"filter可以用reduce表示\"></a>filter可以用reduce表示</h4><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]</span><br><span class=\"line\">a.reduce(function(arr,n)&#123;   <span class=\"comment\">//之前项是arr，当前项是n</span></span><br><span class=\"line\">    if(n % <span class=\"number\">2</span> === <span class=\"number\">0</span>)&#123;            <span class=\"comment\">//是不是偶数？是偶数就到碗里来</span></span><br><span class=\"line\">        arr.push(n)         <span class=\"comment\">//偶数推进去</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return arr                  <span class=\"comment\">//返回到数组</span></span><br><span class=\"line\">&#125;[])                        <span class=\"comment\">//遍历一遍后填满空数组</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"4-Function\"><a href=\"#4-Function\" class=\"headerlink\" title=\"4.Function\"></a>4.Function</h1><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">function</span>(a,b)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">////</span><span class=\"regexp\">////</span><span class=\"regexp\">/用构造函数构造出来/</span><span class=\"regexp\">////</span>/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Function(<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'return a+b'</span>)        <span class=\"regexp\">//把所有参数一字排开</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"keyword\">var</span> f = <span class=\"keyword\">new</span> Function(<span class=\"string\">'参数'</span>, <span class=\"string\">'参数'</span>, <span class=\"string\">'构造体'</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//加不加new都一样</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"I-函数\"><a href=\"#I-函数\" class=\"headerlink\" title=\"I.函数\"></a>I.函数</h2>"},{"title":"JavaScript-对象","date":"2018-04-12T07:46:37.000Z","_content":"# 1.全局对象\n## I.window（global）\n标准里他叫做global\n浏览器上他叫做window\n是一个对象\n### i.属性\n例：\n\n```\nglobal.parseInt\nglobal.parseFloat\n```\n\n### ii.属性分为两类\n如果函数是`window.`那么这个`window.`可以省掉，毕竟它是全局函数。\n#### ECMAScript规定要有的\n比如\n\n```\nparseInt\nparseFloat\nNumber()\nString()\nBoolean()\nObject()\n```\n\n必须得有\n#### 私有的（浏览器私有的）\n比如\n\n```\nalert（弹框提示）\nprompt（用户填写）\nconfirm（用户确认）\nconsole（开发者打印）\ndocument(能对文档做的所有操作)DOM(w3c制定)\nhistory(浏览器操作)BOM\n```\n\n\n都是浏览器自己实现的\n\n# 2.简单类型与对象的区别\n## I.Number()\n### 方法\n#### var n = 1\n但是它不能.toString\n#### var n = new Number(1)\n这个方法很少人用...\n\n```\n1=>{valueOf():1,} //把1转变成对象\n```\n历史遗留问题\n\n#### 如何写的简单同时又可以用.toString呢？\n临时转换：\n\n```\ntemp = new Number(n)\ntemp.toString()\n拿到对象里的值再输出\n然后去除temp的ADDR\n对象内容被回收\nEND\n```\n\n所以在：\n\n```\nvar n = 1\nn.toString() //发生了一次temp的转换\n```\n\n**JS之父做的操作**\n\n## II.String()\n操作和Number()一样\n### 记几个API吧\n\n|API|作用|备注|\n|:---:|:---:|:---:|\n|.charAt(n)|获取第n位的字符|n为第几位|\n|.charCodeAt(n)|获取某一个索引对应的字符的编码|n为第几位。|\n|(数字).toString(进制数)|将数字转换为制定进制数|可以和`.charCodeAt(n)`组合使用|\n|concat()|连接两个字符串|`字符串1.concat(字符串2)`和命令行的`cat`是不是兄弟|\n|endsWith()|一个字符串以什么结尾||\n|.trim()|去掉两边的空格|`字符串.trim()`|\n|.slice|切片，保留指定位|`目标字符串.slice(0,2)`仅保留前两位（这两个数字包前不包后）|\n|.replace|替换|`字符串.replace('要换谁','换成谁')`|\n\n## III.Bullean()\n里面东西超少\n\n```\ntoString\nvalueOf\n```\n\n## IV.null和undefined没有对应的函数\n## V.object\n之前都是基本类型\n现在到了对象\n\n```\nvar o1 = {}\nvar o2 = new Object()\n// 他俩都是空的，但是。\no1 === o2 //false\n// 回到前面ADDR和对象的关系，o1和o2的地址不一样，就算内容一样，也不相等。\n```\n\n所以，直接用`var o1 = {}`吧，他俩没差，还少敲几个字符。你又不是敲java。\n\n## VI.总结一下\n他们都有`toString()`和`valueOf()`\n那岂不是很占内存\n可不可以都用同一个`toString()`和`valueOf()`\n\n如何让他们都指向同一个`toString()`和`valueOf()`呢？\n\n### JS向你掏出来了一只`__proto__`\n\n# 3.原型\n## 举个例子\n\n```\nvar o1 = new object()\no1.name = 'oracle'\no1.age = '24'\n//////////////////\no1 ADDR 200:\nname: oracle\nage: 24\n...\n__proto__:ADDR 100 //用__proto__指向共用属性\n//////////////////\nADDR 100(共用属性):\n...\ntoString: A10\nvalueOf: A11\n...\n```\n\n他们都指向共用属性，检查一下？\n\n```\no1 === o2 //false\n//因为他们是不同对象\no1.toString === o2.toString //true\n//但他们的.toString都指向共用属性\n```\n\n## I.那么简单类型的共用属性呢？\n想象一棵树，根部是`object`的共有属性。\n\n### i.比如number\n`var n = nwe Number(1)`\n这里面的`toString`和`obj`里的不一样耶。他都可以转进制数。\n而且他还有别的`.toFixed`什么的\n\n首先，number会指向一个number才有的共用属性：\n\n```\n...\ntoFixed\ntoExponential\ntoString\n...\n__proto__: Object //这一层再放一个__proto__去找所有对象的共用属性\n```\n\n然后在number的共用属性里面，找对象的共用属性\n**自己用不一样的，再从别处引用一样的**\n\n## II.这就是原型链\n从它的类型到它的类型的共用属性在到对象的共用属性，一条链过去，一路都是节点。\n\n### i.prototype\n如果一个哈希没有被引用的话，他会被浏览器垃圾回收（没大哥罩着就要被干掉）\n那么共用属性在没人引用的时候，就是prototype在引用他。\n\n从现在起，把共用属性这个词，换成**原型**。\n\n```\nObject.prototype\nvar o1 = {}\no1.__proto__ === Object.prototype  //true\n```\n\n这样就清晰了，它们一直以来，引用的是谁。\n### ii.Number.prototype\n了解到`number`属性自己的原型里面还有引用对象的原型，做个测试：\n\n```\nvar n1 = new Number(1)\nn1.__proto__ === Number.prototype //true\nn1.__proto__.__proto__  === Object.prototype  //true\n```\n\n那么我们就可以理解为什么\n`n1.hasOwnProperty('2')  //false`\nn1可以调用他第一层`__proto__`里没有的`.hasOwnProperty`了\n因为会一层一层的找，第一层找不到找第二层。\n**这条链子在JS引擎开启的时候就连上了**\n\n## III.`__proto__`和`prototype`有什么区别\n\n```\nString.prototype   //是 String 的共用属性的引用（不让共用属性被清理）\ns.__proto__   //是 String 的共用属性的引用（真的是要用它）\n```\n\n### i.形式上呢？\nvar 接对象 = new 接函数(也是对象)\n\n```\nvar 对象 = new 函数()\n对象.__proto__ === 函数.prototype\n```\n\n那么我们可以说他们的区别：\n`__proto__`是对象的属性\n`prototype`是函数的属性\n\n## IV.特殊的function\n找寻本源：\n\n```\nObject.__proto__ === Object.prototype //false\nObject.__proto__ === Function.prototype\n//true\n```\n\n问题来了，我们把`__proto__`当成链\n把`prototype`当成锚\n\n`Function`本身也是一个`Function`对象\n\n```\nvar Function = new Function()\nFunction.__proto__ === Function.prototype   //true\n//他自己是Function对象，我要通过Function对象会指向Function函数。\n```\n\n思考一下，是不是先有鸡还是先有蛋的问题。\n并不是，我有一个`Function.prototype`才可以调用这个函数构造`Function对象`。\n但是它本身已经存在了，为什么要构造自己，所以`Function.__proto__`会指向自己。\n\n同理`看似Object.prototype`是大BOSS，谁都指向他。\n其实他也是通过`Function.prototype`构造的，也就是说是`Function`是`Object`的**构造函数**。\n\n**有没有一种垂帘听政的感觉**\n","source":"_posts/JavaScript-对象.md","raw":"---\ntitle: JavaScript-对象\ndate: 2018-04-12 15:46:37\ntags: JS\n---\n# 1.全局对象\n## I.window（global）\n标准里他叫做global\n浏览器上他叫做window\n是一个对象\n### i.属性\n例：\n\n```\nglobal.parseInt\nglobal.parseFloat\n```\n\n### ii.属性分为两类\n如果函数是`window.`那么这个`window.`可以省掉，毕竟它是全局函数。\n#### ECMAScript规定要有的\n比如\n\n```\nparseInt\nparseFloat\nNumber()\nString()\nBoolean()\nObject()\n```\n\n必须得有\n#### 私有的（浏览器私有的）\n比如\n\n```\nalert（弹框提示）\nprompt（用户填写）\nconfirm（用户确认）\nconsole（开发者打印）\ndocument(能对文档做的所有操作)DOM(w3c制定)\nhistory(浏览器操作)BOM\n```\n\n\n都是浏览器自己实现的\n\n# 2.简单类型与对象的区别\n## I.Number()\n### 方法\n#### var n = 1\n但是它不能.toString\n#### var n = new Number(1)\n这个方法很少人用...\n\n```\n1=>{valueOf():1,} //把1转变成对象\n```\n历史遗留问题\n\n#### 如何写的简单同时又可以用.toString呢？\n临时转换：\n\n```\ntemp = new Number(n)\ntemp.toString()\n拿到对象里的值再输出\n然后去除temp的ADDR\n对象内容被回收\nEND\n```\n\n所以在：\n\n```\nvar n = 1\nn.toString() //发生了一次temp的转换\n```\n\n**JS之父做的操作**\n\n## II.String()\n操作和Number()一样\n### 记几个API吧\n\n|API|作用|备注|\n|:---:|:---:|:---:|\n|.charAt(n)|获取第n位的字符|n为第几位|\n|.charCodeAt(n)|获取某一个索引对应的字符的编码|n为第几位。|\n|(数字).toString(进制数)|将数字转换为制定进制数|可以和`.charCodeAt(n)`组合使用|\n|concat()|连接两个字符串|`字符串1.concat(字符串2)`和命令行的`cat`是不是兄弟|\n|endsWith()|一个字符串以什么结尾||\n|.trim()|去掉两边的空格|`字符串.trim()`|\n|.slice|切片，保留指定位|`目标字符串.slice(0,2)`仅保留前两位（这两个数字包前不包后）|\n|.replace|替换|`字符串.replace('要换谁','换成谁')`|\n\n## III.Bullean()\n里面东西超少\n\n```\ntoString\nvalueOf\n```\n\n## IV.null和undefined没有对应的函数\n## V.object\n之前都是基本类型\n现在到了对象\n\n```\nvar o1 = {}\nvar o2 = new Object()\n// 他俩都是空的，但是。\no1 === o2 //false\n// 回到前面ADDR和对象的关系，o1和o2的地址不一样，就算内容一样，也不相等。\n```\n\n所以，直接用`var o1 = {}`吧，他俩没差，还少敲几个字符。你又不是敲java。\n\n## VI.总结一下\n他们都有`toString()`和`valueOf()`\n那岂不是很占内存\n可不可以都用同一个`toString()`和`valueOf()`\n\n如何让他们都指向同一个`toString()`和`valueOf()`呢？\n\n### JS向你掏出来了一只`__proto__`\n\n# 3.原型\n## 举个例子\n\n```\nvar o1 = new object()\no1.name = 'oracle'\no1.age = '24'\n//////////////////\no1 ADDR 200:\nname: oracle\nage: 24\n...\n__proto__:ADDR 100 //用__proto__指向共用属性\n//////////////////\nADDR 100(共用属性):\n...\ntoString: A10\nvalueOf: A11\n...\n```\n\n他们都指向共用属性，检查一下？\n\n```\no1 === o2 //false\n//因为他们是不同对象\no1.toString === o2.toString //true\n//但他们的.toString都指向共用属性\n```\n\n## I.那么简单类型的共用属性呢？\n想象一棵树，根部是`object`的共有属性。\n\n### i.比如number\n`var n = nwe Number(1)`\n这里面的`toString`和`obj`里的不一样耶。他都可以转进制数。\n而且他还有别的`.toFixed`什么的\n\n首先，number会指向一个number才有的共用属性：\n\n```\n...\ntoFixed\ntoExponential\ntoString\n...\n__proto__: Object //这一层再放一个__proto__去找所有对象的共用属性\n```\n\n然后在number的共用属性里面，找对象的共用属性\n**自己用不一样的，再从别处引用一样的**\n\n## II.这就是原型链\n从它的类型到它的类型的共用属性在到对象的共用属性，一条链过去，一路都是节点。\n\n### i.prototype\n如果一个哈希没有被引用的话，他会被浏览器垃圾回收（没大哥罩着就要被干掉）\n那么共用属性在没人引用的时候，就是prototype在引用他。\n\n从现在起，把共用属性这个词，换成**原型**。\n\n```\nObject.prototype\nvar o1 = {}\no1.__proto__ === Object.prototype  //true\n```\n\n这样就清晰了，它们一直以来，引用的是谁。\n### ii.Number.prototype\n了解到`number`属性自己的原型里面还有引用对象的原型，做个测试：\n\n```\nvar n1 = new Number(1)\nn1.__proto__ === Number.prototype //true\nn1.__proto__.__proto__  === Object.prototype  //true\n```\n\n那么我们就可以理解为什么\n`n1.hasOwnProperty('2')  //false`\nn1可以调用他第一层`__proto__`里没有的`.hasOwnProperty`了\n因为会一层一层的找，第一层找不到找第二层。\n**这条链子在JS引擎开启的时候就连上了**\n\n## III.`__proto__`和`prototype`有什么区别\n\n```\nString.prototype   //是 String 的共用属性的引用（不让共用属性被清理）\ns.__proto__   //是 String 的共用属性的引用（真的是要用它）\n```\n\n### i.形式上呢？\nvar 接对象 = new 接函数(也是对象)\n\n```\nvar 对象 = new 函数()\n对象.__proto__ === 函数.prototype\n```\n\n那么我们可以说他们的区别：\n`__proto__`是对象的属性\n`prototype`是函数的属性\n\n## IV.特殊的function\n找寻本源：\n\n```\nObject.__proto__ === Object.prototype //false\nObject.__proto__ === Function.prototype\n//true\n```\n\n问题来了，我们把`__proto__`当成链\n把`prototype`当成锚\n\n`Function`本身也是一个`Function`对象\n\n```\nvar Function = new Function()\nFunction.__proto__ === Function.prototype   //true\n//他自己是Function对象，我要通过Function对象会指向Function函数。\n```\n\n思考一下，是不是先有鸡还是先有蛋的问题。\n并不是，我有一个`Function.prototype`才可以调用这个函数构造`Function对象`。\n但是它本身已经存在了，为什么要构造自己，所以`Function.__proto__`会指向自己。\n\n同理`看似Object.prototype`是大BOSS，谁都指向他。\n其实他也是通过`Function.prototype`构造的，也就是说是`Function`是`Object`的**构造函数**。\n\n**有没有一种垂帘听政的感觉**\n","slug":"JavaScript-对象","published":1,"updated":"2018-04-12T12:59:54.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3h0008t2g39c3ewzi3","content":"<h1 id=\"1-全局对象\"><a href=\"#1-全局对象\" class=\"headerlink\" title=\"1.全局对象\"></a>1.全局对象</h1><h2 id=\"I-window（global）\"><a href=\"#I-window（global）\" class=\"headerlink\" title=\"I.window（global）\"></a>I.window（global）</h2><p>标准里他叫做global<br>浏览器上他叫做window<br>是一个对象</p>\n<h3 id=\"i-属性\"><a href=\"#i-属性\" class=\"headerlink\" title=\"i.属性\"></a>i.属性</h3><p>例：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">global</span>.parseInt</span><br><span class=\"line\"><span class=\"keyword\">global</span>.parseFloat</span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-属性分为两类\"><a href=\"#ii-属性分为两类\" class=\"headerlink\" title=\"ii.属性分为两类\"></a>ii.属性分为两类</h3><p>如果函数是<code>window.</code>那么这个<code>window.</code>可以省掉，毕竟它是全局函数。</p>\n<h4 id=\"ECMAScript规定要有的\"><a href=\"#ECMAScript规定要有的\" class=\"headerlink\" title=\"ECMAScript规定要有的\"></a>ECMAScript规定要有的</h4><p>比如</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt</span><br><span class=\"line\">parseFloat</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">String</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Boolean</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>必须得有</p>\n<h4 id=\"私有的（浏览器私有的）\"><a href=\"#私有的（浏览器私有的）\" class=\"headerlink\" title=\"私有的（浏览器私有的）\"></a>私有的（浏览器私有的）</h4><p>比如</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert（弹框提示）</span><br><span class=\"line\">prompt（用户填写）</span><br><span class=\"line\">confirm（用户确认）</span><br><span class=\"line\">console（开发者打印）</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">document</span><span class=\"params\">(能对文档做的所有操作)</span><span class=\"title\">DOM</span><span class=\"params\">(w3c制定)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">history</span><span class=\"params\">(浏览器操作)</span><span class=\"title\">BOM</span></span></span><br></pre></td></tr></table></figure>\n<p>都是浏览器自己实现的</p>\n<h1 id=\"2-简单类型与对象的区别\"><a href=\"#2-简单类型与对象的区别\" class=\"headerlink\" title=\"2.简单类型与对象的区别\"></a>2.简单类型与对象的区别</h1><h2 id=\"I-Number\"><a href=\"#I-Number\" class=\"headerlink\" title=\"I.Number()\"></a>I.Number()</h2><h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"var-n-1\"><a href=\"#var-n-1\" class=\"headerlink\" title=\"var n = 1\"></a>var n = 1</h4><p>但是它不能.toString</p>\n<h4 id=\"var-n-new-Number-1\"><a href=\"#var-n-new-Number-1\" class=\"headerlink\" title=\"var n = new Number(1)\"></a>var n = new Number(1)</h4><p>这个方法很少人用…</p>\n<figure class=\"highlight clojure-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">1=&gt;</span><span class=\"clojure\">&#123;valueOf():<span class=\"number\">1</span>,&#125; //把<span class=\"number\">1</span>转变成对象</span></span><br></pre></td></tr></table></figure>\n<p>历史遗留问题</p>\n<h4 id=\"如何写的简单同时又可以用-toString呢？\"><a href=\"#如何写的简单同时又可以用-toString呢？\" class=\"headerlink\" title=\"如何写的简单同时又可以用.toString呢？\"></a>如何写的简单同时又可以用.toString呢？</h4><p>临时转换：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Number</span>(n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">temp</span>.<span class=\"title\">toString</span>()</span></span><br><span class=\"line\"><span class=\"function\">拿到对象里的值再输出</span></span><br><span class=\"line\"><span class=\"function\">然后去除<span class=\"title\">temp</span>的<span class=\"title\">ADDR</span></span></span><br><span class=\"line\"><span class=\"function\">对象内容被回收</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">END</span></span></span><br></pre></td></tr></table></figure>\n<p>所以在：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">n</span> = 1</span><br><span class=\"line\"><span class=\"keyword\">n</span>.<span class=\"keyword\">toString</span>() <span class=\"comment\">//发生了一次temp的转换</span></span><br></pre></td></tr></table></figure>\n<p><strong>JS之父做的操作</strong></p>\n<h2 id=\"II-String\"><a href=\"#II-String\" class=\"headerlink\" title=\"II.String()\"></a>II.String()</h2><p>操作和Number()一样</p>\n<h3 id=\"记几个API吧\"><a href=\"#记几个API吧\" class=\"headerlink\" title=\"记几个API吧\"></a>记几个API吧</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">.charAt(n)</td>\n<td style=\"text-align:center\">获取第n位的字符</td>\n<td style=\"text-align:center\">n为第几位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.charCodeAt(n)</td>\n<td style=\"text-align:center\">获取某一个索引对应的字符的编码</td>\n<td style=\"text-align:center\">n为第几位。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(数字).toString(进制数)</td>\n<td style=\"text-align:center\">将数字转换为制定进制数</td>\n<td style=\"text-align:center\">可以和<code>.charCodeAt(n)</code>组合使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">concat()</td>\n<td style=\"text-align:center\">连接两个字符串</td>\n<td style=\"text-align:center\"><code>字符串1.concat(字符串2)</code>和命令行的<code>cat</code>是不是兄弟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">endsWith()</td>\n<td style=\"text-align:center\">一个字符串以什么结尾</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.trim()</td>\n<td style=\"text-align:center\">去掉两边的空格</td>\n<td style=\"text-align:center\"><code>字符串.trim()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.slice</td>\n<td style=\"text-align:center\">切片，保留指定位</td>\n<td style=\"text-align:center\"><code>目标字符串.slice(0,2)</code>仅保留前两位（这两个数字包前不包后）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.replace</td>\n<td style=\"text-align:center\">替换</td>\n<td style=\"text-align:center\"><code>字符串.replace(&#39;要换谁&#39;,&#39;换成谁&#39;)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"III-Bullean\"><a href=\"#III-Bullean\" class=\"headerlink\" title=\"III.Bullean()\"></a>III.Bullean()</h2><p>里面东西超少</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">toString</span></span><br><span class=\"line\"><span class=\"attribute\">valueOf</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"IV-null和undefined没有对应的函数\"><a href=\"#IV-null和undefined没有对应的函数\" class=\"headerlink\" title=\"IV.null和undefined没有对应的函数\"></a>IV.null和undefined没有对应的函数</h2><h2 id=\"V-object\"><a href=\"#V-object\" class=\"headerlink\" title=\"V.object\"></a>V.object</h2><p>之前都是基本类型<br>现在到了对象</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\"><span class=\"comment\">// 他俩都是空的，但是。</span></span><br><span class=\"line\">o1 === o2 <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">// 回到前面ADDR和对象的关系，o1和o2的地址不一样，就算内容一样，也不相等。</span></span><br></pre></td></tr></table></figure>\n<p>所以，直接用<code>var o1 = {}</code>吧，他俩没差，还少敲几个字符。你又不是敲java。</p>\n<h2 id=\"VI-总结一下\"><a href=\"#VI-总结一下\" class=\"headerlink\" title=\"VI.总结一下\"></a>VI.总结一下</h2><p>他们都有<code>toString()</code>和<code>valueOf()</code><br>那岂不是很占内存<br>可不可以都用同一个<code>toString()</code>和<code>valueOf()</code></p>\n<p>如何让他们都指向同一个<code>toString()</code>和<code>valueOf()</code>呢？</p>\n<h3 id=\"JS向你掏出来了一只-proto\"><a href=\"#JS向你掏出来了一只-proto\" class=\"headerlink\" title=\"JS向你掏出来了一只__proto__\"></a>JS向你掏出来了一只<code>__proto__</code></h3><h1 id=\"3-原型\"><a href=\"#3-原型\" class=\"headerlink\" title=\"3.原型\"></a>3.原型</h1><h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o1 = new object()</span><br><span class=\"line\">o1.name = <span class=\"string\">'oracle'</span></span><br><span class=\"line\">o1.age = <span class=\"string\">'24'</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span></span><br><span class=\"line\">o1 ADDR <span class=\"number\">200</span>:</span><br><span class=\"line\">name: oracle</span><br><span class=\"line\">age: <span class=\"number\">24</span></span><br><span class=\"line\">...</span><br><span class=\"line\">__proto__:ADDR <span class=\"number\">100</span> <span class=\"regexp\">//</span>用__proto__指向共用属性</span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span></span><br><span class=\"line\">ADDR <span class=\"number\">100</span>(共用属性):</span><br><span class=\"line\">...</span><br><span class=\"line\">toString: A10</span><br><span class=\"line\">valueOf: A11</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>他们都指向共用属性，检查一下？</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">o1</span> === o2 //<span class=\"literal\">false</span></span><br><span class=\"line\">//因为他们是不同对象</span><br><span class=\"line\">o1.<span class=\"attr\">toString</span> === o2.<span class=\"built_in\">toString</span> //<span class=\"literal\">true</span></span><br><span class=\"line\">//但他们的.<span class=\"built_in\">toString</span>都指向共用属性</span><br></pre></td></tr></table></figure>\n<h2 id=\"I-那么简单类型的共用属性呢？\"><a href=\"#I-那么简单类型的共用属性呢？\" class=\"headerlink\" title=\"I.那么简单类型的共用属性呢？\"></a>I.那么简单类型的共用属性呢？</h2><p>想象一棵树，根部是<code>object</code>的共有属性。</p>\n<h3 id=\"i-比如number\"><a href=\"#i-比如number\" class=\"headerlink\" title=\"i.比如number\"></a>i.比如number</h3><p><code>var n = nwe Number(1)</code><br>这里面的<code>toString</code>和<code>obj</code>里的不一样耶。他都可以转进制数。<br>而且他还有别的<code>.toFixed</code>什么的</p>\n<p>首先，number会指向一个number才有的共用属性：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">toFixed</span></span><br><span class=\"line\">toExponential</span><br><span class=\"line\"><span class=\"built_in\">toString</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"variable\">__proto__</span>: Object <span class=\"comment\">//这一层再放一个__proto__去找所有对象的共用属性</span></span><br></pre></td></tr></table></figure>\n<p>然后在number的共用属性里面，找对象的共用属性<br><strong>自己用不一样的，再从别处引用一样的</strong></p>\n<h2 id=\"II-这就是原型链\"><a href=\"#II-这就是原型链\" class=\"headerlink\" title=\"II.这就是原型链\"></a>II.这就是原型链</h2><p>从它的类型到它的类型的共用属性在到对象的共用属性，一条链过去，一路都是节点。</p>\n<h3 id=\"i-prototype\"><a href=\"#i-prototype\" class=\"headerlink\" title=\"i.prototype\"></a>i.prototype</h3><p>如果一个哈希没有被引用的话，他会被浏览器垃圾回收（没大哥罩着就要被干掉）<br>那么共用属性在没人引用的时候，就是prototype在引用他。</p>\n<p>从现在起，把共用属性这个词，换成<strong>原型</strong>。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\">o1.__proto__ === <span class=\"built_in\">Object</span>.prototype  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>这样就清晰了，它们一直以来，引用的是谁。</p>\n<h3 id=\"ii-Number-prototype\"><a href=\"#ii-Number-prototype\" class=\"headerlink\" title=\"ii.Number.prototype\"></a>ii.Number.prototype</h3><p>了解到<code>number</code>属性自己的原型里面还有引用对象的原型，做个测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">n1.__proto__ === <span class=\"built_in\">Number</span>.prototype <span class=\"comment\">//true</span></span><br><span class=\"line\">n1.__proto__.__proto__  === <span class=\"built_in\">Object</span>.prototype  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>那么我们就可以理解为什么<br><code>n1.hasOwnProperty(&#39;2&#39;)  //false</code><br>n1可以调用他第一层<code>__proto__</code>里没有的<code>.hasOwnProperty</code>了<br>因为会一层一层的找，第一层找不到找第二层。<br><strong>这条链子在JS引擎开启的时候就连上了</strong></p>\n<h2 id=\"III-proto-和prototype有什么区别\"><a href=\"#III-proto-和prototype有什么区别\" class=\"headerlink\" title=\"III.__proto__和prototype有什么区别\"></a>III.<code>__proto__</code>和<code>prototype</code>有什么区别</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String<span class=\"selector-class\">.prototype</span>   <span class=\"comment\">//是 String 的共用属性的引用（不让共用属性被清理）</span></span><br><span class=\"line\">s.__proto__   <span class=\"comment\">//是 String 的共用属性的引用（真的是要用它）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"i-形式上呢？\"><a href=\"#i-形式上呢？\" class=\"headerlink\" title=\"i.形式上呢？\"></a>i.形式上呢？</h3><p>var 接对象 = new 接函数(也是对象)</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 对象 = <span class=\"keyword\">new</span> <span class=\"type\"></span>函数()</span><br><span class=\"line\">对象.__proto__ === 函数.prototype</span><br></pre></td></tr></table></figure>\n<p>那么我们可以说他们的区别：<br><code>__proto__</code>是对象的属性<br><code>prototype</code>是函数的属性</p>\n<h2 id=\"IV-特殊的function\"><a href=\"#IV-特殊的function\" class=\"headerlink\" title=\"IV.特殊的function\"></a>IV.特殊的function</h2><p>找寻本源：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Object</span>.prototype <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>问题来了，我们把<code>__proto__</code>当成链<br>把<code>prototype</code>当成锚</p>\n<p><code>Function</code>本身也是一个<code>Function</code>对象</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">Function</span></span> = new <span class=\"function\"><span class=\"keyword\">Function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span>.<span class=\"title\">__proto__</span></span> === <span class=\"function\"><span class=\"keyword\">Function</span>.<span class=\"title\">prototype</span></span>   //true</span><br><span class=\"line\">//他自己是<span class=\"function\"><span class=\"keyword\">Function</span></span>对象，我要通过<span class=\"function\"><span class=\"keyword\">Function</span></span>对象会指向<span class=\"function\"><span class=\"keyword\">Function</span></span>函数。</span><br></pre></td></tr></table></figure>\n<p>思考一下，是不是先有鸡还是先有蛋的问题。<br>并不是，我有一个<code>Function.prototype</code>才可以调用这个函数构造<code>Function对象</code>。<br>但是它本身已经存在了，为什么要构造自己，所以<code>Function.__proto__</code>会指向自己。</p>\n<p>同理<code>看似Object.prototype</code>是大BOSS，谁都指向他。<br>其实他也是通过<code>Function.prototype</code>构造的，也就是说是<code>Function</code>是<code>Object</code>的<strong>构造函数</strong>。</p>\n<p><strong>有没有一种垂帘听政的感觉</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-全局对象\"><a href=\"#1-全局对象\" class=\"headerlink\" title=\"1.全局对象\"></a>1.全局对象</h1><h2 id=\"I-window（global）\"><a href=\"#I-window（global）\" class=\"headerlink\" title=\"I.window（global）\"></a>I.window（global）</h2><p>标准里他叫做global<br>浏览器上他叫做window<br>是一个对象</p>\n<h3 id=\"i-属性\"><a href=\"#i-属性\" class=\"headerlink\" title=\"i.属性\"></a>i.属性</h3><p>例：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">global</span>.parseInt</span><br><span class=\"line\"><span class=\"keyword\">global</span>.parseFloat</span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-属性分为两类\"><a href=\"#ii-属性分为两类\" class=\"headerlink\" title=\"ii.属性分为两类\"></a>ii.属性分为两类</h3><p>如果函数是<code>window.</code>那么这个<code>window.</code>可以省掉，毕竟它是全局函数。</p>\n<h4 id=\"ECMAScript规定要有的\"><a href=\"#ECMAScript规定要有的\" class=\"headerlink\" title=\"ECMAScript规定要有的\"></a>ECMAScript规定要有的</h4><p>比如</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parseInt</span><br><span class=\"line\">parseFloat</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Number</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">String</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Boolean</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Object</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<p>必须得有</p>\n<h4 id=\"私有的（浏览器私有的）\"><a href=\"#私有的（浏览器私有的）\" class=\"headerlink\" title=\"私有的（浏览器私有的）\"></a>私有的（浏览器私有的）</h4><p>比如</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert（弹框提示）</span><br><span class=\"line\">prompt（用户填写）</span><br><span class=\"line\">confirm（用户确认）</span><br><span class=\"line\">console（开发者打印）</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">document</span><span class=\"params\">(能对文档做的所有操作)</span><span class=\"title\">DOM</span><span class=\"params\">(w3c制定)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">history</span><span class=\"params\">(浏览器操作)</span><span class=\"title\">BOM</span></span></span><br></pre></td></tr></table></figure>\n<p>都是浏览器自己实现的</p>\n<h1 id=\"2-简单类型与对象的区别\"><a href=\"#2-简单类型与对象的区别\" class=\"headerlink\" title=\"2.简单类型与对象的区别\"></a>2.简单类型与对象的区别</h1><h2 id=\"I-Number\"><a href=\"#I-Number\" class=\"headerlink\" title=\"I.Number()\"></a>I.Number()</h2><h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><h4 id=\"var-n-1\"><a href=\"#var-n-1\" class=\"headerlink\" title=\"var n = 1\"></a>var n = 1</h4><p>但是它不能.toString</p>\n<h4 id=\"var-n-new-Number-1\"><a href=\"#var-n-new-Number-1\" class=\"headerlink\" title=\"var n = new Number(1)\"></a>var n = new Number(1)</h4><p>这个方法很少人用…</p>\n<figure class=\"highlight clojure-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">1=&gt;</span><span class=\"clojure\">&#123;valueOf():<span class=\"number\">1</span>,&#125; //把<span class=\"number\">1</span>转变成对象</span></span><br></pre></td></tr></table></figure>\n<p>历史遗留问题</p>\n<h4 id=\"如何写的简单同时又可以用-toString呢？\"><a href=\"#如何写的简单同时又可以用-toString呢？\" class=\"headerlink\" title=\"如何写的简单同时又可以用.toString呢？\"></a>如何写的简单同时又可以用.toString呢？</h4><p>临时转换：</p>\n<figure class=\"highlight pony\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">temp = <span class=\"function\"><span class=\"keyword\">new</span> <span class=\"title\">Number</span>(n)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">temp</span>.<span class=\"title\">toString</span>()</span></span><br><span class=\"line\"><span class=\"function\">拿到对象里的值再输出</span></span><br><span class=\"line\"><span class=\"function\">然后去除<span class=\"title\">temp</span>的<span class=\"title\">ADDR</span></span></span><br><span class=\"line\"><span class=\"function\">对象内容被回收</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">END</span></span></span><br></pre></td></tr></table></figure>\n<p>所以在：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">n</span> = 1</span><br><span class=\"line\"><span class=\"keyword\">n</span>.<span class=\"keyword\">toString</span>() <span class=\"comment\">//发生了一次temp的转换</span></span><br></pre></td></tr></table></figure>\n<p><strong>JS之父做的操作</strong></p>\n<h2 id=\"II-String\"><a href=\"#II-String\" class=\"headerlink\" title=\"II.String()\"></a>II.String()</h2><p>操作和Number()一样</p>\n<h3 id=\"记几个API吧\"><a href=\"#记几个API吧\" class=\"headerlink\" title=\"记几个API吧\"></a>记几个API吧</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">API</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">.charAt(n)</td>\n<td style=\"text-align:center\">获取第n位的字符</td>\n<td style=\"text-align:center\">n为第几位</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.charCodeAt(n)</td>\n<td style=\"text-align:center\">获取某一个索引对应的字符的编码</td>\n<td style=\"text-align:center\">n为第几位。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(数字).toString(进制数)</td>\n<td style=\"text-align:center\">将数字转换为制定进制数</td>\n<td style=\"text-align:center\">可以和<code>.charCodeAt(n)</code>组合使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">concat()</td>\n<td style=\"text-align:center\">连接两个字符串</td>\n<td style=\"text-align:center\"><code>字符串1.concat(字符串2)</code>和命令行的<code>cat</code>是不是兄弟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">endsWith()</td>\n<td style=\"text-align:center\">一个字符串以什么结尾</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.trim()</td>\n<td style=\"text-align:center\">去掉两边的空格</td>\n<td style=\"text-align:center\"><code>字符串.trim()</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.slice</td>\n<td style=\"text-align:center\">切片，保留指定位</td>\n<td style=\"text-align:center\"><code>目标字符串.slice(0,2)</code>仅保留前两位（这两个数字包前不包后）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">.replace</td>\n<td style=\"text-align:center\">替换</td>\n<td style=\"text-align:center\"><code>字符串.replace(&#39;要换谁&#39;,&#39;换成谁&#39;)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"III-Bullean\"><a href=\"#III-Bullean\" class=\"headerlink\" title=\"III.Bullean()\"></a>III.Bullean()</h2><p>里面东西超少</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">toString</span></span><br><span class=\"line\"><span class=\"attribute\">valueOf</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"IV-null和undefined没有对应的函数\"><a href=\"#IV-null和undefined没有对应的函数\" class=\"headerlink\" title=\"IV.null和undefined没有对应的函数\"></a>IV.null和undefined没有对应的函数</h2><h2 id=\"V-object\"><a href=\"#V-object\" class=\"headerlink\" title=\"V.object\"></a>V.object</h2><p>之前都是基本类型<br>现在到了对象</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> o2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>()</span><br><span class=\"line\"><span class=\"comment\">// 他俩都是空的，但是。</span></span><br><span class=\"line\">o1 === o2 <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">// 回到前面ADDR和对象的关系，o1和o2的地址不一样，就算内容一样，也不相等。</span></span><br></pre></td></tr></table></figure>\n<p>所以，直接用<code>var o1 = {}</code>吧，他俩没差，还少敲几个字符。你又不是敲java。</p>\n<h2 id=\"VI-总结一下\"><a href=\"#VI-总结一下\" class=\"headerlink\" title=\"VI.总结一下\"></a>VI.总结一下</h2><p>他们都有<code>toString()</code>和<code>valueOf()</code><br>那岂不是很占内存<br>可不可以都用同一个<code>toString()</code>和<code>valueOf()</code></p>\n<p>如何让他们都指向同一个<code>toString()</code>和<code>valueOf()</code>呢？</p>\n<h3 id=\"JS向你掏出来了一只-proto\"><a href=\"#JS向你掏出来了一只-proto\" class=\"headerlink\" title=\"JS向你掏出来了一只__proto__\"></a>JS向你掏出来了一只<code>__proto__</code></h3><h1 id=\"3-原型\"><a href=\"#3-原型\" class=\"headerlink\" title=\"3.原型\"></a>3.原型</h1><h2 id=\"举个例子\"><a href=\"#举个例子\" class=\"headerlink\" title=\"举个例子\"></a>举个例子</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var o1 = new object()</span><br><span class=\"line\">o1.name = <span class=\"string\">'oracle'</span></span><br><span class=\"line\">o1.age = <span class=\"string\">'24'</span></span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span></span><br><span class=\"line\">o1 ADDR <span class=\"number\">200</span>:</span><br><span class=\"line\">name: oracle</span><br><span class=\"line\">age: <span class=\"number\">24</span></span><br><span class=\"line\">...</span><br><span class=\"line\">__proto__:ADDR <span class=\"number\">100</span> <span class=\"regexp\">//</span>用__proto__指向共用属性</span><br><span class=\"line\"><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span><span class=\"regexp\">//</span></span><br><span class=\"line\">ADDR <span class=\"number\">100</span>(共用属性):</span><br><span class=\"line\">...</span><br><span class=\"line\">toString: A10</span><br><span class=\"line\">valueOf: A11</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>他们都指向共用属性，检查一下？</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">o1</span> === o2 //<span class=\"literal\">false</span></span><br><span class=\"line\">//因为他们是不同对象</span><br><span class=\"line\">o1.<span class=\"attr\">toString</span> === o2.<span class=\"built_in\">toString</span> //<span class=\"literal\">true</span></span><br><span class=\"line\">//但他们的.<span class=\"built_in\">toString</span>都指向共用属性</span><br></pre></td></tr></table></figure>\n<h2 id=\"I-那么简单类型的共用属性呢？\"><a href=\"#I-那么简单类型的共用属性呢？\" class=\"headerlink\" title=\"I.那么简单类型的共用属性呢？\"></a>I.那么简单类型的共用属性呢？</h2><p>想象一棵树，根部是<code>object</code>的共有属性。</p>\n<h3 id=\"i-比如number\"><a href=\"#i-比如number\" class=\"headerlink\" title=\"i.比如number\"></a>i.比如number</h3><p><code>var n = nwe Number(1)</code><br>这里面的<code>toString</code>和<code>obj</code>里的不一样耶。他都可以转进制数。<br>而且他还有别的<code>.toFixed</code>什么的</p>\n<p>首先，number会指向一个number才有的共用属性：</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">toFixed</span></span><br><span class=\"line\">toExponential</span><br><span class=\"line\"><span class=\"built_in\">toString</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"variable\">__proto__</span>: Object <span class=\"comment\">//这一层再放一个__proto__去找所有对象的共用属性</span></span><br></pre></td></tr></table></figure>\n<p>然后在number的共用属性里面，找对象的共用属性<br><strong>自己用不一样的，再从别处引用一样的</strong></p>\n<h2 id=\"II-这就是原型链\"><a href=\"#II-这就是原型链\" class=\"headerlink\" title=\"II.这就是原型链\"></a>II.这就是原型链</h2><p>从它的类型到它的类型的共用属性在到对象的共用属性，一条链过去，一路都是节点。</p>\n<h3 id=\"i-prototype\"><a href=\"#i-prototype\" class=\"headerlink\" title=\"i.prototype\"></a>i.prototype</h3><p>如果一个哈希没有被引用的话，他会被浏览器垃圾回收（没大哥罩着就要被干掉）<br>那么共用属性在没人引用的时候，就是prototype在引用他。</p>\n<p>从现在起，把共用属性这个词，换成<strong>原型</strong>。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.prototype</span><br><span class=\"line\"><span class=\"keyword\">var</span> o1 = &#123;&#125;</span><br><span class=\"line\">o1.__proto__ === <span class=\"built_in\">Object</span>.prototype  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>这样就清晰了，它们一直以来，引用的是谁。</p>\n<h3 id=\"ii-Number-prototype\"><a href=\"#ii-Number-prototype\" class=\"headerlink\" title=\"ii.Number.prototype\"></a>ii.Number.prototype</h3><p>了解到<code>number</code>属性自己的原型里面还有引用对象的原型，做个测试：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> n1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">n1.__proto__ === <span class=\"built_in\">Number</span>.prototype <span class=\"comment\">//true</span></span><br><span class=\"line\">n1.__proto__.__proto__  === <span class=\"built_in\">Object</span>.prototype  <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>那么我们就可以理解为什么<br><code>n1.hasOwnProperty(&#39;2&#39;)  //false</code><br>n1可以调用他第一层<code>__proto__</code>里没有的<code>.hasOwnProperty</code>了<br>因为会一层一层的找，第一层找不到找第二层。<br><strong>这条链子在JS引擎开启的时候就连上了</strong></p>\n<h2 id=\"III-proto-和prototype有什么区别\"><a href=\"#III-proto-和prototype有什么区别\" class=\"headerlink\" title=\"III.__proto__和prototype有什么区别\"></a>III.<code>__proto__</code>和<code>prototype</code>有什么区别</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String<span class=\"selector-class\">.prototype</span>   <span class=\"comment\">//是 String 的共用属性的引用（不让共用属性被清理）</span></span><br><span class=\"line\">s.__proto__   <span class=\"comment\">//是 String 的共用属性的引用（真的是要用它）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"i-形式上呢？\"><a href=\"#i-形式上呢？\" class=\"headerlink\" title=\"i.形式上呢？\"></a>i.形式上呢？</h3><p>var 接对象 = new 接函数(也是对象)</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> 对象 = <span class=\"keyword\">new</span> <span class=\"type\"></span>函数()</span><br><span class=\"line\">对象.__proto__ === 函数.prototype</span><br></pre></td></tr></table></figure>\n<p>那么我们可以说他们的区别：<br><code>__proto__</code>是对象的属性<br><code>prototype</code>是函数的属性</p>\n<h2 id=\"IV-特殊的function\"><a href=\"#IV-特殊的function\" class=\"headerlink\" title=\"IV.特殊的function\"></a>IV.特殊的function</h2><p>找寻本源：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Object</span>.prototype <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.__proto__ === <span class=\"built_in\">Function</span>.prototype</span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>问题来了，我们把<code>__proto__</code>当成链<br>把<code>prototype</code>当成锚</p>\n<p><code>Function</code>本身也是一个<code>Function</code>对象</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"function\"><span class=\"keyword\">Function</span></span> = new <span class=\"function\"><span class=\"keyword\">Function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">Function</span>.<span class=\"title\">__proto__</span></span> === <span class=\"function\"><span class=\"keyword\">Function</span>.<span class=\"title\">prototype</span></span>   //true</span><br><span class=\"line\">//他自己是<span class=\"function\"><span class=\"keyword\">Function</span></span>对象，我要通过<span class=\"function\"><span class=\"keyword\">Function</span></span>对象会指向<span class=\"function\"><span class=\"keyword\">Function</span></span>函数。</span><br></pre></td></tr></table></figure>\n<p>思考一下，是不是先有鸡还是先有蛋的问题。<br>并不是，我有一个<code>Function.prototype</code>才可以调用这个函数构造<code>Function对象</code>。<br>但是它本身已经存在了，为什么要构造自己，所以<code>Function.__proto__</code>会指向自己。</p>\n<p>同理<code>看似Object.prototype</code>是大BOSS，谁都指向他。<br>其实他也是通过<code>Function.prototype</code>构造的，也就是说是<code>Function</code>是<code>Object</code>的<strong>构造函数</strong>。</p>\n<p><strong>有没有一种垂帘听政的感觉</strong></p>\n"},{"title":"JavaScript-记了两个API","date":"2018-04-16T13:28:55.000Z","_content":"\n# 1.关于JS找兄弟\n\n```\n    <script>\n        setTimeout(function(){\n                siteWelcome.classList.remove('active')\n        },3000)\n\n        window.onscroll = function(){\n            if(window.scrollY > 0){\n                topNavBar.classList.add('sticky')\n            }else{\n                topNavBar.classList.remove('sticky')                \n            }\n        }\n        let aTags = document.getElementsByClassName('menuTigger')\n        for(let i=0; i<aTags.length; i++){\n            aTags[i].onmouseenter = function(x){\n                let a = x.currentTarget\n                let brother = a.nextSibling             //这种找兄弟...真的毛病多。\n                while(brother.tagName !== 'UL'){   //nodeType去查文档，表达了不同元素节点。 1是元素节点 3是文字 PS:为什么大写UL，因为brother.tagName会返回一个大写的UL。\n                    brother = brother.nextSibling    //递归找节点，不是节点继续找。\n                }\n                brother.classList.add('active')\n            }\n            aTags[i].onmouseleave = function(x){\n                let a = x.currentTarget\n                let brother = a.nextSibling\n                while(brother.tagName !== 'UL'){\n                    brother = brother.nextSibling\n                }\n                brother.classList.remove('active')\n            }\n        }\n    </script>\n```\n## 找父级\n`.parentNode`\n\n\n# 2.关于不找兄弟直接监听父级元素\n\n```\n        let liTags = document.getElementsByClassName('menuTigger')\n        for(let i=0; i<liTags.length; i++){\n            liTags[i].onmouseenter = function(x){\n                let li = x.currentTarget\n                let brother = li.getElementsByTagName('ul')[0]\n                brother.classList.add('active')\n            }\n            liTags[i].onmouseleave = function(x){\n                let li = x.currentTarget\n                let brother = li.getElementsByTagName('ul')[0]\n                brother.classList.remove('active')\n            }\n        }\n```\n\n# 3.既然a和ul都要active，那我为什么不把他们的父元素active呢？\n\n```\n        let liTags = document.getElementsByClassName('menuTigger')\n        for(let i=0; i<liTags.length; i++){\n            liTags[i].onmouseenter = function(x){\n                x.currentTarget.classList.add('active')\n            }\n            liTags[i].onmouseleave = function(x){\n                x.currentTarget.classList.remove('active')            \n            }\n        }\n```\n\n# 4.不想每个都加.menuTigger那么我们就加个选择器吧\n\n```\n        let liTags = document.querySelectorAll('nav.menu > ul > li')\n        for(let i=0; i<liTags.length; i++){\n            liTags[i].onmouseenter = function(x){\n                x.currentTarget.classList.add('active')\n            }\n            liTags[i].onmouseleave = function(x){\n                x.currentTarget.classList.remove('active')            \n            }\n        }\n```\n\n给nav一个.menu的class然后给他一个选择器，其中`querySelectorALL`就可以啦\n\n# 5.关于调整锚点\n\n```\n        let aTags = document.querySelectorAll('nav.menu > ul > li > a')\n        for(let i = 0; i<aTags.length; i++){\n            aTags[i].onclick = function(x){\n                x.preventDefault()          //阻止默认动作\n                let a = x.currentTarget\n                a.getAttribute('href')   //用户写什么，打什么。不像a.href是带http协议的。\n                console.log(a.getAttribute('href'))\n            }\n        }\n```\n\n## 需要获取div距离顶部的距离\n`getBoundingClientRect`这个api可以返回一组矩形集合（数组）\n一组用于描述边框的只读属性（left top right bottom）单位px\n除了width和heigth外的属性都相对于视口左上角位置而言。\n\n计算边界矩形时，会考虑视口区域（或其他可滚动元素）内的滚动操作which means:\n滚动的时候这个值会变，不是计算页面顶部而是计算视口顶部。\n**不想让他变的话：**\n给top和left加上当前滚动位置：`window.scrollX`和`window.scrollY`这样获取与当前滚动位置无关的常量值。\n为兼容请使用：`window.pageXOffset`和`window.pageYOffset`\n\n## 这个才是我们需要的\n`element.offsetTop`\n\n```\n        let aTags = document.querySelectorAll('nav.menu > ul > li > a')\n        for(let i = 0; i<aTags.length; i++){\n            aTags[i].onclick = function(x){\n                x.preventDefault()          //阻止默认动作\n                let a = x.currentTarget\n                let href = a.getAttribute('href') //'#siteAbout'\n                let element = document.querySelector(href)\n                let rect = element.getBoundingClientRect()\n                let top = element.offsetTop\n                window.scrollTo(0,top-80)\n            }\n        }\n```\n\n# 6.总结一下\n\n```\nsetTimeout()        //设置延迟\nwindow.onscroll //滚动时触发\nwindow.scrollY      //获取滚动高度\ndocument.querySelectorALL()   //接收一个选择器，获取选择器的所有元素\n.onmouseenter   //鼠标进入元素的时候触发函数\n.onmouseleave       //鼠标离开元素的时候触发函数\n.preventDefault //调用它就不会有默认的动作了\n.getAttribute()     //获取用户在元素上写的原文（不加HTTP协议）\ndocument.querySelector()      //只会获取到第一个元素\n.offsetTop      //获取元素距离页面顶部的像素数。\nwindow.scrollTo(X,Y)    //滑动到某个位置X：左右 Y：上下。改成0就是不会划。\n```\n\n# 7.用js做动画\n\n```\n#div1{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: black;\n}\n\ndiv1.style.position = 'relative'\ndiv1.style.left = 0\n\nvar n = 0\nvar id = setInterval( ()=> {\n\tn = n+10\n\tdiv1.style.left = n + 'px'\n\tif(n>=200){\n\t\twindow.clearInterval(id)\n\t}\n},40)\n```\n\n通过每秒动很多下，让人感觉它是个动画。\n`.setInterval`让他按延迟一直动\n`.setTimeout`让他延迟几秒后动一下\n`window.clearInterval(id)`让他在条件下停止\n\n# 8.console.log调试大法\n\n发现bug的时候，请console.log相关变量\n看看哪个值和想象中不一样。\n\n```\nlet n = 25 //一共动多少次\nlet duration = 500 / n  //多长时间动一次\nlet currentTop = window.scrollY\nlet targetTop = top - 80\nlet distance = (targetTop - currentTop)/ n\nlet i = 0\nlet id = setInterval(()=>{\n    if(i===n){\n    window.clearInterval(id)\n    return\n    }\n    i = i + 1\n    window.scrollTo(0,currentTop + distance * i)\n},duration)\n```\n\n平滑的滚屏，但是还不够平滑。\n## 我们需要神奇的tween.js\n缓动\n要调用他需要cdnjs(google it)\n这个库还是蛮好的。\n\n```\n        function animate(time) {\n            requestAnimationFrame(animate);    //请求动画帧数（问浏览器这台机器可以让你有多少FPS）\n            TWEEN.update(time);\n        }\n        requestAnimationFrame(animate);\n\n///////////////////////tween文档让加的告诉我们间隔多少毫秒动一次///////////////////////////\n        \n        for(let i = 0; i<aTags.length; i++){\n            aTags[i].onclick = function(x){\n                x.preventDefault()          //阻止默认动作\n                let a = x.currentTarget\n                let href = a.getAttribute('href') //'#siteAbout'\n                let element = document.querySelector(href)\n                let rect = element.getBoundingClientRect()\n                let top = element.offsetTop\n\n                let currentTop = window.scrollY\n                let targetTop = top - 80\n                let s = targetTop - currentTop              //路程\n                var t = Math.abs((s/100)*300)           //时间（绝对值）\n                if(t>500){t = 500}\n                var coords = { y: currentTop };         //初始位置\n                var tween = new TWEEN.Tween(coords)         //初始位置\n                    .to({ y: targetTop}, t)             //结束位置，时间（不能使负值）\n                    .easing(TWEEN.Easing.Quadratic.InOut)   //缓动类型\n                    .onUpdate(function () {             //在这里coords.y已经变了\n                        window.scrollTo(0,coords.y)         //如何更新界面（向下滚动coords.y）\n                    })\n                    .start();       //开始缓动\n            }\n        }\n```\n\n通过tween.js来计算滚动速度\nMath.abs()来得出绝对值\n","source":"_posts/JavaScript-记了两个API.md","raw":"---\ntitle: JavaScript-记了两个API\ndate: 2018-04-16 21:28:55\ntags: JS\n---\n\n# 1.关于JS找兄弟\n\n```\n    <script>\n        setTimeout(function(){\n                siteWelcome.classList.remove('active')\n        },3000)\n\n        window.onscroll = function(){\n            if(window.scrollY > 0){\n                topNavBar.classList.add('sticky')\n            }else{\n                topNavBar.classList.remove('sticky')                \n            }\n        }\n        let aTags = document.getElementsByClassName('menuTigger')\n        for(let i=0; i<aTags.length; i++){\n            aTags[i].onmouseenter = function(x){\n                let a = x.currentTarget\n                let brother = a.nextSibling             //这种找兄弟...真的毛病多。\n                while(brother.tagName !== 'UL'){   //nodeType去查文档，表达了不同元素节点。 1是元素节点 3是文字 PS:为什么大写UL，因为brother.tagName会返回一个大写的UL。\n                    brother = brother.nextSibling    //递归找节点，不是节点继续找。\n                }\n                brother.classList.add('active')\n            }\n            aTags[i].onmouseleave = function(x){\n                let a = x.currentTarget\n                let brother = a.nextSibling\n                while(brother.tagName !== 'UL'){\n                    brother = brother.nextSibling\n                }\n                brother.classList.remove('active')\n            }\n        }\n    </script>\n```\n## 找父级\n`.parentNode`\n\n\n# 2.关于不找兄弟直接监听父级元素\n\n```\n        let liTags = document.getElementsByClassName('menuTigger')\n        for(let i=0; i<liTags.length; i++){\n            liTags[i].onmouseenter = function(x){\n                let li = x.currentTarget\n                let brother = li.getElementsByTagName('ul')[0]\n                brother.classList.add('active')\n            }\n            liTags[i].onmouseleave = function(x){\n                let li = x.currentTarget\n                let brother = li.getElementsByTagName('ul')[0]\n                brother.classList.remove('active')\n            }\n        }\n```\n\n# 3.既然a和ul都要active，那我为什么不把他们的父元素active呢？\n\n```\n        let liTags = document.getElementsByClassName('menuTigger')\n        for(let i=0; i<liTags.length; i++){\n            liTags[i].onmouseenter = function(x){\n                x.currentTarget.classList.add('active')\n            }\n            liTags[i].onmouseleave = function(x){\n                x.currentTarget.classList.remove('active')            \n            }\n        }\n```\n\n# 4.不想每个都加.menuTigger那么我们就加个选择器吧\n\n```\n        let liTags = document.querySelectorAll('nav.menu > ul > li')\n        for(let i=0; i<liTags.length; i++){\n            liTags[i].onmouseenter = function(x){\n                x.currentTarget.classList.add('active')\n            }\n            liTags[i].onmouseleave = function(x){\n                x.currentTarget.classList.remove('active')            \n            }\n        }\n```\n\n给nav一个.menu的class然后给他一个选择器，其中`querySelectorALL`就可以啦\n\n# 5.关于调整锚点\n\n```\n        let aTags = document.querySelectorAll('nav.menu > ul > li > a')\n        for(let i = 0; i<aTags.length; i++){\n            aTags[i].onclick = function(x){\n                x.preventDefault()          //阻止默认动作\n                let a = x.currentTarget\n                a.getAttribute('href')   //用户写什么，打什么。不像a.href是带http协议的。\n                console.log(a.getAttribute('href'))\n            }\n        }\n```\n\n## 需要获取div距离顶部的距离\n`getBoundingClientRect`这个api可以返回一组矩形集合（数组）\n一组用于描述边框的只读属性（left top right bottom）单位px\n除了width和heigth外的属性都相对于视口左上角位置而言。\n\n计算边界矩形时，会考虑视口区域（或其他可滚动元素）内的滚动操作which means:\n滚动的时候这个值会变，不是计算页面顶部而是计算视口顶部。\n**不想让他变的话：**\n给top和left加上当前滚动位置：`window.scrollX`和`window.scrollY`这样获取与当前滚动位置无关的常量值。\n为兼容请使用：`window.pageXOffset`和`window.pageYOffset`\n\n## 这个才是我们需要的\n`element.offsetTop`\n\n```\n        let aTags = document.querySelectorAll('nav.menu > ul > li > a')\n        for(let i = 0; i<aTags.length; i++){\n            aTags[i].onclick = function(x){\n                x.preventDefault()          //阻止默认动作\n                let a = x.currentTarget\n                let href = a.getAttribute('href') //'#siteAbout'\n                let element = document.querySelector(href)\n                let rect = element.getBoundingClientRect()\n                let top = element.offsetTop\n                window.scrollTo(0,top-80)\n            }\n        }\n```\n\n# 6.总结一下\n\n```\nsetTimeout()        //设置延迟\nwindow.onscroll //滚动时触发\nwindow.scrollY      //获取滚动高度\ndocument.querySelectorALL()   //接收一个选择器，获取选择器的所有元素\n.onmouseenter   //鼠标进入元素的时候触发函数\n.onmouseleave       //鼠标离开元素的时候触发函数\n.preventDefault //调用它就不会有默认的动作了\n.getAttribute()     //获取用户在元素上写的原文（不加HTTP协议）\ndocument.querySelector()      //只会获取到第一个元素\n.offsetTop      //获取元素距离页面顶部的像素数。\nwindow.scrollTo(X,Y)    //滑动到某个位置X：左右 Y：上下。改成0就是不会划。\n```\n\n# 7.用js做动画\n\n```\n#div1{\n\twidth: 100px;\n\theight: 100px;\n\tbackground: black;\n}\n\ndiv1.style.position = 'relative'\ndiv1.style.left = 0\n\nvar n = 0\nvar id = setInterval( ()=> {\n\tn = n+10\n\tdiv1.style.left = n + 'px'\n\tif(n>=200){\n\t\twindow.clearInterval(id)\n\t}\n},40)\n```\n\n通过每秒动很多下，让人感觉它是个动画。\n`.setInterval`让他按延迟一直动\n`.setTimeout`让他延迟几秒后动一下\n`window.clearInterval(id)`让他在条件下停止\n\n# 8.console.log调试大法\n\n发现bug的时候，请console.log相关变量\n看看哪个值和想象中不一样。\n\n```\nlet n = 25 //一共动多少次\nlet duration = 500 / n  //多长时间动一次\nlet currentTop = window.scrollY\nlet targetTop = top - 80\nlet distance = (targetTop - currentTop)/ n\nlet i = 0\nlet id = setInterval(()=>{\n    if(i===n){\n    window.clearInterval(id)\n    return\n    }\n    i = i + 1\n    window.scrollTo(0,currentTop + distance * i)\n},duration)\n```\n\n平滑的滚屏，但是还不够平滑。\n## 我们需要神奇的tween.js\n缓动\n要调用他需要cdnjs(google it)\n这个库还是蛮好的。\n\n```\n        function animate(time) {\n            requestAnimationFrame(animate);    //请求动画帧数（问浏览器这台机器可以让你有多少FPS）\n            TWEEN.update(time);\n        }\n        requestAnimationFrame(animate);\n\n///////////////////////tween文档让加的告诉我们间隔多少毫秒动一次///////////////////////////\n        \n        for(let i = 0; i<aTags.length; i++){\n            aTags[i].onclick = function(x){\n                x.preventDefault()          //阻止默认动作\n                let a = x.currentTarget\n                let href = a.getAttribute('href') //'#siteAbout'\n                let element = document.querySelector(href)\n                let rect = element.getBoundingClientRect()\n                let top = element.offsetTop\n\n                let currentTop = window.scrollY\n                let targetTop = top - 80\n                let s = targetTop - currentTop              //路程\n                var t = Math.abs((s/100)*300)           //时间（绝对值）\n                if(t>500){t = 500}\n                var coords = { y: currentTop };         //初始位置\n                var tween = new TWEEN.Tween(coords)         //初始位置\n                    .to({ y: targetTop}, t)             //结束位置，时间（不能使负值）\n                    .easing(TWEEN.Easing.Quadratic.InOut)   //缓动类型\n                    .onUpdate(function () {             //在这里coords.y已经变了\n                        window.scrollTo(0,coords.y)         //如何更新界面（向下滚动coords.y）\n                    })\n                    .start();       //开始缓动\n            }\n        }\n```\n\n通过tween.js来计算滚动速度\nMath.abs()来得出绝对值\n","slug":"JavaScript-记了两个API","published":1,"updated":"2018-04-18T15:25:25.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3j0009t2g3bx8q163f","content":"<h1 id=\"1-关于JS找兄弟\"><a href=\"#1-关于JS找兄弟\" class=\"headerlink\" title=\"1.关于JS找兄弟\"></a>1.关于JS找兄弟</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            siteWelcome.classList.remove(<span class=\"string\">'active'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,3000)</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            topNavBar.classList.add(<span class=\"string\">'sticky'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            topNavBar.classList.remove(<span class=\"string\">'sticky'</span>)                </span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> aTags = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'menuTigger'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;aTags.length; i++)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        aTags[i].onmouseenter = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> a = x.currentTarget</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> brother = a.nextSibling             <span class=\"comment\">//这种找兄弟...真的毛病多。</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">while</span>(brother.tagName !== <span class=\"string\">'UL'</span>)&#123;   <span class=\"comment\">//nodeType去查文档，表达了不同元素节点。 1是元素节点 3是文字 PS:为什么大写UL，因为brother.tagName会返回一个大写的UL。</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                brother = brother.nextSibling    <span class=\"comment\">//递归找节点，不是节点继续找。</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">            brother.classList.add(<span class=\"string\">'active'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">        aTags[i].onmouseleave = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> a = x.currentTarget</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> brother = a.nextSibling</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">while</span>(brother.tagName !== <span class=\"string\">'UL'</span>)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                brother = brother.nextSibling</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">            brother.classList.remove(<span class=\"string\">'active'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"找父级\"><a href=\"#找父级\" class=\"headerlink\" title=\"找父级\"></a>找父级</h2><p><code>.parentNode</code></p>\n<h1 id=\"2-关于不找兄弟直接监听父级元素\"><a href=\"#2-关于不找兄弟直接监听父级元素\" class=\"headerlink\" title=\"2.关于不找兄弟直接监听父级元素\"></a>2.关于不找兄弟直接监听父级元素</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let liTags = document.getElementsByClassName(<span class=\"string\">'menuTigger'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseenter</span> = function(x)&#123;</span><br><span class=\"line\">        let <span class=\"selector-tag\">li</span> = x.currentTarget</span><br><span class=\"line\">        let brother = <span class=\"selector-tag\">li</span>.getElementsByTagName(<span class=\"string\">'ul'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        brother<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseleave</span> = function(x)&#123;</span><br><span class=\"line\">        let <span class=\"selector-tag\">li</span> = x.currentTarget</span><br><span class=\"line\">        let brother = <span class=\"selector-tag\">li</span>.getElementsByTagName(<span class=\"string\">'ul'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        brother<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-既然a和ul都要active，那我为什么不把他们的父元素active呢？\"><a href=\"#3-既然a和ul都要active，那我为什么不把他们的父元素active呢？\" class=\"headerlink\" title=\"3.既然a和ul都要active，那我为什么不把他们的父元素active呢？\"></a>3.既然a和ul都要active，那我为什么不把他们的父元素active呢？</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let liTags = document.getElementsByClassName(<span class=\"string\">'menuTigger'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseenter</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseleave</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(<span class=\"string\">'active'</span>)            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-不想每个都加-menuTigger那么我们就加个选择器吧\"><a href=\"#4-不想每个都加-menuTigger那么我们就加个选择器吧\" class=\"headerlink\" title=\"4.不想每个都加.menuTigger那么我们就加个选择器吧\"></a>4.不想每个都加.menuTigger那么我们就加个选择器吧</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let liTags = document.querySelectorAll(<span class=\"string\">'nav.menu &gt; ul &gt; li'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseenter</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseleave</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(<span class=\"string\">'active'</span>)            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给nav一个.menu的class然后给他一个选择器，其中<code>querySelectorALL</code>就可以啦</p>\n<h1 id=\"5-关于调整锚点\"><a href=\"#5-关于调整锚点\" class=\"headerlink\" title=\"5.关于调整锚点\"></a>5.关于调整锚点</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let aTags = document.querySelectorAll(<span class=\"string\">'nav.menu &gt; ul &gt; li &gt; a'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i = <span class=\"number\">0</span>; i&lt;aTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    aTags[i]<span class=\"selector-class\">.onclick</span> = function(x)&#123;</span><br><span class=\"line\">        x.preventDefault()          <span class=\"comment\">//阻止默认动作</span></span><br><span class=\"line\">        let <span class=\"selector-tag\">a</span> = x.currentTarget</span><br><span class=\"line\">        <span class=\"selector-tag\">a</span>.getAttribute(<span class=\"string\">'href'</span>)   <span class=\"comment\">//用户写什么，打什么。不像a.href是带http协议的。</span></span><br><span class=\"line\">        console.log(<span class=\"selector-tag\">a</span>.getAttribute(<span class=\"string\">'href'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要获取div距离顶部的距离\"><a href=\"#需要获取div距离顶部的距离\" class=\"headerlink\" title=\"需要获取div距离顶部的距离\"></a>需要获取div距离顶部的距离</h2><p><code>getBoundingClientRect</code>这个api可以返回一组矩形集合（数组）<br>一组用于描述边框的只读属性（left top right bottom）单位px<br>除了width和heigth外的属性都相对于视口左上角位置而言。</p>\n<p>计算边界矩形时，会考虑视口区域（或其他可滚动元素）内的滚动操作which means:<br>滚动的时候这个值会变，不是计算页面顶部而是计算视口顶部。<br><strong>不想让他变的话：</strong><br>给top和left加上当前滚动位置：<code>window.scrollX</code>和<code>window.scrollY</code>这样获取与当前滚动位置无关的常量值。<br>为兼容请使用：<code>window.pageXOffset</code>和<code>window.pageYOffset</code></p>\n<h2 id=\"这个才是我们需要的\"><a href=\"#这个才是我们需要的\" class=\"headerlink\" title=\"这个才是我们需要的\"></a>这个才是我们需要的</h2><p><code>element.offsetTop</code></p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aTags = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'nav.menu &gt; ul &gt; li &gt; a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;aTags.length; i++)&#123;</span><br><span class=\"line\">    aTags[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        x.preventDefault()          <span class=\"comment\">//阻止默认动作</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> a = x.currentTarget</span><br><span class=\"line\">        <span class=\"keyword\">let</span> href = a.getAttribute(<span class=\"string\">'href'</span>) <span class=\"comment\">//'#siteAbout'</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> element = <span class=\"built_in\">document</span>.querySelector(href)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"built_in\">rect</span> = element.getBoundingClientRect()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> top = element.offsetTop</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>,top<span class=\"number\">-80</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结一下\"><a href=\"#6-总结一下\" class=\"headerlink\" title=\"6.总结一下\"></a>6.总结一下</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setTimeout</span><span class=\"params\">()</span></span>        <span class=\"comment\">//设置延迟</span></span><br><span class=\"line\">window<span class=\"selector-class\">.onscroll</span> <span class=\"comment\">//滚动时触发</span></span><br><span class=\"line\">window<span class=\"selector-class\">.scrollY</span>      <span class=\"comment\">//获取滚动高度</span></span><br><span class=\"line\">document.querySelectorALL()   <span class=\"comment\">//接收一个选择器，获取选择器的所有元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.onmouseenter</span>   <span class=\"comment\">//鼠标进入元素的时候触发函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.onmouseleave</span>       <span class=\"comment\">//鼠标离开元素的时候触发函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.preventDefault</span> <span class=\"comment\">//调用它就不会有默认的动作了</span></span><br><span class=\"line\">.getAttribute()     <span class=\"comment\">//获取用户在元素上写的原文（不加HTTP协议）</span></span><br><span class=\"line\">document.querySelector()      <span class=\"comment\">//只会获取到第一个元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.offsetTop</span>      <span class=\"comment\">//获取元素距离页面顶部的像素数。</span></span><br><span class=\"line\">window.scrollTo(X,Y)    <span class=\"comment\">//滑动到某个位置X：左右 Y：上下。改成0就是不会划。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-用js做动画\"><a href=\"#7-用js做动画\" class=\"headerlink\" title=\"7.用js做动画\"></a>7.用js做动画</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#div1&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div1<span class=\"selector-class\">.style</span><span class=\"selector-class\">.position</span> = <span class=\"string\">'relative'</span></span><br><span class=\"line\">div1<span class=\"selector-class\">.style</span><span class=\"selector-class\">.left</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> id = setInterval( ()=&gt; &#123;</span><br><span class=\"line\">\tn = n+<span class=\"number\">10</span></span><br><span class=\"line\">\tdiv1<span class=\"selector-class\">.style</span><span class=\"selector-class\">.left</span> = n + <span class=\"string\">'px'</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&gt;=<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\twindow.clearInterval(id)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,<span class=\"number\">40</span>)</span><br></pre></td></tr></table></figure>\n<p>通过每秒动很多下，让人感觉它是个动画。<br><code>.setInterval</code>让他按延迟一直动<br><code>.setTimeout</code>让他延迟几秒后动一下<br><code>window.clearInterval(id)</code>让他在条件下停止</p>\n<h1 id=\"8-console-log调试大法\"><a href=\"#8-console-log调试大法\" class=\"headerlink\" title=\"8.console.log调试大法\"></a>8.console.log调试大法</h1><p>发现bug的时候，请console.log相关变量<br>看看哪个值和想象中不一样。</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span> = <span class=\"number\">25</span> //一共动多少次</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">duration</span> = <span class=\"number\">500</span> / n  //多长时间动一次</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">currentTop</span> = window.scrollY</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">targetTop</span> = top - <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">distance</span> = (targetTop - currentTop)/ n</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">i</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">id</span> = setInterval(()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"attr\">i===n)&#123;</span></span><br><span class=\"line\">    window.clearInterval(id)</span><br><span class=\"line\">    return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">i</span> = i + <span class=\"number\">1</span></span><br><span class=\"line\">    window.scrollTo(<span class=\"number\">0</span>,currentTop + distance * i)</span><br><span class=\"line\">&#125;,duration)</span><br></pre></td></tr></table></figure>\n<p>平滑的滚屏，但是还不够平滑。</p>\n<h2 id=\"我们需要神奇的tween-js\"><a href=\"#我们需要神奇的tween-js\" class=\"headerlink\" title=\"我们需要神奇的tween.js\"></a>我们需要神奇的tween.js</h2><p>缓动<br>要调用他需要cdnjs(google it)<br>这个库还是蛮好的。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">            requestAnimationFrame(animate);    <span class=\"comment\">//请求动画帧数（问浏览器这台机器可以让你有多少FPS）</span></span><br><span class=\"line\">            TWEEN.update(time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        requestAnimationFrame(animate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///////////////////////tween文档让加的告诉我们间隔多少毫秒动一次///////////////////////////</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;aTags.length; i++)&#123;</span><br><span class=\"line\">            aTags[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">                x.preventDefault()          <span class=\"comment\">//阻止默认动作</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> a = x.currentTarget</span><br><span class=\"line\">                <span class=\"keyword\">let</span> href = a.getAttribute(<span class=\"string\">'href'</span>) <span class=\"comment\">//'#siteAbout'</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> element = <span class=\"built_in\">document</span>.querySelector(href)</span><br><span class=\"line\">                <span class=\"keyword\">let</span> <span class=\"built_in\">rect</span> = element.getBoundingClientRect()</span><br><span class=\"line\">                <span class=\"keyword\">let</span> top = element.offsetTop</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">let</span> currentTop = <span class=\"built_in\">window</span>.scrollY</span><br><span class=\"line\">                <span class=\"keyword\">let</span> targetTop = top - <span class=\"number\">80</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> s = targetTop - currentTop              <span class=\"comment\">//路程</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> t = <span class=\"built_in\">Math</span>.abs((s/<span class=\"number\">100</span>)*<span class=\"number\">300</span>)           <span class=\"comment\">//时间（绝对值）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(t&gt;<span class=\"number\">500</span>)&#123;t = <span class=\"number\">500</span>&#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> coords = &#123; <span class=\"attribute\">y</span>: currentTop &#125;;         <span class=\"comment\">//初始位置</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> tween = <span class=\"keyword\">new</span> TWEEN.Tween(coords)         <span class=\"comment\">//初始位置</span></span><br><span class=\"line\">                    .to(&#123; <span class=\"attribute\">y</span>: targetTop&#125;, t)             <span class=\"comment\">//结束位置，时间（不能使负值）</span></span><br><span class=\"line\">                    .easing(TWEEN.Easing.Quadratic.InOut)   <span class=\"comment\">//缓动类型</span></span><br><span class=\"line\">                    .onUpdate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;             <span class=\"comment\">//在这里coords.y已经变了</span></span><br><span class=\"line\">                        <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>,coords.y)         <span class=\"comment\">//如何更新界面（向下滚动coords.y）</span></span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    .start();       <span class=\"comment\">//开始缓动</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>通过tween.js来计算滚动速度<br>Math.abs()来得出绝对值</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-关于JS找兄弟\"><a href=\"#1-关于JS找兄弟\" class=\"headerlink\" title=\"1.关于JS找兄弟\"></a>1.关于JS找兄弟</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            siteWelcome.classList.remove(<span class=\"string\">'active'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;,3000)</span></span><br><span class=\"line\"><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.scrollY &gt; <span class=\"number\">0</span>)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            topNavBar.classList.add(<span class=\"string\">'sticky'</span>)</span></span><br><span class=\"line\"><span class=\"actionscript\">        &#125;<span class=\"keyword\">else</span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            topNavBar.classList.remove(<span class=\"string\">'sticky'</span>)                </span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> aTags = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">'menuTigger'</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;aTags.length; i++)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">        aTags[i].onmouseenter = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> a = x.currentTarget</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> brother = a.nextSibling             <span class=\"comment\">//这种找兄弟...真的毛病多。</span></span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">while</span>(brother.tagName !== <span class=\"string\">'UL'</span>)&#123;   <span class=\"comment\">//nodeType去查文档，表达了不同元素节点。 1是元素节点 3是文字 PS:为什么大写UL，因为brother.tagName会返回一个大写的UL。</span></span></span><br><span class=\"line\"><span class=\"actionscript\">                brother = brother.nextSibling    <span class=\"comment\">//递归找节点，不是节点继续找。</span></span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">            brother.classList.add(<span class=\"string\">'active'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">        aTags[i].onmouseleave = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(x)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> a = x.currentTarget</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> brother = a.nextSibling</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">while</span>(brother.tagName !== <span class=\"string\">'UL'</span>)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                brother = brother.nextSibling</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">            brother.classList.remove(<span class=\"string\">'active'</span>)</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"找父级\"><a href=\"#找父级\" class=\"headerlink\" title=\"找父级\"></a>找父级</h2><p><code>.parentNode</code></p>\n<h1 id=\"2-关于不找兄弟直接监听父级元素\"><a href=\"#2-关于不找兄弟直接监听父级元素\" class=\"headerlink\" title=\"2.关于不找兄弟直接监听父级元素\"></a>2.关于不找兄弟直接监听父级元素</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let liTags = document.getElementsByClassName(<span class=\"string\">'menuTigger'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseenter</span> = function(x)&#123;</span><br><span class=\"line\">        let <span class=\"selector-tag\">li</span> = x.currentTarget</span><br><span class=\"line\">        let brother = <span class=\"selector-tag\">li</span>.getElementsByTagName(<span class=\"string\">'ul'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        brother<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseleave</span> = function(x)&#123;</span><br><span class=\"line\">        let <span class=\"selector-tag\">li</span> = x.currentTarget</span><br><span class=\"line\">        let brother = <span class=\"selector-tag\">li</span>.getElementsByTagName(<span class=\"string\">'ul'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">        brother<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"3-既然a和ul都要active，那我为什么不把他们的父元素active呢？\"><a href=\"#3-既然a和ul都要active，那我为什么不把他们的父元素active呢？\" class=\"headerlink\" title=\"3.既然a和ul都要active，那我为什么不把他们的父元素active呢？\"></a>3.既然a和ul都要active，那我为什么不把他们的父元素active呢？</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let liTags = document.getElementsByClassName(<span class=\"string\">'menuTigger'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseenter</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseleave</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(<span class=\"string\">'active'</span>)            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"4-不想每个都加-menuTigger那么我们就加个选择器吧\"><a href=\"#4-不想每个都加-menuTigger那么我们就加个选择器吧\" class=\"headerlink\" title=\"4.不想每个都加.menuTigger那么我们就加个选择器吧\"></a>4.不想每个都加.menuTigger那么我们就加个选择器吧</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let liTags = document.querySelectorAll(<span class=\"string\">'nav.menu &gt; ul &gt; li'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i=<span class=\"number\">0</span>; i&lt;liTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseenter</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(<span class=\"string\">'active'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    liTags[i]<span class=\"selector-class\">.onmouseleave</span> = function(x)&#123;</span><br><span class=\"line\">        x<span class=\"selector-class\">.currentTarget</span><span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(<span class=\"string\">'active'</span>)            </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>给nav一个.menu的class然后给他一个选择器，其中<code>querySelectorALL</code>就可以啦</p>\n<h1 id=\"5-关于调整锚点\"><a href=\"#5-关于调整锚点\" class=\"headerlink\" title=\"5.关于调整锚点\"></a>5.关于调整锚点</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let aTags = document.querySelectorAll(<span class=\"string\">'nav.menu &gt; ul &gt; li &gt; a'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">for</span><span class=\"params\">(let i = <span class=\"number\">0</span>; i&lt;aTags.length; i++)</span></span>&#123;</span><br><span class=\"line\">    aTags[i]<span class=\"selector-class\">.onclick</span> = function(x)&#123;</span><br><span class=\"line\">        x.preventDefault()          <span class=\"comment\">//阻止默认动作</span></span><br><span class=\"line\">        let <span class=\"selector-tag\">a</span> = x.currentTarget</span><br><span class=\"line\">        <span class=\"selector-tag\">a</span>.getAttribute(<span class=\"string\">'href'</span>)   <span class=\"comment\">//用户写什么，打什么。不像a.href是带http协议的。</span></span><br><span class=\"line\">        console.log(<span class=\"selector-tag\">a</span>.getAttribute(<span class=\"string\">'href'</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"需要获取div距离顶部的距离\"><a href=\"#需要获取div距离顶部的距离\" class=\"headerlink\" title=\"需要获取div距离顶部的距离\"></a>需要获取div距离顶部的距离</h2><p><code>getBoundingClientRect</code>这个api可以返回一组矩形集合（数组）<br>一组用于描述边框的只读属性（left top right bottom）单位px<br>除了width和heigth外的属性都相对于视口左上角位置而言。</p>\n<p>计算边界矩形时，会考虑视口区域（或其他可滚动元素）内的滚动操作which means:<br>滚动的时候这个值会变，不是计算页面顶部而是计算视口顶部。<br><strong>不想让他变的话：</strong><br>给top和left加上当前滚动位置：<code>window.scrollX</code>和<code>window.scrollY</code>这样获取与当前滚动位置无关的常量值。<br>为兼容请使用：<code>window.pageXOffset</code>和<code>window.pageYOffset</code></p>\n<h2 id=\"这个才是我们需要的\"><a href=\"#这个才是我们需要的\" class=\"headerlink\" title=\"这个才是我们需要的\"></a>这个才是我们需要的</h2><p><code>element.offsetTop</code></p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aTags = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'nav.menu &gt; ul &gt; li &gt; a'</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;aTags.length; i++)&#123;</span><br><span class=\"line\">    aTags[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">        x.preventDefault()          <span class=\"comment\">//阻止默认动作</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> a = x.currentTarget</span><br><span class=\"line\">        <span class=\"keyword\">let</span> href = a.getAttribute(<span class=\"string\">'href'</span>) <span class=\"comment\">//'#siteAbout'</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> element = <span class=\"built_in\">document</span>.querySelector(href)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> <span class=\"built_in\">rect</span> = element.getBoundingClientRect()</span><br><span class=\"line\">        <span class=\"keyword\">let</span> top = element.offsetTop</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>,top<span class=\"number\">-80</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"6-总结一下\"><a href=\"#6-总结一下\" class=\"headerlink\" title=\"6.总结一下\"></a>6.总结一下</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">setTimeout</span><span class=\"params\">()</span></span>        <span class=\"comment\">//设置延迟</span></span><br><span class=\"line\">window<span class=\"selector-class\">.onscroll</span> <span class=\"comment\">//滚动时触发</span></span><br><span class=\"line\">window<span class=\"selector-class\">.scrollY</span>      <span class=\"comment\">//获取滚动高度</span></span><br><span class=\"line\">document.querySelectorALL()   <span class=\"comment\">//接收一个选择器，获取选择器的所有元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.onmouseenter</span>   <span class=\"comment\">//鼠标进入元素的时候触发函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.onmouseleave</span>       <span class=\"comment\">//鼠标离开元素的时候触发函数</span></span><br><span class=\"line\"><span class=\"selector-class\">.preventDefault</span> <span class=\"comment\">//调用它就不会有默认的动作了</span></span><br><span class=\"line\">.getAttribute()     <span class=\"comment\">//获取用户在元素上写的原文（不加HTTP协议）</span></span><br><span class=\"line\">document.querySelector()      <span class=\"comment\">//只会获取到第一个元素</span></span><br><span class=\"line\"><span class=\"selector-class\">.offsetTop</span>      <span class=\"comment\">//获取元素距离页面顶部的像素数。</span></span><br><span class=\"line\">window.scrollTo(X,Y)    <span class=\"comment\">//滑动到某个位置X：左右 Y：上下。改成0就是不会划。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"7-用js做动画\"><a href=\"#7-用js做动画\" class=\"headerlink\" title=\"7.用js做动画\"></a>7.用js做动画</h1><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#div1&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">div1<span class=\"selector-class\">.style</span><span class=\"selector-class\">.position</span> = <span class=\"string\">'relative'</span></span><br><span class=\"line\">div1<span class=\"selector-class\">.style</span><span class=\"selector-class\">.left</span> = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> n = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> id = setInterval( ()=&gt; &#123;</span><br><span class=\"line\">\tn = n+<span class=\"number\">10</span></span><br><span class=\"line\">\tdiv1<span class=\"selector-class\">.style</span><span class=\"selector-class\">.left</span> = n + <span class=\"string\">'px'</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n&gt;=<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">\t\twindow.clearInterval(id)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,<span class=\"number\">40</span>)</span><br></pre></td></tr></table></figure>\n<p>通过每秒动很多下，让人感觉它是个动画。<br><code>.setInterval</code>让他按延迟一直动<br><code>.setTimeout</code>让他延迟几秒后动一下<br><code>window.clearInterval(id)</code>让他在条件下停止</p>\n<h1 id=\"8-console-log调试大法\"><a href=\"#8-console-log调试大法\" class=\"headerlink\" title=\"8.console.log调试大法\"></a>8.console.log调试大法</h1><p>发现bug的时候，请console.log相关变量<br>看看哪个值和想象中不一样。</p>\n<figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">n</span> = <span class=\"number\">25</span> //一共动多少次</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">duration</span> = <span class=\"number\">500</span> / n  //多长时间动一次</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">currentTop</span> = window.scrollY</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">targetTop</span> = top - <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">distance</span> = (targetTop - currentTop)/ n</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">i</span> = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">id</span> = setInterval(()=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"attr\">i===n)&#123;</span></span><br><span class=\"line\">    window.clearInterval(id)</span><br><span class=\"line\">    return</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attr\">i</span> = i + <span class=\"number\">1</span></span><br><span class=\"line\">    window.scrollTo(<span class=\"number\">0</span>,currentTop + distance * i)</span><br><span class=\"line\">&#125;,duration)</span><br></pre></td></tr></table></figure>\n<p>平滑的滚屏，但是还不够平滑。</p>\n<h2 id=\"我们需要神奇的tween-js\"><a href=\"#我们需要神奇的tween-js\" class=\"headerlink\" title=\"我们需要神奇的tween.js\"></a>我们需要神奇的tween.js</h2><p>缓动<br>要调用他需要cdnjs(google it)<br>这个库还是蛮好的。</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">animate</span>(<span class=\"params\">time</span>) </span>&#123;</span><br><span class=\"line\">            requestAnimationFrame(animate);    <span class=\"comment\">//请求动画帧数（问浏览器这台机器可以让你有多少FPS）</span></span><br><span class=\"line\">            TWEEN.update(time);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        requestAnimationFrame(animate);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///////////////////////tween文档让加的告诉我们间隔多少毫秒动一次///////////////////////////</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt;aTags.length; i++)&#123;</span><br><span class=\"line\">            aTags[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>)</span>&#123;</span><br><span class=\"line\">                x.preventDefault()          <span class=\"comment\">//阻止默认动作</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> a = x.currentTarget</span><br><span class=\"line\">                <span class=\"keyword\">let</span> href = a.getAttribute(<span class=\"string\">'href'</span>) <span class=\"comment\">//'#siteAbout'</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> element = <span class=\"built_in\">document</span>.querySelector(href)</span><br><span class=\"line\">                <span class=\"keyword\">let</span> <span class=\"built_in\">rect</span> = element.getBoundingClientRect()</span><br><span class=\"line\">                <span class=\"keyword\">let</span> top = element.offsetTop</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">let</span> currentTop = <span class=\"built_in\">window</span>.scrollY</span><br><span class=\"line\">                <span class=\"keyword\">let</span> targetTop = top - <span class=\"number\">80</span></span><br><span class=\"line\">                <span class=\"keyword\">let</span> s = targetTop - currentTop              <span class=\"comment\">//路程</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> t = <span class=\"built_in\">Math</span>.abs((s/<span class=\"number\">100</span>)*<span class=\"number\">300</span>)           <span class=\"comment\">//时间（绝对值）</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(t&gt;<span class=\"number\">500</span>)&#123;t = <span class=\"number\">500</span>&#125;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> coords = &#123; <span class=\"attribute\">y</span>: currentTop &#125;;         <span class=\"comment\">//初始位置</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> tween = <span class=\"keyword\">new</span> TWEEN.Tween(coords)         <span class=\"comment\">//初始位置</span></span><br><span class=\"line\">                    .to(&#123; <span class=\"attribute\">y</span>: targetTop&#125;, t)             <span class=\"comment\">//结束位置，时间（不能使负值）</span></span><br><span class=\"line\">                    .easing(TWEEN.Easing.Quadratic.InOut)   <span class=\"comment\">//缓动类型</span></span><br><span class=\"line\">                    .onUpdate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;             <span class=\"comment\">//在这里coords.y已经变了</span></span><br><span class=\"line\">                        <span class=\"built_in\">window</span>.scrollTo(<span class=\"number\">0</span>,coords.y)         <span class=\"comment\">//如何更新界面（向下滚动coords.y）</span></span><br><span class=\"line\">                    &#125;)</span><br><span class=\"line\">                    .start();       <span class=\"comment\">//开始缓动</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p>通过tween.js来计算滚动速度<br>Math.abs()来得出绝对值</p>\n"},{"title":"JavaScript-类型","date":"2018-04-11T02:10:04.000Z","_content":"# 1.首先要搞清楚什么是内存\n干吗用的？存东西用的。通电存东西，断电就GG。\n外存没有内存快\n最快的外存不就是SSD嘛，因为它能接近内存的速度。\n机械硬盘，就很容易坏，十年基本就坏了。\nSSD，不容易坏，但是一坏就全坏了。\n## I.它是怎么工作的\n### i.举个例子\n假设内存有2G\n开机\n操作系统 512M\n浏览器 1G （浏览器真的很占内存）\n假设浏览器两个页面\n\n```\n页面1（100M）\n        HTML+CSS+JS+网络HTTP+其他 \n页面2（100M）\n        ...\n```\n\n假设JS分到了100M\n我们写了一个`var a = 1`\n小心翼翼分成两个大区\n\n```     \n代码区\n        a\n        \n数据区\n        1\n```\n\n如果写复杂点\n\n```\nvar a = 1\nvar b = 'Oracle'\nb = a\nvar o = {\n        name:'Oracle',\n        age: 24\n}\nvar c = true\no.gender = 'male'\nvar o2 = {\n        name: 'Protoss'\n}\no2 = o\n第一步：变量提升，把var都放在前面\n之后依次执行\n```\n\n其实数据区也分为两个——\nStack（栈）和Heap（堆）\n\n```\nStack（栈内存）\n        a:64位浮点数储存a\n        b:64位浮点数储存b\n        b=a:把a存的东西，覆盖到b上\n        c:第一位为1后面全是0存一个true\n        var o ={}:存一个地址ADDR 100 //去Heap（堆内存）找\n        o.gender = 'male':找到o的地址（ADDR 100）把它加进去。\n        var o2 = {}:和o一样存一个地址ADDR 200\n        o2 = o: 和b = a的操作一样，不一样的是把o的地址给o2\n                o2的ADDR 200变成了ADDR 100\n\n\nHeap（堆内存）\n        ADDR 100\n                name:'Oracle'\n                age: 24\n                /////////////\n                gender: 'male'\n        ADDR 200\n                name:'protoss'\n```\n\n这一套操作\n### ii.数据\n数字：64位\n字符：16位（ES3）\n值：\n**简单**:存Stack\n**复杂**(obj):存Heap地址（还是存在Stack里面）\n### iii.引用\nobject存入ADDR 100\n就可以称object是对象的**引用**\n所有变量和对象的**关系**，都是**引用关系**\n### iv.存在对象问题的时候，走一遍i里的流程就清楚了\nPS：连续赋值从右往左顺序拆开写。\n## II.垃圾回收\nGC\n如果一个`对象`**没有被引用**\n它就是**垃圾**\n将被回收\n### i.例\n\n```\nvar a = {name:'a'}\nvar b = {name:'b'}\na = b\n```\n\n这时候，b和a指向了同一个ADDR\n那么a原来的ADDR就变成了垃圾\n**没人罩着，就要被干掉...**\n### ii.IE有个BUG\n如果把页面关了(body没了，他引用的地址断了)\n地址之间互相引用，但不和外部联系\n他们本应该被清掉\n但是（尤其IE6）IE里，你只要不关掉整个IE，他们会一直存着。\n垃圾一直存着...内存boom。\n所以需要在页面关闭之前执行：\n\n```\nwindow.onunload = function(){\n        document.body.onclick = null\n}\n//然而需要把所有的监听的函数都设为null，需要写很多行。\n```\n\n这就是传说中的——内存泄漏：\n由于浏览器的BUG,使得该被标记为垃圾的东西，没有被标记为垃圾。\n# 2.深拷贝？浅拷贝？\n## I.深拷贝\n\n```\nvar a = 1\nvar b = a\nb = 2\n//a = 1不改变\n```\n\nb的改变不影响a\n这就是深拷贝\n基本类型 赋值 就是深拷贝\n## II.浅拷贝\n\n```\nvar a = {\n        name: 'a'\n}\nvar b = a\nb.name = 'b'\na.name // 也是b了\n```\n\n指向同一个ADDR改变地址对应的内容后\na也变了。\n这就是浅拷贝。\n# 3.类型互相转换\n## I.方法\n### i.转字符串`.toString`\n`null`不可以，会报错\n`undefined`不可以，会报错\n`object`并不能得到想要的`key:value`只会得到`[obj,Obj]`\n\n我们热爱的`console.log`就是这个原理\n如果你`console.log`的东西不是字符串，他会自动加上一个`toString`\n\n#### `.toString`太长了老司机怎么转的？\n数字：加上一个空字符串就好了。\n`1 + ''`\n布尔：加上一个空字符串就好了。\n`true + ''`\n顺序可反。\n而且`'' + null`和`'' + undefined`也可以哟\n\n#### 这时候就引出一个问题\n`1+1`等于2\n`1 + '1'`算什么\n加号会优先加相同类型的东西，所以他会先把数字变成字符串。\n\n#### 全局方法`window.String()`\n把不是字符串的东西，变成字符串。（可以变`null`和`undefined`）\n\n#### 所以最方便的转字符串方法是加上一个空字符串\n\n### ii.转布尔`Boolean()`\n字符串:  `Boolean(1) //true`\n        `Boolean(0) //false`\n        `Boolean(2) //true`\n        `Boolean( ) //true`\nnull:   `Boolean(null) //false`\nundefined: `Boolean(undefined) //false`\n对象:    `Boolean({}) //true`\n        `Boolean({name:'Oracle'})  //true`\n\n#### 这个API好长...\n`!`可以取反\n那么取反两次不就是原来的吗\n\n```\n!!null //false\n!!0 //false\n!!{} //true\n!!{name:'Oracle'} //true\n```\n\n#### 所有类型都可以变成布尔但是好难记哦\n只有五个特殊的\nnumber： 只有两个是false`0`和`NaN`\nString： 只有空字符串是`false`其他全是`true`\nnull： 就一个值，`false`\nundefined：就一个值`false`\nobject：都是`true`所有的数组和函数\n\n也就是有五个`falsy`值\n`0` \n`NaN` \n`''` \n`null` \n`undefined`\n还有个`false`因为他本来就是`false`\n### iii.转number\n#### 朴实方法`Number('1')`\n#### 全局方法`parseInt('1',10)`\n`10`代表是看做十进制转换\n但是`parseInt('011')  //11`\n因为后面的参数没写，所以当成10进制。\n用它转非数字`parseInt('s') //NaN`\n数字非数字混合 `parseInt('1s') //1`\n所以得到他的规则：从头开始解析能解析的，一旦遇到不能解析的，就返回。\n#### 有浮点数的话`parseFloat('1.23')`\n`parse`是解析\n#### `'1'-0`骚方法（最常用）\n任何一个东西-0就会得到一个`number`\n#### 取正`+ '1'`更骚的方法\n负数也可以取正？`+ '-1'`这个是可以的，结果还是`-1`。\n### iv.转object\n","source":"_posts/JavaScript-类型.md","raw":"---\ntitle: JavaScript-类型\ndate: 2018-04-11 10:10:04\ntags: JS\n---\n# 1.首先要搞清楚什么是内存\n干吗用的？存东西用的。通电存东西，断电就GG。\n外存没有内存快\n最快的外存不就是SSD嘛，因为它能接近内存的速度。\n机械硬盘，就很容易坏，十年基本就坏了。\nSSD，不容易坏，但是一坏就全坏了。\n## I.它是怎么工作的\n### i.举个例子\n假设内存有2G\n开机\n操作系统 512M\n浏览器 1G （浏览器真的很占内存）\n假设浏览器两个页面\n\n```\n页面1（100M）\n        HTML+CSS+JS+网络HTTP+其他 \n页面2（100M）\n        ...\n```\n\n假设JS分到了100M\n我们写了一个`var a = 1`\n小心翼翼分成两个大区\n\n```     \n代码区\n        a\n        \n数据区\n        1\n```\n\n如果写复杂点\n\n```\nvar a = 1\nvar b = 'Oracle'\nb = a\nvar o = {\n        name:'Oracle',\n        age: 24\n}\nvar c = true\no.gender = 'male'\nvar o2 = {\n        name: 'Protoss'\n}\no2 = o\n第一步：变量提升，把var都放在前面\n之后依次执行\n```\n\n其实数据区也分为两个——\nStack（栈）和Heap（堆）\n\n```\nStack（栈内存）\n        a:64位浮点数储存a\n        b:64位浮点数储存b\n        b=a:把a存的东西，覆盖到b上\n        c:第一位为1后面全是0存一个true\n        var o ={}:存一个地址ADDR 100 //去Heap（堆内存）找\n        o.gender = 'male':找到o的地址（ADDR 100）把它加进去。\n        var o2 = {}:和o一样存一个地址ADDR 200\n        o2 = o: 和b = a的操作一样，不一样的是把o的地址给o2\n                o2的ADDR 200变成了ADDR 100\n\n\nHeap（堆内存）\n        ADDR 100\n                name:'Oracle'\n                age: 24\n                /////////////\n                gender: 'male'\n        ADDR 200\n                name:'protoss'\n```\n\n这一套操作\n### ii.数据\n数字：64位\n字符：16位（ES3）\n值：\n**简单**:存Stack\n**复杂**(obj):存Heap地址（还是存在Stack里面）\n### iii.引用\nobject存入ADDR 100\n就可以称object是对象的**引用**\n所有变量和对象的**关系**，都是**引用关系**\n### iv.存在对象问题的时候，走一遍i里的流程就清楚了\nPS：连续赋值从右往左顺序拆开写。\n## II.垃圾回收\nGC\n如果一个`对象`**没有被引用**\n它就是**垃圾**\n将被回收\n### i.例\n\n```\nvar a = {name:'a'}\nvar b = {name:'b'}\na = b\n```\n\n这时候，b和a指向了同一个ADDR\n那么a原来的ADDR就变成了垃圾\n**没人罩着，就要被干掉...**\n### ii.IE有个BUG\n如果把页面关了(body没了，他引用的地址断了)\n地址之间互相引用，但不和外部联系\n他们本应该被清掉\n但是（尤其IE6）IE里，你只要不关掉整个IE，他们会一直存着。\n垃圾一直存着...内存boom。\n所以需要在页面关闭之前执行：\n\n```\nwindow.onunload = function(){\n        document.body.onclick = null\n}\n//然而需要把所有的监听的函数都设为null，需要写很多行。\n```\n\n这就是传说中的——内存泄漏：\n由于浏览器的BUG,使得该被标记为垃圾的东西，没有被标记为垃圾。\n# 2.深拷贝？浅拷贝？\n## I.深拷贝\n\n```\nvar a = 1\nvar b = a\nb = 2\n//a = 1不改变\n```\n\nb的改变不影响a\n这就是深拷贝\n基本类型 赋值 就是深拷贝\n## II.浅拷贝\n\n```\nvar a = {\n        name: 'a'\n}\nvar b = a\nb.name = 'b'\na.name // 也是b了\n```\n\n指向同一个ADDR改变地址对应的内容后\na也变了。\n这就是浅拷贝。\n# 3.类型互相转换\n## I.方法\n### i.转字符串`.toString`\n`null`不可以，会报错\n`undefined`不可以，会报错\n`object`并不能得到想要的`key:value`只会得到`[obj,Obj]`\n\n我们热爱的`console.log`就是这个原理\n如果你`console.log`的东西不是字符串，他会自动加上一个`toString`\n\n#### `.toString`太长了老司机怎么转的？\n数字：加上一个空字符串就好了。\n`1 + ''`\n布尔：加上一个空字符串就好了。\n`true + ''`\n顺序可反。\n而且`'' + null`和`'' + undefined`也可以哟\n\n#### 这时候就引出一个问题\n`1+1`等于2\n`1 + '1'`算什么\n加号会优先加相同类型的东西，所以他会先把数字变成字符串。\n\n#### 全局方法`window.String()`\n把不是字符串的东西，变成字符串。（可以变`null`和`undefined`）\n\n#### 所以最方便的转字符串方法是加上一个空字符串\n\n### ii.转布尔`Boolean()`\n字符串:  `Boolean(1) //true`\n        `Boolean(0) //false`\n        `Boolean(2) //true`\n        `Boolean( ) //true`\nnull:   `Boolean(null) //false`\nundefined: `Boolean(undefined) //false`\n对象:    `Boolean({}) //true`\n        `Boolean({name:'Oracle'})  //true`\n\n#### 这个API好长...\n`!`可以取反\n那么取反两次不就是原来的吗\n\n```\n!!null //false\n!!0 //false\n!!{} //true\n!!{name:'Oracle'} //true\n```\n\n#### 所有类型都可以变成布尔但是好难记哦\n只有五个特殊的\nnumber： 只有两个是false`0`和`NaN`\nString： 只有空字符串是`false`其他全是`true`\nnull： 就一个值，`false`\nundefined：就一个值`false`\nobject：都是`true`所有的数组和函数\n\n也就是有五个`falsy`值\n`0` \n`NaN` \n`''` \n`null` \n`undefined`\n还有个`false`因为他本来就是`false`\n### iii.转number\n#### 朴实方法`Number('1')`\n#### 全局方法`parseInt('1',10)`\n`10`代表是看做十进制转换\n但是`parseInt('011')  //11`\n因为后面的参数没写，所以当成10进制。\n用它转非数字`parseInt('s') //NaN`\n数字非数字混合 `parseInt('1s') //1`\n所以得到他的规则：从头开始解析能解析的，一旦遇到不能解析的，就返回。\n#### 有浮点数的话`parseFloat('1.23')`\n`parse`是解析\n#### `'1'-0`骚方法（最常用）\n任何一个东西-0就会得到一个`number`\n#### 取正`+ '1'`更骚的方法\n负数也可以取正？`+ '-1'`这个是可以的，结果还是`-1`。\n### iv.转object\n","slug":"JavaScript-类型","published":1,"updated":"2018-04-11T09:36:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3l000ct2g3aqw6ywht","content":"<h1 id=\"1-首先要搞清楚什么是内存\"><a href=\"#1-首先要搞清楚什么是内存\" class=\"headerlink\" title=\"1.首先要搞清楚什么是内存\"></a>1.首先要搞清楚什么是内存</h1><p>干吗用的？存东西用的。通电存东西，断电就GG。<br>外存没有内存快<br>最快的外存不就是SSD嘛，因为它能接近内存的速度。<br>机械硬盘，就很容易坏，十年基本就坏了。<br>SSD，不容易坏，但是一坏就全坏了。</p>\n<h2 id=\"I-它是怎么工作的\"><a href=\"#I-它是怎么工作的\" class=\"headerlink\" title=\"I.它是怎么工作的\"></a>I.它是怎么工作的</h2><h3 id=\"i-举个例子\"><a href=\"#i-举个例子\" class=\"headerlink\" title=\"i.举个例子\"></a>i.举个例子</h3><p>假设内存有2G<br>开机<br>操作系统 512M<br>浏览器 1G （浏览器真的很占内存）<br>假设浏览器两个页面</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">页面<span class=\"number\">1</span>（<span class=\"number\">100</span>M）</span><br><span class=\"line\">        HTML+CSS+JS+网络HTTP+其他 </span><br><span class=\"line\">页面<span class=\"number\">2</span>（<span class=\"number\">100</span>M）</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>假设JS分到了100M<br>我们写了一个<code>var a = 1</code><br>小心翼翼分成两个大区</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码区</span><br><span class=\"line\">        a</span><br><span class=\"line\">        </span><br><span class=\"line\">数据区</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果写复杂点</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = <span class=\"string\">'Oracle'</span></span><br><span class=\"line\"><span class=\"selector-tag\">b</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> o = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'Oracle'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> c = true</span><br><span class=\"line\">o<span class=\"selector-class\">.gender</span> = <span class=\"string\">'male'</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> o2 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Protoss'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o2 = o</span><br><span class=\"line\">第一步：变量提升，把var都放在前面</span><br><span class=\"line\">之后依次执行</span><br></pre></td></tr></table></figure>\n<p>其实数据区也分为两个——<br>Stack（栈）和Heap（堆）</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack（栈内存）</span><br><span class=\"line\">        <span class=\"selector-tag\">a</span>:<span class=\"number\">64</span>位浮点数储存a</span><br><span class=\"line\">        <span class=\"selector-tag\">b</span>:<span class=\"number\">64</span>位浮点数储存b</span><br><span class=\"line\">        b=<span class=\"selector-tag\">a</span>:把a存的东西，覆盖到b上</span><br><span class=\"line\">        c:第一位为<span class=\"number\">1</span>后面全是<span class=\"number\">0</span>存一个true</span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> o =&#123;&#125;:存一个地址ADDR <span class=\"number\">100</span> <span class=\"comment\">//去Heap（堆内存）找</span></span><br><span class=\"line\">        o<span class=\"selector-class\">.gender</span> = <span class=\"string\">'male'</span>:找到o的地址（ADDR <span class=\"number\">100</span>）把它加进去。</span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> o2 = &#123;&#125;:和o一样存一个地址ADDR <span class=\"number\">200</span></span><br><span class=\"line\">        o2 = o: 和<span class=\"selector-tag\">b</span> = a的操作一样，不一样的是把o的地址给o2</span><br><span class=\"line\">                o2的ADDR <span class=\"number\">200</span>变成了ADDR <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Heap（堆内存）</span><br><span class=\"line\">        ADDR <span class=\"number\">100</span></span><br><span class=\"line\">                name:<span class=\"string\">'Oracle'</span></span><br><span class=\"line\">                age: <span class=\"number\">24</span></span><br><span class=\"line\">                <span class=\"comment\">/////////////</span></span><br><span class=\"line\">                gender: <span class=\"string\">'male'</span></span><br><span class=\"line\">        ADDR <span class=\"number\">200</span></span><br><span class=\"line\">                name:<span class=\"string\">'protoss'</span></span><br></pre></td></tr></table></figure>\n<p>这一套操作</p>\n<h3 id=\"ii-数据\"><a href=\"#ii-数据\" class=\"headerlink\" title=\"ii.数据\"></a>ii.数据</h3><p>数字：64位<br>字符：16位（ES3）<br>值：<br><strong>简单</strong>:存Stack<br><strong>复杂</strong>(obj):存Heap地址（还是存在Stack里面）</p>\n<h3 id=\"iii-引用\"><a href=\"#iii-引用\" class=\"headerlink\" title=\"iii.引用\"></a>iii.引用</h3><p>object存入ADDR 100<br>就可以称object是对象的<strong>引用</strong><br>所有变量和对象的<strong>关系</strong>，都是<strong>引用关系</strong></p>\n<h3 id=\"iv-存在对象问题的时候，走一遍i里的流程就清楚了\"><a href=\"#iv-存在对象问题的时候，走一遍i里的流程就清楚了\" class=\"headerlink\" title=\"iv.存在对象问题的时候，走一遍i里的流程就清楚了\"></a>iv.存在对象问题的时候，走一遍i里的流程就清楚了</h3><p>PS：连续赋值从右往左顺序拆开写。</p>\n<h2 id=\"II-垃圾回收\"><a href=\"#II-垃圾回收\" class=\"headerlink\" title=\"II.垃圾回收\"></a>II.垃圾回收</h2><p>GC<br>如果一个<code>对象</code><strong>没有被引用</strong><br>它就是<strong>垃圾</strong><br>将被回收</p>\n<h3 id=\"i-例\"><a href=\"#i-例\" class=\"headerlink\" title=\"i.例\"></a>i.例</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = &#123;name:<span class=\"string\">'a'</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = &#123;name:<span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = b</span><br></pre></td></tr></table></figure>\n<p>这时候，b和a指向了同一个ADDR<br>那么a原来的ADDR就变成了垃圾<br><strong>没人罩着，就要被干掉…</strong></p>\n<h3 id=\"ii-IE有个BUG\"><a href=\"#ii-IE有个BUG\" class=\"headerlink\" title=\"ii.IE有个BUG\"></a>ii.IE有个BUG</h3><p>如果把页面关了(body没了，他引用的地址断了)<br>地址之间互相引用，但不和外部联系<br>他们本应该被清掉<br>但是（尤其IE6）IE里，你只要不关掉整个IE，他们会一直存着。<br>垃圾一直存着…内存boom。<br>所以需要在页面关闭之前执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onunload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//然而需要把所有的监听的函数都设为null，需要写很多行。</span></span><br></pre></td></tr></table></figure>\n<p>这就是传说中的——内存泄漏：<br>由于浏览器的BUG,使得该被标记为垃圾的东西，没有被标记为垃圾。</p>\n<h1 id=\"2-深拷贝？浅拷贝？\"><a href=\"#2-深拷贝？浅拷贝？\" class=\"headerlink\" title=\"2.深拷贝？浅拷贝？\"></a>2.深拷贝？浅拷贝？</h1><h2 id=\"I-深拷贝\"><a href=\"#I-深拷贝\" class=\"headerlink\" title=\"I.深拷贝\"></a>I.深拷贝</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">b</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//a = 1不改变</span></span><br></pre></td></tr></table></figure>\n<p>b的改变不影响a<br>这就是深拷贝<br>基本类型 赋值 就是深拷贝</p>\n<h2 id=\"II-浅拷贝\"><a href=\"#II-浅拷贝\" class=\"headerlink\" title=\"II.浅拷贝\"></a>II.浅拷贝</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">b</span><span class=\"selector-class\">.name</span> = <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.name</span> <span class=\"comment\">// 也是b了</span></span><br></pre></td></tr></table></figure>\n<p>指向同一个ADDR改变地址对应的内容后<br>a也变了。<br>这就是浅拷贝。</p>\n<h1 id=\"3-类型互相转换\"><a href=\"#3-类型互相转换\" class=\"headerlink\" title=\"3.类型互相转换\"></a>3.类型互相转换</h1><h2 id=\"I-方法\"><a href=\"#I-方法\" class=\"headerlink\" title=\"I.方法\"></a>I.方法</h2><h3 id=\"i-转字符串-toString\"><a href=\"#i-转字符串-toString\" class=\"headerlink\" title=\"i.转字符串.toString\"></a>i.转字符串<code>.toString</code></h3><p><code>null</code>不可以，会报错<br><code>undefined</code>不可以，会报错<br><code>object</code>并不能得到想要的<code>key:value</code>只会得到<code>[obj,Obj]</code></p>\n<p>我们热爱的<code>console.log</code>就是这个原理<br>如果你<code>console.log</code>的东西不是字符串，他会自动加上一个<code>toString</code></p>\n<h4 id=\"toString太长了老司机怎么转的？\"><a href=\"#toString太长了老司机怎么转的？\" class=\"headerlink\" title=\".toString太长了老司机怎么转的？\"></a><code>.toString</code>太长了老司机怎么转的？</h4><p>数字：加上一个空字符串就好了。<br><code>1 + &#39;&#39;</code><br>布尔：加上一个空字符串就好了。<br><code>true + &#39;&#39;</code><br>顺序可反。<br>而且<code>&#39;&#39; + null</code>和<code>&#39;&#39; + undefined</code>也可以哟</p>\n<h4 id=\"这时候就引出一个问题\"><a href=\"#这时候就引出一个问题\" class=\"headerlink\" title=\"这时候就引出一个问题\"></a>这时候就引出一个问题</h4><p><code>1+1</code>等于2<br><code>1 + &#39;1&#39;</code>算什么<br>加号会优先加相同类型的东西，所以他会先把数字变成字符串。</p>\n<h4 id=\"全局方法window-String\"><a href=\"#全局方法window-String\" class=\"headerlink\" title=\"全局方法window.String()\"></a>全局方法<code>window.String()</code></h4><p>把不是字符串的东西，变成字符串。（可以变<code>null</code>和<code>undefined</code>）</p>\n<h4 id=\"所以最方便的转字符串方法是加上一个空字符串\"><a href=\"#所以最方便的转字符串方法是加上一个空字符串\" class=\"headerlink\" title=\"所以最方便的转字符串方法是加上一个空字符串\"></a>所以最方便的转字符串方法是加上一个空字符串</h4><h3 id=\"ii-转布尔Boolean\"><a href=\"#ii-转布尔Boolean\" class=\"headerlink\" title=\"ii.转布尔Boolean()\"></a>ii.转布尔<code>Boolean()</code></h3><p>字符串:  <code>Boolean(1) //true</code><br>        <code>Boolean(0) //false</code><br>        <code>Boolean(2) //true</code><br>        <code>Boolean( ) //true</code><br>null:   <code>Boolean(null) //false</code><br>undefined: <code>Boolean(undefined) //false</code><br>对象:    <code>Boolean({}) //true</code><br>        <code>Boolean({name:&#39;Oracle&#39;})  //true</code></p>\n<h4 id=\"这个API好长…\"><a href=\"#这个API好长…\" class=\"headerlink\" title=\"这个API好长…\"></a>这个API好长…</h4><p><code>!</code>可以取反<br>那么取反两次不就是原来的吗</p>\n<figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!null //false</span><br><span class=\"line\">!!<span class=\"number\">0</span> //false</span><br><span class=\"line\">!!&#123;&#125; //true</span><br><span class=\"line\">!!&#123;name:'Oracle'&#125; //true</span><br></pre></td></tr></table></figure>\n<h4 id=\"所有类型都可以变成布尔但是好难记哦\"><a href=\"#所有类型都可以变成布尔但是好难记哦\" class=\"headerlink\" title=\"所有类型都可以变成布尔但是好难记哦\"></a>所有类型都可以变成布尔但是好难记哦</h4><p>只有五个特殊的<br>number： 只有两个是false<code>0</code>和<code>NaN</code><br>String： 只有空字符串是<code>false</code>其他全是<code>true</code><br>null： 就一个值，<code>false</code><br>undefined：就一个值<code>false</code><br>object：都是<code>true</code>所有的数组和函数</p>\n<p>也就是有五个<code>falsy</code>值<br><code>0</code><br><code>NaN</code><br><code>&#39;&#39;</code><br><code>null</code><br><code>undefined</code><br>还有个<code>false</code>因为他本来就是<code>false</code></p>\n<h3 id=\"iii-转number\"><a href=\"#iii-转number\" class=\"headerlink\" title=\"iii.转number\"></a>iii.转number</h3><h4 id=\"朴实方法Number-39-1-39\"><a href=\"#朴实方法Number-39-1-39\" class=\"headerlink\" title=\"朴实方法Number(&#39;1&#39;)\"></a>朴实方法<code>Number(&#39;1&#39;)</code></h4><h4 id=\"全局方法parseInt-39-1-39-10\"><a href=\"#全局方法parseInt-39-1-39-10\" class=\"headerlink\" title=\"全局方法parseInt(&#39;1&#39;,10)\"></a>全局方法<code>parseInt(&#39;1&#39;,10)</code></h4><p><code>10</code>代表是看做十进制转换<br>但是<code>parseInt(&#39;011&#39;)  //11</code><br>因为后面的参数没写，所以当成10进制。<br>用它转非数字<code>parseInt(&#39;s&#39;) //NaN</code><br>数字非数字混合 <code>parseInt(&#39;1s&#39;) //1</code><br>所以得到他的规则：从头开始解析能解析的，一旦遇到不能解析的，就返回。</p>\n<h4 id=\"有浮点数的话parseFloat-39-1-23-39\"><a href=\"#有浮点数的话parseFloat-39-1-23-39\" class=\"headerlink\" title=\"有浮点数的话parseFloat(&#39;1.23&#39;)\"></a>有浮点数的话<code>parseFloat(&#39;1.23&#39;)</code></h4><p><code>parse</code>是解析</p>\n<h4 id=\"39-1-39-0骚方法（最常用）\"><a href=\"#39-1-39-0骚方法（最常用）\" class=\"headerlink\" title=\"&#39;1&#39;-0骚方法（最常用）\"></a><code>&#39;1&#39;-0</code>骚方法（最常用）</h4><p>任何一个东西-0就会得到一个<code>number</code></p>\n<h4 id=\"取正-39-1-39-更骚的方法\"><a href=\"#取正-39-1-39-更骚的方法\" class=\"headerlink\" title=\"取正+ &#39;1&#39;更骚的方法\"></a>取正<code>+ &#39;1&#39;</code>更骚的方法</h4><p>负数也可以取正？<code>+ &#39;-1&#39;</code>这个是可以的，结果还是<code>-1</code>。</p>\n<h3 id=\"iv-转object\"><a href=\"#iv-转object\" class=\"headerlink\" title=\"iv.转object\"></a>iv.转object</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-首先要搞清楚什么是内存\"><a href=\"#1-首先要搞清楚什么是内存\" class=\"headerlink\" title=\"1.首先要搞清楚什么是内存\"></a>1.首先要搞清楚什么是内存</h1><p>干吗用的？存东西用的。通电存东西，断电就GG。<br>外存没有内存快<br>最快的外存不就是SSD嘛，因为它能接近内存的速度。<br>机械硬盘，就很容易坏，十年基本就坏了。<br>SSD，不容易坏，但是一坏就全坏了。</p>\n<h2 id=\"I-它是怎么工作的\"><a href=\"#I-它是怎么工作的\" class=\"headerlink\" title=\"I.它是怎么工作的\"></a>I.它是怎么工作的</h2><h3 id=\"i-举个例子\"><a href=\"#i-举个例子\" class=\"headerlink\" title=\"i.举个例子\"></a>i.举个例子</h3><p>假设内存有2G<br>开机<br>操作系统 512M<br>浏览器 1G （浏览器真的很占内存）<br>假设浏览器两个页面</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">页面<span class=\"number\">1</span>（<span class=\"number\">100</span>M）</span><br><span class=\"line\">        HTML+CSS+JS+网络HTTP+其他 </span><br><span class=\"line\">页面<span class=\"number\">2</span>（<span class=\"number\">100</span>M）</span><br><span class=\"line\">        ...</span><br></pre></td></tr></table></figure>\n<p>假设JS分到了100M<br>我们写了一个<code>var a = 1</code><br>小心翼翼分成两个大区</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码区</span><br><span class=\"line\">        a</span><br><span class=\"line\">        </span><br><span class=\"line\">数据区</span><br><span class=\"line\">        <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>如果写复杂点</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = <span class=\"string\">'Oracle'</span></span><br><span class=\"line\"><span class=\"selector-tag\">b</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> o = &#123;</span><br><span class=\"line\">        name:<span class=\"string\">'Oracle'</span>,</span><br><span class=\"line\">        age: <span class=\"number\">24</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> c = true</span><br><span class=\"line\">o<span class=\"selector-class\">.gender</span> = <span class=\"string\">'male'</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> o2 = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'Protoss'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">o2 = o</span><br><span class=\"line\">第一步：变量提升，把var都放在前面</span><br><span class=\"line\">之后依次执行</span><br></pre></td></tr></table></figure>\n<p>其实数据区也分为两个——<br>Stack（栈）和Heap（堆）</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack（栈内存）</span><br><span class=\"line\">        <span class=\"selector-tag\">a</span>:<span class=\"number\">64</span>位浮点数储存a</span><br><span class=\"line\">        <span class=\"selector-tag\">b</span>:<span class=\"number\">64</span>位浮点数储存b</span><br><span class=\"line\">        b=<span class=\"selector-tag\">a</span>:把a存的东西，覆盖到b上</span><br><span class=\"line\">        c:第一位为<span class=\"number\">1</span>后面全是<span class=\"number\">0</span>存一个true</span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> o =&#123;&#125;:存一个地址ADDR <span class=\"number\">100</span> <span class=\"comment\">//去Heap（堆内存）找</span></span><br><span class=\"line\">        o<span class=\"selector-class\">.gender</span> = <span class=\"string\">'male'</span>:找到o的地址（ADDR <span class=\"number\">100</span>）把它加进去。</span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> o2 = &#123;&#125;:和o一样存一个地址ADDR <span class=\"number\">200</span></span><br><span class=\"line\">        o2 = o: 和<span class=\"selector-tag\">b</span> = a的操作一样，不一样的是把o的地址给o2</span><br><span class=\"line\">                o2的ADDR <span class=\"number\">200</span>变成了ADDR <span class=\"number\">100</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Heap（堆内存）</span><br><span class=\"line\">        ADDR <span class=\"number\">100</span></span><br><span class=\"line\">                name:<span class=\"string\">'Oracle'</span></span><br><span class=\"line\">                age: <span class=\"number\">24</span></span><br><span class=\"line\">                <span class=\"comment\">/////////////</span></span><br><span class=\"line\">                gender: <span class=\"string\">'male'</span></span><br><span class=\"line\">        ADDR <span class=\"number\">200</span></span><br><span class=\"line\">                name:<span class=\"string\">'protoss'</span></span><br></pre></td></tr></table></figure>\n<p>这一套操作</p>\n<h3 id=\"ii-数据\"><a href=\"#ii-数据\" class=\"headerlink\" title=\"ii.数据\"></a>ii.数据</h3><p>数字：64位<br>字符：16位（ES3）<br>值：<br><strong>简单</strong>:存Stack<br><strong>复杂</strong>(obj):存Heap地址（还是存在Stack里面）</p>\n<h3 id=\"iii-引用\"><a href=\"#iii-引用\" class=\"headerlink\" title=\"iii.引用\"></a>iii.引用</h3><p>object存入ADDR 100<br>就可以称object是对象的<strong>引用</strong><br>所有变量和对象的<strong>关系</strong>，都是<strong>引用关系</strong></p>\n<h3 id=\"iv-存在对象问题的时候，走一遍i里的流程就清楚了\"><a href=\"#iv-存在对象问题的时候，走一遍i里的流程就清楚了\" class=\"headerlink\" title=\"iv.存在对象问题的时候，走一遍i里的流程就清楚了\"></a>iv.存在对象问题的时候，走一遍i里的流程就清楚了</h3><p>PS：连续赋值从右往左顺序拆开写。</p>\n<h2 id=\"II-垃圾回收\"><a href=\"#II-垃圾回收\" class=\"headerlink\" title=\"II.垃圾回收\"></a>II.垃圾回收</h2><p>GC<br>如果一个<code>对象</code><strong>没有被引用</strong><br>它就是<strong>垃圾</strong><br>将被回收</p>\n<h3 id=\"i-例\"><a href=\"#i-例\" class=\"headerlink\" title=\"i.例\"></a>i.例</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = &#123;name:<span class=\"string\">'a'</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = &#123;name:<span class=\"string\">'b'</span>&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">a</span> = b</span><br></pre></td></tr></table></figure>\n<p>这时候，b和a指向了同一个ADDR<br>那么a原来的ADDR就变成了垃圾<br><strong>没人罩着，就要被干掉…</strong></p>\n<h3 id=\"ii-IE有个BUG\"><a href=\"#ii-IE有个BUG\" class=\"headerlink\" title=\"ii.IE有个BUG\"></a>ii.IE有个BUG</h3><p>如果把页面关了(body没了，他引用的地址断了)<br>地址之间互相引用，但不和外部联系<br>他们本应该被清掉<br>但是（尤其IE6）IE里，你只要不关掉整个IE，他们会一直存着。<br>垃圾一直存着…内存boom。<br>所以需要在页面关闭之前执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onunload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">document</span>.body.onclick = <span class=\"literal\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//然而需要把所有的监听的函数都设为null，需要写很多行。</span></span><br></pre></td></tr></table></figure>\n<p>这就是传说中的——内存泄漏：<br>由于浏览器的BUG,使得该被标记为垃圾的东西，没有被标记为垃圾。</p>\n<h1 id=\"2-深拷贝？浅拷贝？\"><a href=\"#2-深拷贝？浅拷贝？\" class=\"headerlink\" title=\"2.深拷贝？浅拷贝？\"></a>2.深拷贝？浅拷贝？</h1><h2 id=\"I-深拷贝\"><a href=\"#I-深拷贝\" class=\"headerlink\" title=\"I.深拷贝\"></a>I.深拷贝</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">b</span> = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"comment\">//a = 1不改变</span></span><br></pre></td></tr></table></figure>\n<p>b的改变不影响a<br>这就是深拷贝<br>基本类型 赋值 就是深拷贝</p>\n<h2 id=\"II-浅拷贝\"><a href=\"#II-浅拷贝\" class=\"headerlink\" title=\"II.浅拷贝\"></a>II.浅拷贝</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">a</span> = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">'a'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">b</span> = a</span><br><span class=\"line\"><span class=\"selector-tag\">b</span><span class=\"selector-class\">.name</span> = <span class=\"string\">'b'</span></span><br><span class=\"line\"><span class=\"selector-tag\">a</span><span class=\"selector-class\">.name</span> <span class=\"comment\">// 也是b了</span></span><br></pre></td></tr></table></figure>\n<p>指向同一个ADDR改变地址对应的内容后<br>a也变了。<br>这就是浅拷贝。</p>\n<h1 id=\"3-类型互相转换\"><a href=\"#3-类型互相转换\" class=\"headerlink\" title=\"3.类型互相转换\"></a>3.类型互相转换</h1><h2 id=\"I-方法\"><a href=\"#I-方法\" class=\"headerlink\" title=\"I.方法\"></a>I.方法</h2><h3 id=\"i-转字符串-toString\"><a href=\"#i-转字符串-toString\" class=\"headerlink\" title=\"i.转字符串.toString\"></a>i.转字符串<code>.toString</code></h3><p><code>null</code>不可以，会报错<br><code>undefined</code>不可以，会报错<br><code>object</code>并不能得到想要的<code>key:value</code>只会得到<code>[obj,Obj]</code></p>\n<p>我们热爱的<code>console.log</code>就是这个原理<br>如果你<code>console.log</code>的东西不是字符串，他会自动加上一个<code>toString</code></p>\n<h4 id=\"toString太长了老司机怎么转的？\"><a href=\"#toString太长了老司机怎么转的？\" class=\"headerlink\" title=\".toString太长了老司机怎么转的？\"></a><code>.toString</code>太长了老司机怎么转的？</h4><p>数字：加上一个空字符串就好了。<br><code>1 + &#39;&#39;</code><br>布尔：加上一个空字符串就好了。<br><code>true + &#39;&#39;</code><br>顺序可反。<br>而且<code>&#39;&#39; + null</code>和<code>&#39;&#39; + undefined</code>也可以哟</p>\n<h4 id=\"这时候就引出一个问题\"><a href=\"#这时候就引出一个问题\" class=\"headerlink\" title=\"这时候就引出一个问题\"></a>这时候就引出一个问题</h4><p><code>1+1</code>等于2<br><code>1 + &#39;1&#39;</code>算什么<br>加号会优先加相同类型的东西，所以他会先把数字变成字符串。</p>\n<h4 id=\"全局方法window-String\"><a href=\"#全局方法window-String\" class=\"headerlink\" title=\"全局方法window.String()\"></a>全局方法<code>window.String()</code></h4><p>把不是字符串的东西，变成字符串。（可以变<code>null</code>和<code>undefined</code>）</p>\n<h4 id=\"所以最方便的转字符串方法是加上一个空字符串\"><a href=\"#所以最方便的转字符串方法是加上一个空字符串\" class=\"headerlink\" title=\"所以最方便的转字符串方法是加上一个空字符串\"></a>所以最方便的转字符串方法是加上一个空字符串</h4><h3 id=\"ii-转布尔Boolean\"><a href=\"#ii-转布尔Boolean\" class=\"headerlink\" title=\"ii.转布尔Boolean()\"></a>ii.转布尔<code>Boolean()</code></h3><p>字符串:  <code>Boolean(1) //true</code><br>        <code>Boolean(0) //false</code><br>        <code>Boolean(2) //true</code><br>        <code>Boolean( ) //true</code><br>null:   <code>Boolean(null) //false</code><br>undefined: <code>Boolean(undefined) //false</code><br>对象:    <code>Boolean({}) //true</code><br>        <code>Boolean({name:&#39;Oracle&#39;})  //true</code></p>\n<h4 id=\"这个API好长…\"><a href=\"#这个API好长…\" class=\"headerlink\" title=\"这个API好长…\"></a>这个API好长…</h4><p><code>!</code>可以取反<br>那么取反两次不就是原来的吗</p>\n<figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!null //false</span><br><span class=\"line\">!!<span class=\"number\">0</span> //false</span><br><span class=\"line\">!!&#123;&#125; //true</span><br><span class=\"line\">!!&#123;name:'Oracle'&#125; //true</span><br></pre></td></tr></table></figure>\n<h4 id=\"所有类型都可以变成布尔但是好难记哦\"><a href=\"#所有类型都可以变成布尔但是好难记哦\" class=\"headerlink\" title=\"所有类型都可以变成布尔但是好难记哦\"></a>所有类型都可以变成布尔但是好难记哦</h4><p>只有五个特殊的<br>number： 只有两个是false<code>0</code>和<code>NaN</code><br>String： 只有空字符串是<code>false</code>其他全是<code>true</code><br>null： 就一个值，<code>false</code><br>undefined：就一个值<code>false</code><br>object：都是<code>true</code>所有的数组和函数</p>\n<p>也就是有五个<code>falsy</code>值<br><code>0</code><br><code>NaN</code><br><code>&#39;&#39;</code><br><code>null</code><br><code>undefined</code><br>还有个<code>false</code>因为他本来就是<code>false</code></p>\n<h3 id=\"iii-转number\"><a href=\"#iii-转number\" class=\"headerlink\" title=\"iii.转number\"></a>iii.转number</h3><h4 id=\"朴实方法Number-39-1-39\"><a href=\"#朴实方法Number-39-1-39\" class=\"headerlink\" title=\"朴实方法Number(&#39;1&#39;)\"></a>朴实方法<code>Number(&#39;1&#39;)</code></h4><h4 id=\"全局方法parseInt-39-1-39-10\"><a href=\"#全局方法parseInt-39-1-39-10\" class=\"headerlink\" title=\"全局方法parseInt(&#39;1&#39;,10)\"></a>全局方法<code>parseInt(&#39;1&#39;,10)</code></h4><p><code>10</code>代表是看做十进制转换<br>但是<code>parseInt(&#39;011&#39;)  //11</code><br>因为后面的参数没写，所以当成10进制。<br>用它转非数字<code>parseInt(&#39;s&#39;) //NaN</code><br>数字非数字混合 <code>parseInt(&#39;1s&#39;) //1</code><br>所以得到他的规则：从头开始解析能解析的，一旦遇到不能解析的，就返回。</p>\n<h4 id=\"有浮点数的话parseFloat-39-1-23-39\"><a href=\"#有浮点数的话parseFloat-39-1-23-39\" class=\"headerlink\" title=\"有浮点数的话parseFloat(&#39;1.23&#39;)\"></a>有浮点数的话<code>parseFloat(&#39;1.23&#39;)</code></h4><p><code>parse</code>是解析</p>\n<h4 id=\"39-1-39-0骚方法（最常用）\"><a href=\"#39-1-39-0骚方法（最常用）\" class=\"headerlink\" title=\"&#39;1&#39;-0骚方法（最常用）\"></a><code>&#39;1&#39;-0</code>骚方法（最常用）</h4><p>任何一个东西-0就会得到一个<code>number</code></p>\n<h4 id=\"取正-39-1-39-更骚的方法\"><a href=\"#取正-39-1-39-更骚的方法\" class=\"headerlink\" title=\"取正+ &#39;1&#39;更骚的方法\"></a>取正<code>+ &#39;1&#39;</code>更骚的方法</h4><p>负数也可以取正？<code>+ &#39;-1&#39;</code>这个是可以的，结果还是<code>-1</code>。</p>\n<h3 id=\"iv-转object\"><a href=\"#iv-转object\" class=\"headerlink\" title=\"iv.转object\"></a>iv.转object</h3>"},{"title":"canvas画板","date":"2018-04-05T03:35:09.000Z","_content":"## 1.尝试用div画画\n```\n// 按下去鼠标\n    doucment.onmousedown = function(){\n        console.log(x)\n    }\n//动鼠标\n\tdocument.onmousemove = function(){\n    \tconsole.log(y)\n    }\n//松开鼠标\n\tdocument.onmouseup = function(){\n    \tconsole.log(1)\n    }\n```\n### 最好单独用div\n\t`<div id=\"canvas\"></div>`\n### 那么上面代码优化为\n```\n    var div = document.getElementById('canvas')\n    //按下鼠标\n    div.onmousedown = function(x){\n    \tvar x = a.clientX\n        var y = a.clientY\n        var divA = document.createElement('div')\n        divA.style = \"width: 6px; height: 6px;\"+\"background:black; border-radius: 3px;\"\n        div.appendChild(divA)\n        \"position: absolute; left: \"+(x-3) +\"px;\" + \"top: \"+(y-3)+\"px;\"\n    }\n    //动鼠标\n    div.onmousemove = function(y){\n    \t\n    }\n    //松开鼠标\n    div.onmouseup = function(z){\n    \tconsole.log(1)\n    }\n```\n### 小技巧（Flag）\n通过一个变量`var painting = false`\n全局变量的时候默认为false\n在按下去鼠标的时候`painting = true`\n移动鼠标div将其作为判断条件，如果 `if(painting){}`如果painting存在则继续\n在松开鼠标的时候改变变量painting为false\n\n## **2.然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas**\n### canvas不能用CSS控制宽高\n```\ncontext.strokesStyle描边\ncontext.strokeRect(xx,yy,xxx,yyy)初始坐标，结束坐标\ncontext.fillStyle = '颜色';填充\ncontext.fillStyle(xx,yy,xxx,yyy)初始坐标，结束坐标\n\ncontext.clearRect(xx,yy,xxx,yyy)初始坐标，宽度，高度（清除）\n```\n### 圆弧\n```\ncontext.arc(x,y,半径,起始角度,结束角度,顺时针或者逆时针(默认顺时针，anticlockwise逆时针));\n//注意这里的结束角度不是度数，而是用元周率度量的所以要用Math.PI就是180度Math.PI/2就是90度\n```\n除了矩形都要context.beginPath()一下\n\ncanvas里面的坐标都是想对于canvas的而不是想对于视口的，所以要修正他。\n### 如何创建补间\n```\nvar context = xxx.getContext('2d')\ncontext.beginPath();\ncontext.moveTo(0,0) //起点\ncontext.lineWidth = 5  //宽度\ncontext.lineTo(200,0)  //终点\ncontext.stroke()  //\ncontext.closePath() //闭合\n```\n### 获取用户视口的宽高的方法（这个是最简单的了）\n```\nvar pageWidth = document.documentElement.clientWidth\nvar pageHeight = document.documentElement.clientHeight\nyyy.width = pageWidth\nyyy.height = pageHeight\n//获取用户视口尺寸\n```\n```\nwindow.onresize = funtion(){\n  var pageWidth = document.documentElement.clientWidth\n  var pageHeight = document.documentElement.clientHeight\n  yyy.width = pageWidth\n  yyy.height = pageHeight\n}\n//改变宽高时，同步宽高。\n//resize事件来改变宽高\n```\n## 3.如何让移动端也用上呢？\n### 需要一个特性检测\n```\nif(document.body.ontouchstart !== undefined){\n\t//如果存在说明他是触屏设备\n}else{\n\t如果不存在，那么说明不是触屏设备，监听鼠标操作是正确的。\n}\n```\n### 触屏是支持多点触控的\n所以touch时间需要把用户滑动的手指都用数组储存起来\n放在touches里面，所以找坐标的工作要交给`var x = aaa.touchs[0].clientX`以及`var y = aaa.touch[0].clientY` \n\n## 4.补充点功能\n### 改变画笔颜色\n#### I.首先让图标变好看点\n我们需要`iconfont.cn`搞点图标玩玩\n把搞到的图标代替button按钮\n设置id便于选择器选择。\n```\n<svg id=\"pen\" class=\"icon\">\n\t<use xlink:href=\"#icon-pencil\"></use>\n</svg>\n<svg id=\"eraser\" class=\"icon\">\n\t<use xlink:href=\"#icon-eraser\"></use>\n</svg>\n```\nCSS\n```\n.actions{\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n}\n.actions svg.active{\n\tfill: red;\n}\n```\n那么在js中调用active状态，通过`classList.remove('')`和`classList.add('')`来添加和移除相应class\n```\nvar eraserEnabled = false\npen.onclick = function(){\n\teraserEnabled = false;\n\tpen.classList.add(\"active\")\n\teraser.classList.remove(\"active\")\n}\neraser.onclick = function(){\n\teraserEnabled = true\n\teraser.classList.add(\"active\")\n\tpen.classList.remove(\"active\")\n}\n```\n","source":"_posts/canvas画板.md","raw":"---\ntitle: canvas画板\ndate: 2018-04-05 11:35:09\ntags: canvas\n---\n## 1.尝试用div画画\n```\n// 按下去鼠标\n    doucment.onmousedown = function(){\n        console.log(x)\n    }\n//动鼠标\n\tdocument.onmousemove = function(){\n    \tconsole.log(y)\n    }\n//松开鼠标\n\tdocument.onmouseup = function(){\n    \tconsole.log(1)\n    }\n```\n### 最好单独用div\n\t`<div id=\"canvas\"></div>`\n### 那么上面代码优化为\n```\n    var div = document.getElementById('canvas')\n    //按下鼠标\n    div.onmousedown = function(x){\n    \tvar x = a.clientX\n        var y = a.clientY\n        var divA = document.createElement('div')\n        divA.style = \"width: 6px; height: 6px;\"+\"background:black; border-radius: 3px;\"\n        div.appendChild(divA)\n        \"position: absolute; left: \"+(x-3) +\"px;\" + \"top: \"+(y-3)+\"px;\"\n    }\n    //动鼠标\n    div.onmousemove = function(y){\n    \t\n    }\n    //松开鼠标\n    div.onmouseup = function(z){\n    \tconsole.log(1)\n    }\n```\n### 小技巧（Flag）\n通过一个变量`var painting = false`\n全局变量的时候默认为false\n在按下去鼠标的时候`painting = true`\n移动鼠标div将其作为判断条件，如果 `if(painting){}`如果painting存在则继续\n在松开鼠标的时候改变变量painting为false\n\n## **2.然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas**\n### canvas不能用CSS控制宽高\n```\ncontext.strokesStyle描边\ncontext.strokeRect(xx,yy,xxx,yyy)初始坐标，结束坐标\ncontext.fillStyle = '颜色';填充\ncontext.fillStyle(xx,yy,xxx,yyy)初始坐标，结束坐标\n\ncontext.clearRect(xx,yy,xxx,yyy)初始坐标，宽度，高度（清除）\n```\n### 圆弧\n```\ncontext.arc(x,y,半径,起始角度,结束角度,顺时针或者逆时针(默认顺时针，anticlockwise逆时针));\n//注意这里的结束角度不是度数，而是用元周率度量的所以要用Math.PI就是180度Math.PI/2就是90度\n```\n除了矩形都要context.beginPath()一下\n\ncanvas里面的坐标都是想对于canvas的而不是想对于视口的，所以要修正他。\n### 如何创建补间\n```\nvar context = xxx.getContext('2d')\ncontext.beginPath();\ncontext.moveTo(0,0) //起点\ncontext.lineWidth = 5  //宽度\ncontext.lineTo(200,0)  //终点\ncontext.stroke()  //\ncontext.closePath() //闭合\n```\n### 获取用户视口的宽高的方法（这个是最简单的了）\n```\nvar pageWidth = document.documentElement.clientWidth\nvar pageHeight = document.documentElement.clientHeight\nyyy.width = pageWidth\nyyy.height = pageHeight\n//获取用户视口尺寸\n```\n```\nwindow.onresize = funtion(){\n  var pageWidth = document.documentElement.clientWidth\n  var pageHeight = document.documentElement.clientHeight\n  yyy.width = pageWidth\n  yyy.height = pageHeight\n}\n//改变宽高时，同步宽高。\n//resize事件来改变宽高\n```\n## 3.如何让移动端也用上呢？\n### 需要一个特性检测\n```\nif(document.body.ontouchstart !== undefined){\n\t//如果存在说明他是触屏设备\n}else{\n\t如果不存在，那么说明不是触屏设备，监听鼠标操作是正确的。\n}\n```\n### 触屏是支持多点触控的\n所以touch时间需要把用户滑动的手指都用数组储存起来\n放在touches里面，所以找坐标的工作要交给`var x = aaa.touchs[0].clientX`以及`var y = aaa.touch[0].clientY` \n\n## 4.补充点功能\n### 改变画笔颜色\n#### I.首先让图标变好看点\n我们需要`iconfont.cn`搞点图标玩玩\n把搞到的图标代替button按钮\n设置id便于选择器选择。\n```\n<svg id=\"pen\" class=\"icon\">\n\t<use xlink:href=\"#icon-pencil\"></use>\n</svg>\n<svg id=\"eraser\" class=\"icon\">\n\t<use xlink:href=\"#icon-eraser\"></use>\n</svg>\n```\nCSS\n```\n.actions{\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n}\n.actions svg.active{\n\tfill: red;\n}\n```\n那么在js中调用active状态，通过`classList.remove('')`和`classList.add('')`来添加和移除相应class\n```\nvar eraserEnabled = false\npen.onclick = function(){\n\teraserEnabled = false;\n\tpen.classList.add(\"active\")\n\teraser.classList.remove(\"active\")\n}\neraser.onclick = function(){\n\teraserEnabled = true\n\teraser.classList.add(\"active\")\n\tpen.classList.remove(\"active\")\n}\n```\n","slug":"canvas画板","published":1,"updated":"2018-04-09T07:41:50.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3n000et2g3u1z7od3c","content":"<h2 id=\"1-尝试用div画画\"><a href=\"#1-尝试用div画画\" class=\"headerlink\" title=\"1.尝试用div画画\"></a>1.尝试用div画画</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按下去鼠标</span></span><br><span class=\"line\">    doucment.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//动鼠标</span></span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//松开鼠标</span></span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最好单独用div\"><a href=\"#最好单独用div\" class=\"headerlink\" title=\"最好单独用div\"></a>最好单独用div</h3><pre><code>`&lt;div id=&quot;canvas&quot;&gt;&lt;/div&gt;`\n</code></pre><h3 id=\"那么上面代码优化为\"><a href=\"#那么上面代码优化为\" class=\"headerlink\" title=\"那么上面代码优化为\"></a>那么上面代码优化为</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">div</span> = document.getElementById(<span class=\"string\">'canvas'</span>)</span><br><span class=\"line\"><span class=\"comment\">//按下鼠标</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.onmousedown</span> = function(x)&#123;</span><br><span class=\"line\">\t<span class=\"selector-tag\">var</span> x = <span class=\"selector-tag\">a</span>.clientX</span><br><span class=\"line\">    <span class=\"selector-tag\">var</span> y = <span class=\"selector-tag\">a</span>.clientY</span><br><span class=\"line\">    <span class=\"selector-tag\">var</span> divA = document.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">    divA<span class=\"selector-class\">.style</span> = <span class=\"string\">\"width: 6px; height: 6px;\"</span>+<span class=\"string\">\"background:black; border-radius: 3px;\"</span></span><br><span class=\"line\">    <span class=\"selector-tag\">div</span>.appendChild(divA)</span><br><span class=\"line\">    <span class=\"string\">\"position: absolute; left: \"</span>+(x-<span class=\"number\">3</span>) +<span class=\"string\">\"px;\"</span> + <span class=\"string\">\"top: \"</span>+(y-<span class=\"number\">3</span>)+<span class=\"string\">\"px;\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//动鼠标</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.onmousemove</span> = function(y)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//松开鼠标</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.onmouseup</span> = function(z)&#123;</span><br><span class=\"line\">\tconsole.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小技巧（Flag）\"><a href=\"#小技巧（Flag）\" class=\"headerlink\" title=\"小技巧（Flag）\"></a>小技巧（Flag）</h3><p>通过一个变量<code>var painting = false</code><br>全局变量的时候默认为false<br>在按下去鼠标的时候<code>painting = true</code><br>移动鼠标div将其作为判断条件，如果 <code>if(painting){}</code>如果painting存在则继续<br>在松开鼠标的时候改变变量painting为false</p>\n<h2 id=\"2-然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas\"><a href=\"#2-然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas\" class=\"headerlink\" title=\"2.然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas\"></a><strong>2.然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas</strong></h2><h3 id=\"canvas不能用CSS控制宽高\"><a href=\"#canvas不能用CSS控制宽高\" class=\"headerlink\" title=\"canvas不能用CSS控制宽高\"></a>canvas不能用CSS控制宽高</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">context</span>.strokesStyle描边</span><br><span class=\"line\"><span class=\"built_in\">context</span>.strokeRect(xx,yy,xxx,yyy)初始坐标，结束坐标</span><br><span class=\"line\"><span class=\"built_in\">context</span>.fillStyle = <span class=\"string\">'颜色'</span><span class=\"comment\">;填充</span></span><br><span class=\"line\"><span class=\"built_in\">context</span>.fillStyle(xx,yy,xxx,yyy)初始坐标，结束坐标</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">context</span>.clearRect(xx,yy,xxx,yyy)初始坐标，宽度，高度（清除）</span><br></pre></td></tr></table></figure>\n<h3 id=\"圆弧\"><a href=\"#圆弧\" class=\"headerlink\" title=\"圆弧\"></a>圆弧</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">context</span><span class=\"selector-class\">.arc</span>(x,y,半径,起始角度,结束角度,顺时针或者逆时针(默认顺时针，anticlockwise逆时针));</span><br><span class=\"line\"><span class=\"comment\">//注意这里的结束角度不是度数，而是用元周率度量的所以要用Math.PI就是180度Math.PI/2就是90度</span></span><br></pre></td></tr></table></figure>\n<p>除了矩形都要context.beginPath()一下</p>\n<p>canvas里面的坐标都是想对于canvas的而不是想对于视口的，所以要修正他。</p>\n<h3 id=\"如何创建补间\"><a href=\"#如何创建补间\" class=\"headerlink\" title=\"如何创建补间\"></a>如何创建补间</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">context</span> = xxx<span class=\"variable\">.getContext</span>('<span class=\"number\">2</span>d')</span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.beginPath</span>();</span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.moveTo</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>) <span class=\"comment\">//起点</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.lineWidth</span> = <span class=\"number\">5</span>  <span class=\"comment\">//宽度</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.lineTo</span>(<span class=\"number\">200</span>,<span class=\"number\">0</span>)  <span class=\"comment\">//终点</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.stroke</span>()  <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.closePath</span>() <span class=\"comment\">//闭合</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取用户视口的宽高的方法（这个是最简单的了）\"><a href=\"#获取用户视口的宽高的方法（这个是最简单的了）\" class=\"headerlink\" title=\"获取用户视口的宽高的方法（这个是最简单的了）\"></a>获取用户视口的宽高的方法（这个是最简单的了）</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> pageWidth = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientWidth</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> pageHeight = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientHeight</span></span><br><span class=\"line\">yyy<span class=\"selector-class\">.width</span> = pageWidth</span><br><span class=\"line\">yyy<span class=\"selector-class\">.height</span> = pageHeight</span><br><span class=\"line\"><span class=\"comment\">//获取用户视口尺寸</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window<span class=\"selector-class\">.onresize</span> = funtion()&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">var</span> pageWidth = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientWidth</span></span><br><span class=\"line\">  <span class=\"selector-tag\">var</span> pageHeight = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientHeight</span></span><br><span class=\"line\">  yyy<span class=\"selector-class\">.width</span> = pageWidth</span><br><span class=\"line\">  yyy<span class=\"selector-class\">.height</span> = pageHeight</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//改变宽高时，同步宽高。</span></span><br><span class=\"line\"><span class=\"comment\">//resize事件来改变宽高</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-如何让移动端也用上呢？\"><a href=\"#3-如何让移动端也用上呢？\" class=\"headerlink\" title=\"3.如何让移动端也用上呢？\"></a>3.如何让移动端也用上呢？</h2><h3 id=\"需要一个特性检测\"><a href=\"#需要一个特性检测\" class=\"headerlink\" title=\"需要一个特性检测\"></a>需要一个特性检测</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.body.ontouchstart !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果存在说明他是触屏设备</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t如果不存在，那么说明不是触屏设备，监听鼠标操作是正确的。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"触屏是支持多点触控的\"><a href=\"#触屏是支持多点触控的\" class=\"headerlink\" title=\"触屏是支持多点触控的\"></a>触屏是支持多点触控的</h3><p>所以touch时间需要把用户滑动的手指都用数组储存起来<br>放在touches里面，所以找坐标的工作要交给<code>var x = aaa.touchs[0].clientX</code>以及<code>var y = aaa.touch[0].clientY</code> </p>\n<h2 id=\"4-补充点功能\"><a href=\"#4-补充点功能\" class=\"headerlink\" title=\"4.补充点功能\"></a>4.补充点功能</h2><h3 id=\"改变画笔颜色\"><a href=\"#改变画笔颜色\" class=\"headerlink\" title=\"改变画笔颜色\"></a>改变画笔颜色</h3><h4 id=\"I-首先让图标变好看点\"><a href=\"#I-首先让图标变好看点\" class=\"headerlink\" title=\"I.首先让图标变好看点\"></a>I.首先让图标变好看点</h4><p>我们需要<code>iconfont.cn</code>搞点图标玩玩<br>把搞到的图标代替button按钮<br>设置id便于选择器选择。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pen\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-pencil\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"eraser\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-eraser\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.actions</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.actions</span> <span class=\"selector-tag\">svg</span><span class=\"selector-class\">.active</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">fill</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在js中调用active状态，通过<code>classList.remove(&#39;&#39;)</code>和<code>classList.add(&#39;&#39;)</code>来添加和移除相应class<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var eraserEnabled = <span class=\"literal\">false</span></span><br><span class=\"line\">pen.onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\teraserEnabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tpen.classList.add(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">\teraser.classList.<span class=\"built_in\">remove</span>(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eraser.onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\teraserEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">\teraser.classList.add(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">\tpen.classList.<span class=\"built_in\">remove</span>(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-尝试用div画画\"><a href=\"#1-尝试用div画画\" class=\"headerlink\" title=\"1.尝试用div画画\"></a>1.尝试用div画画</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 按下去鼠标</span></span><br><span class=\"line\">    doucment.onmousedown = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(x)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//动鼠标</span></span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.onmousemove = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(y)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//松开鼠标</span></span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.onmouseup = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    \t<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"最好单独用div\"><a href=\"#最好单独用div\" class=\"headerlink\" title=\"最好单独用div\"></a>最好单独用div</h3><pre><code>`&lt;div id=&quot;canvas&quot;&gt;&lt;/div&gt;`\n</code></pre><h3 id=\"那么上面代码优化为\"><a href=\"#那么上面代码优化为\" class=\"headerlink\" title=\"那么上面代码优化为\"></a>那么上面代码优化为</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> <span class=\"selector-tag\">div</span> = document.getElementById(<span class=\"string\">'canvas'</span>)</span><br><span class=\"line\"><span class=\"comment\">//按下鼠标</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.onmousedown</span> = function(x)&#123;</span><br><span class=\"line\">\t<span class=\"selector-tag\">var</span> x = <span class=\"selector-tag\">a</span>.clientX</span><br><span class=\"line\">    <span class=\"selector-tag\">var</span> y = <span class=\"selector-tag\">a</span>.clientY</span><br><span class=\"line\">    <span class=\"selector-tag\">var</span> divA = document.createElement(<span class=\"string\">'div'</span>)</span><br><span class=\"line\">    divA<span class=\"selector-class\">.style</span> = <span class=\"string\">\"width: 6px; height: 6px;\"</span>+<span class=\"string\">\"background:black; border-radius: 3px;\"</span></span><br><span class=\"line\">    <span class=\"selector-tag\">div</span>.appendChild(divA)</span><br><span class=\"line\">    <span class=\"string\">\"position: absolute; left: \"</span>+(x-<span class=\"number\">3</span>) +<span class=\"string\">\"px;\"</span> + <span class=\"string\">\"top: \"</span>+(y-<span class=\"number\">3</span>)+<span class=\"string\">\"px;\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//动鼠标</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.onmousemove</span> = function(y)&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//松开鼠标</span></span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.onmouseup</span> = function(z)&#123;</span><br><span class=\"line\">\tconsole.log(<span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"小技巧（Flag）\"><a href=\"#小技巧（Flag）\" class=\"headerlink\" title=\"小技巧（Flag）\"></a>小技巧（Flag）</h3><p>通过一个变量<code>var painting = false</code><br>全局变量的时候默认为false<br>在按下去鼠标的时候<code>painting = true</code><br>移动鼠标div将其作为判断条件，如果 <code>if(painting){}</code>如果painting存在则继续<br>在松开鼠标的时候改变变量painting为false</p>\n<h2 id=\"2-然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas\"><a href=\"#2-然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas\" class=\"headerlink\" title=\"2.然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas\"></a><strong>2.然而做了这么多，他画画还是断断续续的，所以告诉我们画画不能用div，要用canvas</strong></h2><h3 id=\"canvas不能用CSS控制宽高\"><a href=\"#canvas不能用CSS控制宽高\" class=\"headerlink\" title=\"canvas不能用CSS控制宽高\"></a>canvas不能用CSS控制宽高</h3><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">context</span>.strokesStyle描边</span><br><span class=\"line\"><span class=\"built_in\">context</span>.strokeRect(xx,yy,xxx,yyy)初始坐标，结束坐标</span><br><span class=\"line\"><span class=\"built_in\">context</span>.fillStyle = <span class=\"string\">'颜色'</span><span class=\"comment\">;填充</span></span><br><span class=\"line\"><span class=\"built_in\">context</span>.fillStyle(xx,yy,xxx,yyy)初始坐标，结束坐标</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">context</span>.clearRect(xx,yy,xxx,yyy)初始坐标，宽度，高度（清除）</span><br></pre></td></tr></table></figure>\n<h3 id=\"圆弧\"><a href=\"#圆弧\" class=\"headerlink\" title=\"圆弧\"></a>圆弧</h3><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">context</span><span class=\"selector-class\">.arc</span>(x,y,半径,起始角度,结束角度,顺时针或者逆时针(默认顺时针，anticlockwise逆时针));</span><br><span class=\"line\"><span class=\"comment\">//注意这里的结束角度不是度数，而是用元周率度量的所以要用Math.PI就是180度Math.PI/2就是90度</span></span><br></pre></td></tr></table></figure>\n<p>除了矩形都要context.beginPath()一下</p>\n<p>canvas里面的坐标都是想对于canvas的而不是想对于视口的，所以要修正他。</p>\n<h3 id=\"如何创建补间\"><a href=\"#如何创建补间\" class=\"headerlink\" title=\"如何创建补间\"></a>如何创建补间</h3><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">context</span> = xxx<span class=\"variable\">.getContext</span>('<span class=\"number\">2</span>d')</span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.beginPath</span>();</span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.moveTo</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>) <span class=\"comment\">//起点</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.lineWidth</span> = <span class=\"number\">5</span>  <span class=\"comment\">//宽度</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.lineTo</span>(<span class=\"number\">200</span>,<span class=\"number\">0</span>)  <span class=\"comment\">//终点</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.stroke</span>()  <span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">context</span><span class=\"variable\">.closePath</span>() <span class=\"comment\">//闭合</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"获取用户视口的宽高的方法（这个是最简单的了）\"><a href=\"#获取用户视口的宽高的方法（这个是最简单的了）\" class=\"headerlink\" title=\"获取用户视口的宽高的方法（这个是最简单的了）\"></a>获取用户视口的宽高的方法（这个是最简单的了）</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> pageWidth = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientWidth</span></span><br><span class=\"line\"><span class=\"selector-tag\">var</span> pageHeight = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientHeight</span></span><br><span class=\"line\">yyy<span class=\"selector-class\">.width</span> = pageWidth</span><br><span class=\"line\">yyy<span class=\"selector-class\">.height</span> = pageHeight</span><br><span class=\"line\"><span class=\"comment\">//获取用户视口尺寸</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window<span class=\"selector-class\">.onresize</span> = funtion()&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">var</span> pageWidth = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientWidth</span></span><br><span class=\"line\">  <span class=\"selector-tag\">var</span> pageHeight = document<span class=\"selector-class\">.documentElement</span><span class=\"selector-class\">.clientHeight</span></span><br><span class=\"line\">  yyy<span class=\"selector-class\">.width</span> = pageWidth</span><br><span class=\"line\">  yyy<span class=\"selector-class\">.height</span> = pageHeight</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//改变宽高时，同步宽高。</span></span><br><span class=\"line\"><span class=\"comment\">//resize事件来改变宽高</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3-如何让移动端也用上呢？\"><a href=\"#3-如何让移动端也用上呢？\" class=\"headerlink\" title=\"3.如何让移动端也用上呢？\"></a>3.如何让移动端也用上呢？</h2><h3 id=\"需要一个特性检测\"><a href=\"#需要一个特性检测\" class=\"headerlink\" title=\"需要一个特性检测\"></a>需要一个特性检测</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.body.ontouchstart !== <span class=\"literal\">undefined</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//如果存在说明他是触屏设备</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t如果不存在，那么说明不是触屏设备，监听鼠标操作是正确的。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"触屏是支持多点触控的\"><a href=\"#触屏是支持多点触控的\" class=\"headerlink\" title=\"触屏是支持多点触控的\"></a>触屏是支持多点触控的</h3><p>所以touch时间需要把用户滑动的手指都用数组储存起来<br>放在touches里面，所以找坐标的工作要交给<code>var x = aaa.touchs[0].clientX</code>以及<code>var y = aaa.touch[0].clientY</code> </p>\n<h2 id=\"4-补充点功能\"><a href=\"#4-补充点功能\" class=\"headerlink\" title=\"4.补充点功能\"></a>4.补充点功能</h2><h3 id=\"改变画笔颜色\"><a href=\"#改变画笔颜色\" class=\"headerlink\" title=\"改变画笔颜色\"></a>改变画笔颜色</h3><h4 id=\"I-首先让图标变好看点\"><a href=\"#I-首先让图标变好看点\" class=\"headerlink\" title=\"I.首先让图标变好看点\"></a>I.首先让图标变好看点</h4><p>我们需要<code>iconfont.cn</code>搞点图标玩玩<br>把搞到的图标代替button按钮<br>设置id便于选择器选择。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pen\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-pencil\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">id</span>=<span class=\"string\">\"eraser\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">xlink:href</span>=<span class=\"string\">\"#icon-eraser\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">use</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.actions</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">\t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.actions</span> <span class=\"selector-tag\">svg</span><span class=\"selector-class\">.active</span>&#123;</span><br><span class=\"line\">\t<span class=\"attribute\">fill</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>那么在js中调用active状态，通过<code>classList.remove(&#39;&#39;)</code>和<code>classList.add(&#39;&#39;)</code>来添加和移除相应class<br><figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var eraserEnabled = <span class=\"literal\">false</span></span><br><span class=\"line\">pen.onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\teraserEnabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tpen.classList.add(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">\teraser.classList.<span class=\"built_in\">remove</span>(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">eraser.onclick = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\teraserEnabled = <span class=\"literal\">true</span></span><br><span class=\"line\">\teraser.classList.add(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">\tpen.classList.<span class=\"built_in\">remove</span>(<span class=\"string\">\"active\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"jQuery-始","date":"2018-04-26T11:04:47.000Z","_content":"别看jQuery mobile\n\n# 1.如何自己实现一个jQuery\n\n## I.找兄弟\n```\n<body>\n    <ul>\n        <li id=\"item1\">选项1</li>\n        <li id=\"item2\">选项2</li>\n        <li id=\"item3\">选项3</li>\n        <li id=\"item4\">选项4</li>\n        <li id=\"item5\">选项5</li>\n    </ul>\n    <script>\n        function getSiblings(node){\n            var allChildren = item3.parentNode.children\n            var array = {length: 0}\n            for(let i=0; i<allChildren.length; i++){\n                if(allChildren[i]  !== node){\n                array[array.length] = allChildren[i]\n                array.length += 1\n                }\n            }\n            return array\n        }\n        getSiblings(item3)  //找兄弟（不包括自己）就完成了\n    </script>\n</body>\n```\n\n## II.改class\n\n```\n        function addClass(node, classes) {\n            for (let key in classes) {\n                var value = classes[key]\n                if (value) {\n                    item3.classList.add(key)\n                } else {\n                    item3.classList.remove(key)\n                }\n            }\n        }\n        addClass(item3, { a: true, b: false, c: true })     //改class就完成了\n```\n\n优化一下？\n\n```\n        function addClass(node, classes) {\n            for (let key in classes) {\n                var value = classes[key]\n                var methodName = value ? 'add' : 'remove'\n                node.classList[methodName](key)\n            }\n        }\n        addClass(item3, { a: true, b: false, c: true })     //改class就完成了\n```\n\n## III.如何优化代码\n\n### i.如果出现类似的代码，就存在优化的可能\n\n## IV.命名空间\n辛辛苦苦封装的函数，得找个方法调用吧\n所以找一个别人没取过的名字\n然后放进去，既避免了覆盖变量，又可以方便调用\n\n```\nwindow.oracleDOM = {}\noracleDOM.getSiblings = function addClass(node, classes) {\n    for (let key in classes) {\n        var value = classes[key]\n        if (value) {\n            item3.classList.add(key)\n        } else {\n            item3.classList.remove(key)\n        }\n    }\n}\n\noracleDOM.addClass = function (node, classes) {\n    for (let key in classes) {\n        var value = classes[key]\n        var methodName = value ? 'add' : 'remove'\n        node.classList[methodName](key)\n    }\n}\n\noracleDOM.getSibling(item3)\noracleDOM.addClass(item3,['a','b','c'])\n```\n\n### i.还是感觉调用很麻烦？\n加到原型链里面去\n\n#### 找兄弟：\n\n```\nNode.prorotype.getSiblings = function getSiblings(node){\n    var allChildren = this.parentNode.children\n    var array = {length: 0}\n    for(let i=0; i<allChildren.length; i++){\n        if(allChildren[i]  !== this){\n        array[array.length] = allChildren[i]\n        array.length += 1\n        }\n    }\n    return array\n}\nitem3.getSiblings()\n```\n\n这里面把node替换成this，使node作为第一个参数传进去。\n所以item3.getSiblings()可以将item3作为第一个参数传进去\n\n#### 加Class：\n\n```\nNode.prototype.addClass = function (classes) {\n    for (let key in classes) {\n        var value = classes[key]\n        var methodName = value ? 'add' : 'remove'\n        this.classList[methodName](key)\n    }\n}\n\nitem3.addClass(['a','b','c'])\n```\n\n第一个参数node替换为this，在第五行的`node.classList`由调用时开头的`item3`传入\n\n#### 什么？看不懂这个this？\n\n```\nitem3.getSiblings.call(item3)\n//相当于 item3.getSiblings()\nitem3.addClass.call(item3, ['a','b','c'])\n//相当于 item3.addClass(['a','b','c'])\n```\n\n用call把第一个参数写出来是不是就清楚了\n**不吃糖，好理解，吃糖，写的爽。**\n\n### ii.覆盖原型是不是有点不太好？\n\n#### 通过jQuery这个容器来封装他？\n\n\n```\nwindow.jQuery = function(node){         //名字改成jQuery\n    return{\n        getSiblings: function(){\n            var allChildren = node.parentNode.children      //这时候node不是this了\n            var array = {length: 0}                             //因为现在用的是node2\n            for(let i=0; i<allChildren.length; i++){\n                if(allChildren[i]  !== node){\n                    array[array.length] = allChildren[i]\n                    array.length += 1\n                }\n            }\n            return array\n        },\n        addClass: function(classes){\n            for (let key in classes) {\n            var value = classes[key]\n            var methodName = value ? 'add' : 'remove'\n            node.classList[methodName](key)             //这里也要改成node了\n            } \n        }\n    }\n}\n\nvar node2 = jQuery(item3)\nnode2.getSiblings()\nnode2.addClass(['a','b','c'])\n```\n\n所以jQuery框架就是这个思路，封装函数，随时调用，返回新对象。\n\n# 2.jQuery其实还要厉害一点\n\n## I.功能还是多\n\n### i.不但能传节点，还能传别的\n\n```\nwindow.jQuery = function(nodeOrSelector){\n    let node\n    if(typeof nodeOrSelector === 'string'){             //让传入参数还能是个选择器\n        node = document.querySelector(nodeOrSelector)\n    }else{                                                  //内容审查\n        node = nodeOrSelector\n    }\n\n    return{\n        getSiblings: function(){\n            var allChildren = node.parentNode.children  \n            var array = {length: 0}\n            for(let i=0; i<allChildren.length; i++){\n                if(allChildren[i]  !== node){\n                    array[array.length] = allChildren[i]\n                    array.length += 1\n                }\n            }\n            return array\n        },\n        addClass: function(classes){\n            for (let key in classes) {\n                var value = classes[key]\n                var methodName = value ? 'add' : 'remove'\n                node.classList[methodName](key)         //这里node用到了闭包哟\n            } \n        }\n    }\n}\n\nvar node2 = jQuery('#item3')            //传入一个选择器\nnode2.getSiblings()\nnode2.addClass(['red','b','c'])             //改这个选择器对应标签的class\n```\n\n#### 这期间发生了什么？\n\n使用`jQuery`调用字符串`#item3`\n内容审查发现他是字符串\n找到相应节点\n`node`作为容器保存这个节点\n\n`jQuery`返回一个`对象`\n对象有两个key：`getSiblings`和`addClass`\n\n调用`getSiblings`\n调用`addClass`\n发现`addClass`获取了一个数组（`['red','b','c']`）以后遍历这个数组\n之后不停地在`node`上添加classList\n这个`node`就是刚才容器保存的节点\n\n#### 不信你写个别的选择器试试？\n\n```\nvar node2 = jQuery('ul > li:nth-child(3)')            //传入一个选择器\nnode2.getSiblings()\nnode2.addClass(['blue','b','c'])   \n```\n\n### ii.我想通过选择器选好几个怎么办？\n\n那可能要变了个大样了\n\n```\nwindow.jQuery = function(nodeOrSelector){\n    let nodes = {}\n    if(typeof nodeOrSelector === 'string'){\n        let temp = document.querySelectorAll(nodeOrSelector)    //希望得到一个伪数组\n        for(let i=0; i<temp.length; i++){                    //不想要NodeList的属性\n            nodes[i] = temp[i]                            //遍历容器一个一个加进去\n        }\n        nodes.length = temp.length\n    }else if(nodeOrSelector instanceof Node){               //考虑只有一个节点的情况\n        nodes = {0:nodeOrSelector, length: 1}\n    }\n\n    nodes.addClass = function(classes){                  //调用addClass\n        for (let key in classes) {                      //遍历class\n            var value = classes[key]\n            var methodName = value ? 'add' : 'remove'\n            for(let i=0; i<nodes.length; i++){\n                nodes[i].classList[methodName](key)      //逐步的放在伪数组的每一项里\n            }\n        } \n    }\n    nodes.getText = function(){                         //加个功能，获取文本\n        var texts = []\n        for(let i=0; i< nodes.length; i++){               //遍历后塞进去\n            texts.push(nodes[i].textContent)\n        }\n        return texts                                    //返回文本\n    }\n    nodes.setText = function(text){                     //再加个功能，设置文本\n        for(let i=0; i<nodes.length; i++){\n            nodes[i].textContent = text          //把传进去的参数text赋予textContent\n        }\n    }\n    //////////////////jQuery不喜欢写get和set所以合并成text/////////////////////\n    \n    nodes.text = function(text){\n        if(text === undefined){                         //如果没传参数\n            var texts = []                            //说明是想获取text\n            for(let i=0; i< nodes.length; i++){\n                texts.push(nodes[i].textContent)\n            }\n            return texts\n        }else{                                          //给了参数\n            for(let i=0; i<nodes.length; i++){        //说明是想设置text\n                nodes[i].textContent = text\n            }\n        }\n    }\n\n    return nodes\n}\n\nvar node2 = jQuery('ul > li')\nnode2.addClass(['blue'])\nvar text = node2.text()     //不给参数 === 获取\nnode2.text('hi')                //给了参数 === 设置\n\n```\n\n# 3.看看jQuery的文档吧\n\n`<script src=\"//code.jquery.com/jquery-2.1.1.min.js\"></script>`\n引入jQuery的库，就可以调用它的API了\n\n## I.API\n[超多API](http://api.jquery.com)\n\n### i.可以几个连着用\n\nx.onclick = function(){\n    nodes.removeClass('red').addClass('green')\n}\n\n让大家喜爱的**链式操作**\n\n\n## II.jQuery厉害在哪里\n\n1.兼容性好，1.7兼容到IE6，现在放弃兼容了...\n2.还有动画、AJAX等模块，DOM操作只是一小部分\n3.功能强大，功能丰富\n4.jQuery使用了`prototype`还有需要了解`new`\n\n## III.$()的几种用法\n\n### i.$(object)\n传入一个object，将该对象封装到jQuery对象中并返回\n\n### ii.$(callback)\n传进去参数是函数的时候，在document对象上绑定一个ready事件监听函数，当DOM结构加载完成的时候执行\n\n```\n$(function(){\n})\n//以上代码和下面的效果是一样的\n$(document).ready(function(){\n    ...//代码\n})\n```\n\n### iii.$(jQuery object)\n传进去的参数是一个jQuery对象的时候，则创建该jQuery对象的一个副本并返回。副本与传入jQuery对象的引用完全相同的元素\n\n### iv.$()\n什么都不传，返回一个空jQuery对象，属性length: 0 \n可以用来复用jQuery对象：\n创建空jQuery对象，需要时先手动修改其中元素，再调用jQuery方法。避免重复创建jQuery对象。\n","source":"_posts/jQuery-始.md","raw":"---\ntitle: jQuery-始\ndate: 2018-04-26 19:04:47\ntags: JS\n---\n别看jQuery mobile\n\n# 1.如何自己实现一个jQuery\n\n## I.找兄弟\n```\n<body>\n    <ul>\n        <li id=\"item1\">选项1</li>\n        <li id=\"item2\">选项2</li>\n        <li id=\"item3\">选项3</li>\n        <li id=\"item4\">选项4</li>\n        <li id=\"item5\">选项5</li>\n    </ul>\n    <script>\n        function getSiblings(node){\n            var allChildren = item3.parentNode.children\n            var array = {length: 0}\n            for(let i=0; i<allChildren.length; i++){\n                if(allChildren[i]  !== node){\n                array[array.length] = allChildren[i]\n                array.length += 1\n                }\n            }\n            return array\n        }\n        getSiblings(item3)  //找兄弟（不包括自己）就完成了\n    </script>\n</body>\n```\n\n## II.改class\n\n```\n        function addClass(node, classes) {\n            for (let key in classes) {\n                var value = classes[key]\n                if (value) {\n                    item3.classList.add(key)\n                } else {\n                    item3.classList.remove(key)\n                }\n            }\n        }\n        addClass(item3, { a: true, b: false, c: true })     //改class就完成了\n```\n\n优化一下？\n\n```\n        function addClass(node, classes) {\n            for (let key in classes) {\n                var value = classes[key]\n                var methodName = value ? 'add' : 'remove'\n                node.classList[methodName](key)\n            }\n        }\n        addClass(item3, { a: true, b: false, c: true })     //改class就完成了\n```\n\n## III.如何优化代码\n\n### i.如果出现类似的代码，就存在优化的可能\n\n## IV.命名空间\n辛辛苦苦封装的函数，得找个方法调用吧\n所以找一个别人没取过的名字\n然后放进去，既避免了覆盖变量，又可以方便调用\n\n```\nwindow.oracleDOM = {}\noracleDOM.getSiblings = function addClass(node, classes) {\n    for (let key in classes) {\n        var value = classes[key]\n        if (value) {\n            item3.classList.add(key)\n        } else {\n            item3.classList.remove(key)\n        }\n    }\n}\n\noracleDOM.addClass = function (node, classes) {\n    for (let key in classes) {\n        var value = classes[key]\n        var methodName = value ? 'add' : 'remove'\n        node.classList[methodName](key)\n    }\n}\n\noracleDOM.getSibling(item3)\noracleDOM.addClass(item3,['a','b','c'])\n```\n\n### i.还是感觉调用很麻烦？\n加到原型链里面去\n\n#### 找兄弟：\n\n```\nNode.prorotype.getSiblings = function getSiblings(node){\n    var allChildren = this.parentNode.children\n    var array = {length: 0}\n    for(let i=0; i<allChildren.length; i++){\n        if(allChildren[i]  !== this){\n        array[array.length] = allChildren[i]\n        array.length += 1\n        }\n    }\n    return array\n}\nitem3.getSiblings()\n```\n\n这里面把node替换成this，使node作为第一个参数传进去。\n所以item3.getSiblings()可以将item3作为第一个参数传进去\n\n#### 加Class：\n\n```\nNode.prototype.addClass = function (classes) {\n    for (let key in classes) {\n        var value = classes[key]\n        var methodName = value ? 'add' : 'remove'\n        this.classList[methodName](key)\n    }\n}\n\nitem3.addClass(['a','b','c'])\n```\n\n第一个参数node替换为this，在第五行的`node.classList`由调用时开头的`item3`传入\n\n#### 什么？看不懂这个this？\n\n```\nitem3.getSiblings.call(item3)\n//相当于 item3.getSiblings()\nitem3.addClass.call(item3, ['a','b','c'])\n//相当于 item3.addClass(['a','b','c'])\n```\n\n用call把第一个参数写出来是不是就清楚了\n**不吃糖，好理解，吃糖，写的爽。**\n\n### ii.覆盖原型是不是有点不太好？\n\n#### 通过jQuery这个容器来封装他？\n\n\n```\nwindow.jQuery = function(node){         //名字改成jQuery\n    return{\n        getSiblings: function(){\n            var allChildren = node.parentNode.children      //这时候node不是this了\n            var array = {length: 0}                             //因为现在用的是node2\n            for(let i=0; i<allChildren.length; i++){\n                if(allChildren[i]  !== node){\n                    array[array.length] = allChildren[i]\n                    array.length += 1\n                }\n            }\n            return array\n        },\n        addClass: function(classes){\n            for (let key in classes) {\n            var value = classes[key]\n            var methodName = value ? 'add' : 'remove'\n            node.classList[methodName](key)             //这里也要改成node了\n            } \n        }\n    }\n}\n\nvar node2 = jQuery(item3)\nnode2.getSiblings()\nnode2.addClass(['a','b','c'])\n```\n\n所以jQuery框架就是这个思路，封装函数，随时调用，返回新对象。\n\n# 2.jQuery其实还要厉害一点\n\n## I.功能还是多\n\n### i.不但能传节点，还能传别的\n\n```\nwindow.jQuery = function(nodeOrSelector){\n    let node\n    if(typeof nodeOrSelector === 'string'){             //让传入参数还能是个选择器\n        node = document.querySelector(nodeOrSelector)\n    }else{                                                  //内容审查\n        node = nodeOrSelector\n    }\n\n    return{\n        getSiblings: function(){\n            var allChildren = node.parentNode.children  \n            var array = {length: 0}\n            for(let i=0; i<allChildren.length; i++){\n                if(allChildren[i]  !== node){\n                    array[array.length] = allChildren[i]\n                    array.length += 1\n                }\n            }\n            return array\n        },\n        addClass: function(classes){\n            for (let key in classes) {\n                var value = classes[key]\n                var methodName = value ? 'add' : 'remove'\n                node.classList[methodName](key)         //这里node用到了闭包哟\n            } \n        }\n    }\n}\n\nvar node2 = jQuery('#item3')            //传入一个选择器\nnode2.getSiblings()\nnode2.addClass(['red','b','c'])             //改这个选择器对应标签的class\n```\n\n#### 这期间发生了什么？\n\n使用`jQuery`调用字符串`#item3`\n内容审查发现他是字符串\n找到相应节点\n`node`作为容器保存这个节点\n\n`jQuery`返回一个`对象`\n对象有两个key：`getSiblings`和`addClass`\n\n调用`getSiblings`\n调用`addClass`\n发现`addClass`获取了一个数组（`['red','b','c']`）以后遍历这个数组\n之后不停地在`node`上添加classList\n这个`node`就是刚才容器保存的节点\n\n#### 不信你写个别的选择器试试？\n\n```\nvar node2 = jQuery('ul > li:nth-child(3)')            //传入一个选择器\nnode2.getSiblings()\nnode2.addClass(['blue','b','c'])   \n```\n\n### ii.我想通过选择器选好几个怎么办？\n\n那可能要变了个大样了\n\n```\nwindow.jQuery = function(nodeOrSelector){\n    let nodes = {}\n    if(typeof nodeOrSelector === 'string'){\n        let temp = document.querySelectorAll(nodeOrSelector)    //希望得到一个伪数组\n        for(let i=0; i<temp.length; i++){                    //不想要NodeList的属性\n            nodes[i] = temp[i]                            //遍历容器一个一个加进去\n        }\n        nodes.length = temp.length\n    }else if(nodeOrSelector instanceof Node){               //考虑只有一个节点的情况\n        nodes = {0:nodeOrSelector, length: 1}\n    }\n\n    nodes.addClass = function(classes){                  //调用addClass\n        for (let key in classes) {                      //遍历class\n            var value = classes[key]\n            var methodName = value ? 'add' : 'remove'\n            for(let i=0; i<nodes.length; i++){\n                nodes[i].classList[methodName](key)      //逐步的放在伪数组的每一项里\n            }\n        } \n    }\n    nodes.getText = function(){                         //加个功能，获取文本\n        var texts = []\n        for(let i=0; i< nodes.length; i++){               //遍历后塞进去\n            texts.push(nodes[i].textContent)\n        }\n        return texts                                    //返回文本\n    }\n    nodes.setText = function(text){                     //再加个功能，设置文本\n        for(let i=0; i<nodes.length; i++){\n            nodes[i].textContent = text          //把传进去的参数text赋予textContent\n        }\n    }\n    //////////////////jQuery不喜欢写get和set所以合并成text/////////////////////\n    \n    nodes.text = function(text){\n        if(text === undefined){                         //如果没传参数\n            var texts = []                            //说明是想获取text\n            for(let i=0; i< nodes.length; i++){\n                texts.push(nodes[i].textContent)\n            }\n            return texts\n        }else{                                          //给了参数\n            for(let i=0; i<nodes.length; i++){        //说明是想设置text\n                nodes[i].textContent = text\n            }\n        }\n    }\n\n    return nodes\n}\n\nvar node2 = jQuery('ul > li')\nnode2.addClass(['blue'])\nvar text = node2.text()     //不给参数 === 获取\nnode2.text('hi')                //给了参数 === 设置\n\n```\n\n# 3.看看jQuery的文档吧\n\n`<script src=\"//code.jquery.com/jquery-2.1.1.min.js\"></script>`\n引入jQuery的库，就可以调用它的API了\n\n## I.API\n[超多API](http://api.jquery.com)\n\n### i.可以几个连着用\n\nx.onclick = function(){\n    nodes.removeClass('red').addClass('green')\n}\n\n让大家喜爱的**链式操作**\n\n\n## II.jQuery厉害在哪里\n\n1.兼容性好，1.7兼容到IE6，现在放弃兼容了...\n2.还有动画、AJAX等模块，DOM操作只是一小部分\n3.功能强大，功能丰富\n4.jQuery使用了`prototype`还有需要了解`new`\n\n## III.$()的几种用法\n\n### i.$(object)\n传入一个object，将该对象封装到jQuery对象中并返回\n\n### ii.$(callback)\n传进去参数是函数的时候，在document对象上绑定一个ready事件监听函数，当DOM结构加载完成的时候执行\n\n```\n$(function(){\n})\n//以上代码和下面的效果是一样的\n$(document).ready(function(){\n    ...//代码\n})\n```\n\n### iii.$(jQuery object)\n传进去的参数是一个jQuery对象的时候，则创建该jQuery对象的一个副本并返回。副本与传入jQuery对象的引用完全相同的元素\n\n### iv.$()\n什么都不传，返回一个空jQuery对象，属性length: 0 \n可以用来复用jQuery对象：\n创建空jQuery对象，需要时先手动修改其中元素，再调用jQuery方法。避免重复创建jQuery对象。\n","slug":"jQuery-始","published":1,"updated":"2018-05-07T18:57:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3p000ht2g34dcxgn8n","content":"<p>别看jQuery mobile</p>\n<h1 id=\"1-如何自己实现一个jQuery\"><a href=\"#1-如何自己实现一个jQuery\" class=\"headerlink\" title=\"1.如何自己实现一个jQuery\"></a>1.如何自己实现一个jQuery</h1><h2 id=\"I-找兄弟\"><a href=\"#I-找兄弟\" class=\"headerlink\" title=\"I.找兄弟\"></a>I.找兄弟</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item1\"</span>&gt;</span>选项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item2\"</span>&gt;</span>选项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item3\"</span>&gt;</span>选项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item4\"</span>&gt;</span>选项4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item5\"</span>&gt;</span>选项5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSiblings</span><span class=\"params\">(node)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> allChildren = item3.parentNode.children</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> array = &#123;length: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.length; i++)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">if</span>(allChildren[i]  !== node)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                array[array.length] = allChildren[i]</span></span><br><span class=\"line\"><span class=\"undefined\">                array.length += 1</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> array</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">        getSiblings(item3)  <span class=\"comment\">//找兄弟（不包括自己）就完成了</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"II-改class\"><a href=\"#II-改class\" class=\"headerlink\" title=\"II.改class\"></a>II.改class</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addClass(node, classes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (let key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> value = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">            item3<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            item3<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">addClass</span><span class=\"params\">(item3, &#123; a: true, b: false, c: true &#125;)</span></span>     <span class=\"comment\">//改class就完成了</span></span><br></pre></td></tr></table></figure>\n<p>优化一下？</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">addClass</span>(<span class=\"params\">node, classes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = <span class=\"keyword\">value</span> ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">        node.classList[methodName](key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">addClass(item3, &#123; a: <span class=\"literal\">true</span>, b: <span class=\"literal\">false</span>, c: <span class=\"literal\">true</span> &#125;)     <span class=\"comment\">//改class就完成了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"III-如何优化代码\"><a href=\"#III-如何优化代码\" class=\"headerlink\" title=\"III.如何优化代码\"></a>III.如何优化代码</h2><h3 id=\"i-如果出现类似的代码，就存在优化的可能\"><a href=\"#i-如果出现类似的代码，就存在优化的可能\" class=\"headerlink\" title=\"i.如果出现类似的代码，就存在优化的可能\"></a>i.如果出现类似的代码，就存在优化的可能</h3><h2 id=\"IV-命名空间\"><a href=\"#IV-命名空间\" class=\"headerlink\" title=\"IV.命名空间\"></a>IV.命名空间</h2><p>辛辛苦苦封装的函数，得找个方法调用吧<br>所以找一个别人没取过的名字<br>然后放进去，既避免了覆盖变量，又可以方便调用</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.oracleDOM = &#123;&#125;</span><br><span class=\"line\">oracleDOM.getSiblings = <span class=\"function\">function <span class=\"title\">addClass</span>(<span class=\"params\">node, classes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>) &#123;</span><br><span class=\"line\">            item3.classList.<span class=\"keyword\">add</span>(key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            item3.classList.<span class=\"keyword\">remove</span>(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oracleDOM.addClass = function (node, classes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = <span class=\"keyword\">value</span> ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">        node.classList[methodName](key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oracleDOM.getSibling(item3)</span><br><span class=\"line\">oracleDOM.addClass(item3,[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"i-还是感觉调用很麻烦？\"><a href=\"#i-还是感觉调用很麻烦？\" class=\"headerlink\" title=\"i.还是感觉调用很麻烦？\"></a>i.还是感觉调用很麻烦？</h3><p>加到原型链里面去</p>\n<h4 id=\"找兄弟：\"><a href=\"#找兄弟：\" class=\"headerlink\" title=\"找兄弟：\"></a>找兄弟：</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node.prorotype.getSiblings = function getSiblings(node)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">var</span> allChildren = this.parentNode.children</span><br><span class=\"line\">    <span class=\"built_in\">var</span> <span class=\"built_in\">array</span> = &#123;<span class=\"built_in\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.<span class=\"built_in\">length</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(allChildren[i]  !== this)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[<span class=\"built_in\">array</span>.<span class=\"built_in\">length</span>] = allChildren[i]</span><br><span class=\"line\">        <span class=\"built_in\">array</span>.<span class=\"built_in\">length</span> += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">array</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item3.getSiblings()</span><br></pre></td></tr></table></figure>\n<p>这里面把node替换成this，使node作为第一个参数传进去。<br>所以item3.getSiblings()可以将item3作为第一个参数传进去</p>\n<h4 id=\"加Class：\"><a href=\"#加Class：\" class=\"headerlink\" title=\"加Class：\"></a>加Class：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node.prototype.addClass = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">classes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classList[methodName](key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">item3.addClass([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<p>第一个参数node替换为this，在第五行的<code>node.classList</code>由调用时开头的<code>item3</code>传入</p>\n<h4 id=\"什么？看不懂这个this？\"><a href=\"#什么？看不懂这个this？\" class=\"headerlink\" title=\"什么？看不懂这个this？\"></a>什么？看不懂这个this？</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item3<span class=\"selector-class\">.getSiblings</span><span class=\"selector-class\">.call</span>(item3)</span><br><span class=\"line\"><span class=\"comment\">//相当于 item3.getSiblings()</span></span><br><span class=\"line\">item3<span class=\"selector-class\">.addClass</span><span class=\"selector-class\">.call</span>(item3, [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br><span class=\"line\"><span class=\"comment\">//相当于 item3.addClass(['a','b','c'])</span></span><br></pre></td></tr></table></figure>\n<p>用call把第一个参数写出来是不是就清楚了<br><strong>不吃糖，好理解，吃糖，写的爽。</strong></p>\n<h3 id=\"ii-覆盖原型是不是有点不太好？\"><a href=\"#ii-覆盖原型是不是有点不太好？\" class=\"headerlink\" title=\"ii.覆盖原型是不是有点不太好？\"></a>ii.覆盖原型是不是有点不太好？</h3><h4 id=\"通过jQuery这个容器来封装他？\"><a href=\"#通过jQuery这个容器来封装他？\" class=\"headerlink\" title=\"通过jQuery这个容器来封装他？\"></a>通过jQuery这个容器来封装他？</h4><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(node)</span></span>&#123;         <span class=\"comment\">//名字改成jQuery</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        getSiblings: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> allChildren = node.parentNode.children      <span class=\"comment\">//这时候node不是this了</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = &#123;length: <span class=\"number\">0</span>&#125;                             <span class=\"comment\">//因为现在用的是node2</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(allChildren[i]  !== node)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>[<span class=\"keyword\">array</span>.length] = allChildren[i]</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>.length += <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">array</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addClass: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(classes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key in classes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">            <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">            node.classList[methodName](key)             <span class=\"comment\">//这里也要改成node了</span></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node2 = jQuery(item3)</span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<p>所以jQuery框架就是这个思路，封装函数，随时调用，返回新对象。</p>\n<h1 id=\"2-jQuery其实还要厉害一点\"><a href=\"#2-jQuery其实还要厉害一点\" class=\"headerlink\" title=\"2.jQuery其实还要厉害一点\"></a>2.jQuery其实还要厉害一点</h1><h2 id=\"I-功能还是多\"><a href=\"#I-功能还是多\" class=\"headerlink\" title=\"I.功能还是多\"></a>I.功能还是多</h2><h3 id=\"i-不但能传节点，还能传别的\"><a href=\"#i-不但能传节点，还能传别的\" class=\"headerlink\" title=\"i.不但能传节点，还能传别的\"></a>i.不但能传节点，还能传别的</h3><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(nodeOrSelector)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeof nodeOrSelector === <span class=\"string\">'string'</span>)&#123;             <span class=\"comment\">//让传入参数还能是个选择器</span></span><br><span class=\"line\">        node = document.querySelector(nodeOrSelector)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;                                                  <span class=\"comment\">//内容审查</span></span><br><span class=\"line\">        node = nodeOrSelector</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        getSiblings: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> allChildren = node.parentNode.children  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = &#123;length: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(allChildren[i]  !== node)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>[<span class=\"keyword\">array</span>.length] = allChildren[i]</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>.length += <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">array</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addClass: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(classes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key in classes) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">                <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">                node.classList[methodName](key)         <span class=\"comment\">//这里node用到了闭包哟</span></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node2 = jQuery(<span class=\"string\">'#item3'</span>)            <span class=\"comment\">//传入一个选择器</span></span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'red'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])             <span class=\"comment\">//改这个选择器对应标签的class</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"这期间发生了什么？\"><a href=\"#这期间发生了什么？\" class=\"headerlink\" title=\"这期间发生了什么？\"></a>这期间发生了什么？</h4><p>使用<code>jQuery</code>调用字符串<code>#item3</code><br>内容审查发现他是字符串<br>找到相应节点<br><code>node</code>作为容器保存这个节点</p>\n<p><code>jQuery</code>返回一个<code>对象</code><br>对象有两个key：<code>getSiblings</code>和<code>addClass</code></p>\n<p>调用<code>getSiblings</code><br>调用<code>addClass</code><br>发现<code>addClass</code>获取了一个数组（<code>[&#39;red&#39;,&#39;b&#39;,&#39;c&#39;]</code>）以后遍历这个数组<br>之后不停地在<code>node</code>上添加classList<br>这个<code>node</code>就是刚才容器保存的节点</p>\n<h4 id=\"不信你写个别的选择器试试？\"><a href=\"#不信你写个别的选择器试试？\" class=\"headerlink\" title=\"不信你写个别的选择器试试？\"></a>不信你写个别的选择器试试？</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> node2 = jQuery(<span class=\"string\">'ul &gt; li:nth-child(3)'</span>)            <span class=\"comment\">//传入一个选择器</span></span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'blue'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-我想通过选择器选好几个怎么办？\"><a href=\"#ii-我想通过选择器选好几个怎么办？\" class=\"headerlink\" title=\"ii.我想通过选择器选好几个怎么办？\"></a>ii.我想通过选择器选好几个怎么办？</h3><p>那可能要变了个大样了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nodeOrSelector</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> nodeOrSelector === <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"built_in\">document</span>.querySelectorAll(nodeOrSelector)    <span class=\"comment\">//希望得到一个伪数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;temp.length; i++)&#123;                    <span class=\"comment\">//不想要NodeList的属性</span></span><br><span class=\"line\">            nodes[i] = temp[i]                            <span class=\"comment\">//遍历容器一个一个加进去</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nodes.length = temp.length</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nodeOrSelector <span class=\"keyword\">instanceof</span> Node)&#123;               <span class=\"comment\">//考虑只有一个节点的情况</span></span><br><span class=\"line\">        nodes = &#123;<span class=\"number\">0</span>:nodeOrSelector, <span class=\"attr\">length</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nodes.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classes</span>)</span>&#123;                  <span class=\"comment\">//调用addClass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;                      <span class=\"comment\">//遍历class</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">            <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;nodes.length; i++)&#123;</span><br><span class=\"line\">                nodes[i].classList[methodName](key)      <span class=\"comment\">//逐步的放在伪数组的每一项里</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nodes.getText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;                         <span class=\"comment\">//加个功能，获取文本</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> texts = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt; nodes.length; i++)&#123;               <span class=\"comment\">//遍历后塞进去</span></span><br><span class=\"line\">            texts.push(nodes[i].textContent)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> texts                                    <span class=\"comment\">//返回文本</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nodes.setText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;                     <span class=\"comment\">//再加个功能，设置文本</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;nodes.length; i++)&#123;</span><br><span class=\"line\">            nodes[i].textContent = text          <span class=\"comment\">//把传进去的参数text赋予textContent</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//////////////////jQuery不喜欢写get和set所以合并成text/////////////////////</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    nodes.text = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(text === <span class=\"literal\">undefined</span>)&#123;                         <span class=\"comment\">//如果没传参数</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> texts = []                            <span class=\"comment\">//说明是想获取text</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt; nodes.length; i++)&#123;</span><br><span class=\"line\">                texts.push(nodes[i].textContent)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> texts</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;                                          <span class=\"comment\">//给了参数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;nodes.length; i++)&#123;        <span class=\"comment\">//说明是想设置text</span></span><br><span class=\"line\">                nodes[i].textContent = text</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node2 = jQuery(<span class=\"string\">'ul &gt; li'</span>)</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'blue'</span>])</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = node2.text()     <span class=\"comment\">//不给参数 === 获取</span></span><br><span class=\"line\">node2.text(<span class=\"string\">'hi'</span>)                <span class=\"comment\">//给了参数 === 设置</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-看看jQuery的文档吧\"><a href=\"#3-看看jQuery的文档吧\" class=\"headerlink\" title=\"3.看看jQuery的文档吧\"></a>3.看看jQuery的文档吧</h1><p><code>&lt;script src=&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</code><br>引入jQuery的库，就可以调用它的API了</p>\n<h2 id=\"I-API\"><a href=\"#I-API\" class=\"headerlink\" title=\"I.API\"></a>I.API</h2><p><a href=\"http://api.jquery.com\" target=\"_blank\" rel=\"noopener\">超多API</a></p>\n<h3 id=\"i-可以几个连着用\"><a href=\"#i-可以几个连着用\" class=\"headerlink\" title=\"i.可以几个连着用\"></a>i.可以几个连着用</h3><p>x.onclick = function(){<br>    nodes.removeClass(‘red’).addClass(‘green’)<br>}</p>\n<p>让大家喜爱的<strong>链式操作</strong></p>\n<h2 id=\"II-jQuery厉害在哪里\"><a href=\"#II-jQuery厉害在哪里\" class=\"headerlink\" title=\"II.jQuery厉害在哪里\"></a>II.jQuery厉害在哪里</h2><p>1.兼容性好，1.7兼容到IE6，现在放弃兼容了…<br>2.还有动画、AJAX等模块，DOM操作只是一小部分<br>3.功能强大，功能丰富<br>4.jQuery使用了<code>prototype</code>还有需要了解<code>new</code></p>\n<h2 id=\"III-的几种用法\"><a href=\"#III-的几种用法\" class=\"headerlink\" title=\"III.$()的几种用法\"></a>III.$()的几种用法</h2><h3 id=\"i-object\"><a href=\"#i-object\" class=\"headerlink\" title=\"i.$(object)\"></a>i.$(object)</h3><p>传入一个object，将该对象封装到jQuery对象中并返回</p>\n<h3 id=\"ii-callback\"><a href=\"#ii-callback\" class=\"headerlink\" title=\"ii.$(callback)\"></a>ii.$(callback)</h3><p>传进去参数是函数的时候，在document对象上绑定一个ready事件监听函数，当DOM结构加载完成的时候执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//以上代码和下面的效果是一样的</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//代码</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"iii-jQuery-object\"><a href=\"#iii-jQuery-object\" class=\"headerlink\" title=\"iii.$(jQuery object)\"></a>iii.$(jQuery object)</h3><p>传进去的参数是一个jQuery对象的时候，则创建该jQuery对象的一个副本并返回。副本与传入jQuery对象的引用完全相同的元素</p>\n<h3 id=\"iv\"><a href=\"#iv\" class=\"headerlink\" title=\"iv.$()\"></a>iv.$()</h3><p>什么都不传，返回一个空jQuery对象，属性length: 0<br>可以用来复用jQuery对象：<br>创建空jQuery对象，需要时先手动修改其中元素，再调用jQuery方法。避免重复创建jQuery对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>别看jQuery mobile</p>\n<h1 id=\"1-如何自己实现一个jQuery\"><a href=\"#1-如何自己实现一个jQuery\" class=\"headerlink\" title=\"1.如何自己实现一个jQuery\"></a>1.如何自己实现一个jQuery</h1><h2 id=\"I-找兄弟\"><a href=\"#I-找兄弟\" class=\"headerlink\" title=\"I.找兄弟\"></a>I.找兄弟</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item1\"</span>&gt;</span>选项1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item2\"</span>&gt;</span>选项2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item3\"</span>&gt;</span>选项3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item4\"</span>&gt;</span>选项4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item5\"</span>&gt;</span>选项5<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSiblings</span><span class=\"params\">(node)</span></span>&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> allChildren = item3.parentNode.children</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">var</span> array = &#123;length: <span class=\"number\">0</span>&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.length; i++)&#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">                <span class=\"keyword\">if</span>(allChildren[i]  !== node)&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">                array[array.length] = allChildren[i]</span></span><br><span class=\"line\"><span class=\"undefined\">                array.length += 1</span></span><br><span class=\"line\"><span class=\"undefined\">                &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">            &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">            <span class=\"keyword\">return</span> array</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"actionscript\">        getSiblings(item3)  <span class=\"comment\">//找兄弟（不包括自己）就完成了</span></span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"II-改class\"><a href=\"#II-改class\" class=\"headerlink\" title=\"II.改class\"></a>II.改class</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function addClass(node, classes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (let key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">var</span> value = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value) &#123;</span><br><span class=\"line\">            item3<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.add</span>(key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            item3<span class=\"selector-class\">.classList</span><span class=\"selector-class\">.remove</span>(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">addClass</span><span class=\"params\">(item3, &#123; a: true, b: false, c: true &#125;)</span></span>     <span class=\"comment\">//改class就完成了</span></span><br></pre></td></tr></table></figure>\n<p>优化一下？</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">addClass</span>(<span class=\"params\">node, classes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = <span class=\"keyword\">value</span> ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">        node.classList[methodName](key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">addClass(item3, &#123; a: <span class=\"literal\">true</span>, b: <span class=\"literal\">false</span>, c: <span class=\"literal\">true</span> &#125;)     <span class=\"comment\">//改class就完成了</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"III-如何优化代码\"><a href=\"#III-如何优化代码\" class=\"headerlink\" title=\"III.如何优化代码\"></a>III.如何优化代码</h2><h3 id=\"i-如果出现类似的代码，就存在优化的可能\"><a href=\"#i-如果出现类似的代码，就存在优化的可能\" class=\"headerlink\" title=\"i.如果出现类似的代码，就存在优化的可能\"></a>i.如果出现类似的代码，就存在优化的可能</h3><h2 id=\"IV-命名空间\"><a href=\"#IV-命名空间\" class=\"headerlink\" title=\"IV.命名空间\"></a>IV.命名空间</h2><p>辛辛苦苦封装的函数，得找个方法调用吧<br>所以找一个别人没取过的名字<br>然后放进去，既避免了覆盖变量，又可以方便调用</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.oracleDOM = &#123;&#125;</span><br><span class=\"line\">oracleDOM.getSiblings = <span class=\"function\">function <span class=\"title\">addClass</span>(<span class=\"params\">node, classes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">value</span>) &#123;</span><br><span class=\"line\">            item3.classList.<span class=\"keyword\">add</span>(key)</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            item3.classList.<span class=\"keyword\">remove</span>(key)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oracleDOM.addClass = function (node, classes) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> <span class=\"keyword\">value</span> = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = <span class=\"keyword\">value</span> ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">        node.classList[methodName](key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">oracleDOM.getSibling(item3)</span><br><span class=\"line\">oracleDOM.addClass(item3,[<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"i-还是感觉调用很麻烦？\"><a href=\"#i-还是感觉调用很麻烦？\" class=\"headerlink\" title=\"i.还是感觉调用很麻烦？\"></a>i.还是感觉调用很麻烦？</h3><p>加到原型链里面去</p>\n<h4 id=\"找兄弟：\"><a href=\"#找兄弟：\" class=\"headerlink\" title=\"找兄弟：\"></a>找兄弟：</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node.prorotype.getSiblings = function getSiblings(node)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">var</span> allChildren = this.parentNode.children</span><br><span class=\"line\">    <span class=\"built_in\">var</span> <span class=\"built_in\">array</span> = &#123;<span class=\"built_in\">length</span>: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"built_in\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.<span class=\"built_in\">length</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(allChildren[i]  !== this)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">array</span>[<span class=\"built_in\">array</span>.<span class=\"built_in\">length</span>] = allChildren[i]</span><br><span class=\"line\">        <span class=\"built_in\">array</span>.<span class=\"built_in\">length</span> += <span class=\"number\">1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"built_in\">array</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">item3.getSiblings()</span><br></pre></td></tr></table></figure>\n<p>这里面把node替换成this，使node作为第一个参数传进去。<br>所以item3.getSiblings()可以将item3作为第一个参数传进去</p>\n<h4 id=\"加Class：\"><a href=\"#加Class：\" class=\"headerlink\" title=\"加Class：\"></a>加Class：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node.prototype.addClass = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">classes</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">        <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.classList[methodName](key)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">item3.addClass([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<p>第一个参数node替换为this，在第五行的<code>node.classList</code>由调用时开头的<code>item3</code>传入</p>\n<h4 id=\"什么？看不懂这个this？\"><a href=\"#什么？看不懂这个this？\" class=\"headerlink\" title=\"什么？看不懂这个this？\"></a>什么？看不懂这个this？</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">item3<span class=\"selector-class\">.getSiblings</span><span class=\"selector-class\">.call</span>(item3)</span><br><span class=\"line\"><span class=\"comment\">//相当于 item3.getSiblings()</span></span><br><span class=\"line\">item3<span class=\"selector-class\">.addClass</span><span class=\"selector-class\">.call</span>(item3, [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br><span class=\"line\"><span class=\"comment\">//相当于 item3.addClass(['a','b','c'])</span></span><br></pre></td></tr></table></figure>\n<p>用call把第一个参数写出来是不是就清楚了<br><strong>不吃糖，好理解，吃糖，写的爽。</strong></p>\n<h3 id=\"ii-覆盖原型是不是有点不太好？\"><a href=\"#ii-覆盖原型是不是有点不太好？\" class=\"headerlink\" title=\"ii.覆盖原型是不是有点不太好？\"></a>ii.覆盖原型是不是有点不太好？</h3><h4 id=\"通过jQuery这个容器来封装他？\"><a href=\"#通过jQuery这个容器来封装他？\" class=\"headerlink\" title=\"通过jQuery这个容器来封装他？\"></a>通过jQuery这个容器来封装他？</h4><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(node)</span></span>&#123;         <span class=\"comment\">//名字改成jQuery</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        getSiblings: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> allChildren = node.parentNode.children      <span class=\"comment\">//这时候node不是this了</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = &#123;length: <span class=\"number\">0</span>&#125;                             <span class=\"comment\">//因为现在用的是node2</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(allChildren[i]  !== node)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>[<span class=\"keyword\">array</span>.length] = allChildren[i]</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>.length += <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">array</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addClass: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(classes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key in classes) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">            <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">            node.classList[methodName](key)             <span class=\"comment\">//这里也要改成node了</span></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node2 = jQuery(item3)</span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<p>所以jQuery框架就是这个思路，封装函数，随时调用，返回新对象。</p>\n<h1 id=\"2-jQuery其实还要厉害一点\"><a href=\"#2-jQuery其实还要厉害一点\" class=\"headerlink\" title=\"2.jQuery其实还要厉害一点\"></a>2.jQuery其实还要厉害一点</h1><h2 id=\"I-功能还是多\"><a href=\"#I-功能还是多\" class=\"headerlink\" title=\"I.功能还是多\"></a>I.功能还是多</h2><h3 id=\"i-不但能传节点，还能传别的\"><a href=\"#i-不但能传节点，还能传别的\" class=\"headerlink\" title=\"i.不但能传节点，还能传别的\"></a>i.不但能传节点，还能传别的</h3><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.jQuery = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(nodeOrSelector)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> node</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(typeof nodeOrSelector === <span class=\"string\">'string'</span>)&#123;             <span class=\"comment\">//让传入参数还能是个选择器</span></span><br><span class=\"line\">        node = document.querySelector(nodeOrSelector)</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;                                                  <span class=\"comment\">//内容审查</span></span><br><span class=\"line\">        node = nodeOrSelector</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">        getSiblings: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> allChildren = node.parentNode.children  </span><br><span class=\"line\">            <span class=\"keyword\">var</span> <span class=\"keyword\">array</span> = &#123;length: <span class=\"number\">0</span>&#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;allChildren.length; i++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(allChildren[i]  !== node)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>[<span class=\"keyword\">array</span>.length] = allChildren[i]</span><br><span class=\"line\">                    <span class=\"keyword\">array</span>.length += <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">array</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        addClass: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(classes)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key in classes) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">                <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">                node.classList[methodName](key)         <span class=\"comment\">//这里node用到了闭包哟</span></span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node2 = jQuery(<span class=\"string\">'#item3'</span>)            <span class=\"comment\">//传入一个选择器</span></span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'red'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])             <span class=\"comment\">//改这个选择器对应标签的class</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"这期间发生了什么？\"><a href=\"#这期间发生了什么？\" class=\"headerlink\" title=\"这期间发生了什么？\"></a>这期间发生了什么？</h4><p>使用<code>jQuery</code>调用字符串<code>#item3</code><br>内容审查发现他是字符串<br>找到相应节点<br><code>node</code>作为容器保存这个节点</p>\n<p><code>jQuery</code>返回一个<code>对象</code><br>对象有两个key：<code>getSiblings</code>和<code>addClass</code></p>\n<p>调用<code>getSiblings</code><br>调用<code>addClass</code><br>发现<code>addClass</code>获取了一个数组（<code>[&#39;red&#39;,&#39;b&#39;,&#39;c&#39;]</code>）以后遍历这个数组<br>之后不停地在<code>node</code>上添加classList<br>这个<code>node</code>就是刚才容器保存的节点</p>\n<h4 id=\"不信你写个别的选择器试试？\"><a href=\"#不信你写个别的选择器试试？\" class=\"headerlink\" title=\"不信你写个别的选择器试试？\"></a>不信你写个别的选择器试试？</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">var</span> node2 = jQuery(<span class=\"string\">'ul &gt; li:nth-child(3)'</span>)            <span class=\"comment\">//传入一个选择器</span></span><br><span class=\"line\">node2.getSiblings()</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'blue'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>])</span><br></pre></td></tr></table></figure>\n<h3 id=\"ii-我想通过选择器选好几个怎么办？\"><a href=\"#ii-我想通过选择器选好几个怎么办？\" class=\"headerlink\" title=\"ii.我想通过选择器选好几个怎么办？\"></a>ii.我想通过选择器选好几个怎么办？</h3><p>那可能要变了个大样了</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nodeOrSelector</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodes = &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> nodeOrSelector === <span class=\"string\">'string'</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> temp = <span class=\"built_in\">document</span>.querySelectorAll(nodeOrSelector)    <span class=\"comment\">//希望得到一个伪数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;temp.length; i++)&#123;                    <span class=\"comment\">//不想要NodeList的属性</span></span><br><span class=\"line\">            nodes[i] = temp[i]                            <span class=\"comment\">//遍历容器一个一个加进去</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nodes.length = temp.length</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nodeOrSelector <span class=\"keyword\">instanceof</span> Node)&#123;               <span class=\"comment\">//考虑只有一个节点的情况</span></span><br><span class=\"line\">        nodes = &#123;<span class=\"number\">0</span>:nodeOrSelector, <span class=\"attr\">length</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nodes.addClass = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">classes</span>)</span>&#123;                  <span class=\"comment\">//调用addClass</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> classes) &#123;                      <span class=\"comment\">//遍历class</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> value = classes[key]</span><br><span class=\"line\">            <span class=\"keyword\">var</span> methodName = value ? <span class=\"string\">'add'</span> : <span class=\"string\">'remove'</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;nodes.length; i++)&#123;</span><br><span class=\"line\">                nodes[i].classList[methodName](key)      <span class=\"comment\">//逐步的放在伪数组的每一项里</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nodes.getText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;                         <span class=\"comment\">//加个功能，获取文本</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> texts = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt; nodes.length; i++)&#123;               <span class=\"comment\">//遍历后塞进去</span></span><br><span class=\"line\">            texts.push(nodes[i].textContent)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> texts                                    <span class=\"comment\">//返回文本</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nodes.setText = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;                     <span class=\"comment\">//再加个功能，设置文本</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;nodes.length; i++)&#123;</span><br><span class=\"line\">            nodes[i].textContent = text          <span class=\"comment\">//把传进去的参数text赋予textContent</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//////////////////jQuery不喜欢写get和set所以合并成text/////////////////////</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    nodes.text = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">text</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(text === <span class=\"literal\">undefined</span>)&#123;                         <span class=\"comment\">//如果没传参数</span></span><br><span class=\"line\">            <span class=\"keyword\">var</span> texts = []                            <span class=\"comment\">//说明是想获取text</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt; nodes.length; i++)&#123;</span><br><span class=\"line\">                texts.push(nodes[i].textContent)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> texts</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;                                          <span class=\"comment\">//给了参数</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>; i&lt;nodes.length; i++)&#123;        <span class=\"comment\">//说明是想设置text</span></span><br><span class=\"line\">                nodes[i].textContent = text</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nodes</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node2 = jQuery(<span class=\"string\">'ul &gt; li'</span>)</span><br><span class=\"line\">node2.addClass([<span class=\"string\">'blue'</span>])</span><br><span class=\"line\"><span class=\"keyword\">var</span> text = node2.text()     <span class=\"comment\">//不给参数 === 获取</span></span><br><span class=\"line\">node2.text(<span class=\"string\">'hi'</span>)                <span class=\"comment\">//给了参数 === 设置</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"3-看看jQuery的文档吧\"><a href=\"#3-看看jQuery的文档吧\" class=\"headerlink\" title=\"3.看看jQuery的文档吧\"></a>3.看看jQuery的文档吧</h1><p><code>&lt;script src=&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</code><br>引入jQuery的库，就可以调用它的API了</p>\n<h2 id=\"I-API\"><a href=\"#I-API\" class=\"headerlink\" title=\"I.API\"></a>I.API</h2><p><a href=\"http://api.jquery.com\" target=\"_blank\" rel=\"noopener\">超多API</a></p>\n<h3 id=\"i-可以几个连着用\"><a href=\"#i-可以几个连着用\" class=\"headerlink\" title=\"i.可以几个连着用\"></a>i.可以几个连着用</h3><p>x.onclick = function(){<br>    nodes.removeClass(‘red’).addClass(‘green’)<br>}</p>\n<p>让大家喜爱的<strong>链式操作</strong></p>\n<h2 id=\"II-jQuery厉害在哪里\"><a href=\"#II-jQuery厉害在哪里\" class=\"headerlink\" title=\"II.jQuery厉害在哪里\"></a>II.jQuery厉害在哪里</h2><p>1.兼容性好，1.7兼容到IE6，现在放弃兼容了…<br>2.还有动画、AJAX等模块，DOM操作只是一小部分<br>3.功能强大，功能丰富<br>4.jQuery使用了<code>prototype</code>还有需要了解<code>new</code></p>\n<h2 id=\"III-的几种用法\"><a href=\"#III-的几种用法\" class=\"headerlink\" title=\"III.$()的几种用法\"></a>III.$()的几种用法</h2><h3 id=\"i-object\"><a href=\"#i-object\" class=\"headerlink\" title=\"i.$(object)\"></a>i.$(object)</h3><p>传入一个object，将该对象封装到jQuery对象中并返回</p>\n<h3 id=\"ii-callback\"><a href=\"#ii-callback\" class=\"headerlink\" title=\"ii.$(callback)\"></a>ii.$(callback)</h3><p>传进去参数是函数的时候，在document对象上绑定一个ready事件监听函数，当DOM结构加载完成的时候执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">//以上代码和下面的效果是一样的</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    ...<span class=\"comment\">//代码</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h3 id=\"iii-jQuery-object\"><a href=\"#iii-jQuery-object\" class=\"headerlink\" title=\"iii.$(jQuery object)\"></a>iii.$(jQuery object)</h3><p>传进去的参数是一个jQuery对象的时候，则创建该jQuery对象的一个副本并返回。副本与传入jQuery对象的引用完全相同的元素</p>\n<h3 id=\"iv\"><a href=\"#iv\" class=\"headerlink\" title=\"iv.$()\"></a>iv.$()</h3><p>什么都不传，返回一个空jQuery对象，属性length: 0<br>可以用来复用jQuery对象：<br>创建空jQuery对象，需要时先手动修改其中元素，再调用jQuery方法。避免重复创建jQuery对象。</p>\n"},{"title":"入门-CSS-II","date":"2018-03-27T10:00:56.000Z","_content":"## 1.伪类\n### I.从`::before`和`::after`讲起\n```\ndiv::before{\n  content:‘&’\n}\ndiv::after{\n  content:'$'\n}\n```\n这样div的内容的前后就会被加上`&`和`$`。\n而且他还能加各种属性。\n### II.还记得那只太极吗？\nCSS:\n```\nbody{\n  background-color: #444;\n}\n.balance{\n  width:200px;\n  height:200px;\n  border-radius: 50%;\n  background: linear-gradient(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); \n  position: relative;\n  margin:100px auto;\n}\n.dark{\n  width: 100px;\n  height: 100px;\n  border-radius:50%;\n  background: black;\n  position: absolute;\n  top: 25%;\n  left:0;\n}\n.light{\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  background: white;\n  position: absolute;\n  top: 25%;\n  left:50%;\n}\n.dark .l1{\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: white;\n  position:absolute;\n  top: 40px;\n  left: 40px;\n}\n.light .dr{\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: black;\n  position: absolute;\n  left: 40px;\n  top: 40px;\n}\n```\nHTML:\n```\n<div class=\"balance\">\n  <div class=\"light\">\n      <div class=\"dr\"></div>\n  </div>\n  <div class=\"dark\">\n      <div class=\"l1\"></div>\n  </div>\n</div>\n```\n很长对不对？\nCSS:\n```\nbody{\n  background-color: #444;\n}\n.balance{\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n  background: linear-gradient(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); \n  position: relative;\n  margin:100px auto;\n}\n.balance::before{\n  content: '';\n  width: 20px;\n  height: 20px;\n  border-radius:50%;\n  border: 40px solid black;\n  background: white;\n  position: absolute;\n  top: 25%;\n  left:0;\n}\n.balance::after{\n  content: '';\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: black;\n  position: absolute;\n  border: 40px solid white;\n  top: 25%;\n  left:50%;\n}\n```\nHTML:\n`<div class=\"balance\"></div>`\n是不是短了很多？\n只需要加上`::before`伪类之后在属性里添加`content: '';`甚至不需要加`display:block;`\n为什么要用伪类呢？因为可以少写很多<div>这边就少写了两个。\n### III.在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\n选择器的nth-child(第几个li)属性\n可以单独规定第几个li元素的属性。\n例：\n\t\n    section.Portfolio> nav >ol > li:nth-child(1){\n    margin-left:0\n    }\n这样第一个`<li>`就没有margin-left了。\n什么？`nth-child(1)`写起来太麻烦？\n你试试写`first-child`也可以。\n那么单独设定几个怎么做？\n`nth-child(even)`奇数项\n`nth-child(odd)`偶数项\n\n## 2.动画`@keyframes`\n### I.这个很容易敲错\n其实keyframes动画也是有生成器的。这里举个例子。\n```\n@keyframes spin{\n  from{\n    transform: rotate(0deg)\n  }\n  to{\n    transform: rotate(360deg)\n  }\n}\n```\n这里设置了动画的内容\n之后在想让他这么动的元素里面加上\n```\n.balance{\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n  background: linear-gradient(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); \n  position: relative;\n  margin:100px auto;\n  animation-duration: 3s; //动画时间： 3s\n  animation-name: spin;  //动画名称：spin（就是上面@keyframes后面的名字）\n  animation-iteration-count: infinite;  //这行代码规定了动画循环进行\n  animation-timing-function: linear;  //这行动画规定了动画线性播放（就是匀速）\n}\n```\n#### i.除此之外还有`transition`属性\n用来做一些小的变化`transition: all 0.3s; //表达了指定元素的一切变化的都加上transition变化属性，时间为0.3s`\n### II.所以还是找Generator吧\n[这个是奇怪的动画的网站](http://www.theappguruz.com/tag-tools/web/CSSAnimations/)\n\n## 3.传说中的布局\n### I.左右布局\n#### i.通过定位的方法\nHTML：\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n<div class=\"box1\">\n  <div class=\"left\">这边定宽</div>\n  <div class=\"right\">这边自适应</div>\n</div>\n</body>\n</html>\n```\nCSS：\n```\n.box1{\n  position: relative;\n  width: 100%;\n  height: 100px;\n}\n.box1 .left{\n  position: absolute;\n  width: 100px;\n  height: 100%;\n  background-color: red;\n}\n\n.box1 .right{\n  margin-left: 100px;\n  width: 100%;\n  height: 100%;\n  background-color: black;\n  }\n```\n通过定位属性以父元素box1为`position:relative`左边红盒子绝对定位吸附父元素。\n右侧黑盒子用`margin-left: 100px;`让出红盒子的位置，同时`width: 100%;`来占据剩下的空间。来完成根据宽度自适应。\n\n#### ii.通过float浮动\nHTML:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n<div class=\"box1\" clearfix>\n  <div class=\"left\">这边浮动</div>\n  <div class=\"right\">这边自适应</div>\n</div>\n</body>\n</html>\n```\nCSS:\n```\n.clearfix::after{\n  content: '';\n  display: block;\n  clear: both;\n}\n.box1 .left {\n  float: left;\n  width: 100px;\n  height: 100px;\n  background-color: red;\n}\n.box1 .right {\n  margin-left: 100px;\n  height: 100px;\n  background-color: black;\n  display: inline-block;\n  vertical-align: top;  //修复上面那行造成的裂隙。\n}\n```\n通过让左侧红盒子添加`float: left;`脱离文档流（记得在父元素加clearfix伪类以防高度坍塌）\n同时右侧黑框`margin-left: 100px;`空出左侧红盒子的位置。\n这时候有个小问题：\n###### 1.红盒子已经浮动了\n那么黑盒子会无视红盒子的位置尽量占满一整行。那它可能会覆盖红盒子呀。\n###### 2.有个叫做BFC的盒子：\n①若浮动元素的块状兄弟元素为BFC，则不会占满一整行，而是根据浮动元素的宽度，占据该行剩下的宽度，避免与浮动元素重叠。\n②浮动元素与其块状BFC兄弟元素之间的margin可以生效，这将继续减少兄弟元素的宽度。\n③为了让黑盒子把红盒子的位置让出来，我们选择触发BFC：\n`float`的值不为`none`\n`position`的值不为`static`或者`relative`\n`display`的值为`table-cell`, `table-caption`, `inline-block`, `flex`, 或者 `inline-flex`中的其中一个。\n`overflow`的值不为`visible`\n**这样就做到了左右两边：红盒子不定宽，黑盒子自适应。**\n\n### II.传说中的圣杯布局\nHTML:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n  <div class=\"box\" clearfix>\n    <div class=\"middle\">middle</div>   //顺序，先中再左右。\n    <div class=\"left\">left</div>\n    <div class=\"right\">right</div>\n  </div>\n</body>\n</html>\n```\ncss:\n```\n.clearfix::after{    //清除浮动伪类\n  content: '';\n  display: block;\n  clear: both;\n}\n.box{\n  padding:  0 100px;  //最外层给红黄两个盒子留宽度\n  height: 100px;\n}\n.box .middle {\n  float: left;\n  width: 100%;\n  height: 100%;\n  background-color: black;\n}\n.box .left {\n  float: left;\n  width: 100px;\n  margin-left: -100%;\n  background-color: red;\n  position: relative;\n  left: -100px;    //往左边推出去\n  height: 100%;\n}\n.box .right {\n  float: left;\n  width: 100px;\n  margin-left: -100px;\n  background-color: yellow;\n  position: relative;\n  right: -100px;    //往右边推出去\n  height:100%;\n}\n```\n给最外面的`box`加`padding`让出左右红黄盒子的位置。\n给红黄盒子添加`position: relative;`让黑盒子不会受到他们俩位置变化的影响。\n### III.关于居中\n#### i.让图片居中\n```\n  background: url(\"wallhaven-w-min.jpg\") no-repeat center center ;\n\tbackground-size: cover;\n```\n#### ii.让div水平居中\n```\n\tmargin-left:auto;\n\tmargin-right:auto;\n```\n#### iii.内联元素居中：\n给内联元素的父元素加:`text-align:center;`\n如果不是内联元素，但是想让它居中怎么办？\n`display:inline-block`了解一下。但是但是但是加完以后下面会有诡异的裂隙，所以需要：\n`vertical-align: top;`\n\n#### iv.让div在父级元素中绝对居中\n父级元素加：`position:relative; `\n子元素(需要对齐的div):\n```\ndiv{\n \tposition: absolute;\n \ttop: 0;\n \tleft: 0;\n \tbottom: 0;\n \tright: 0;\n \tmargin: auto;\n}\n```\n\n## 4.写点别的\n### I.`src`和`href`有啥子区别？\n在写`link`的时候，必须要写`href`\n在`<a>`标签的时候用`href`\n在写`script`的时候，必须要写`src`\n在写`img`的时候，必须要写`src`\n在写`iframe`的时候，必须要写`src`\n\n如果一定要区别的话`href`一般指的外部文档\n`src`会嵌入文档里\n**其实没什么规律...就是记住，多用就行**","source":"_posts/入门-CSS-II.md","raw":"---\ntitle: 入门-CSS-II\ndate: 2018-03-27 18:00:56\ntags: CSS\n---\n## 1.伪类\n### I.从`::before`和`::after`讲起\n```\ndiv::before{\n  content:‘&’\n}\ndiv::after{\n  content:'$'\n}\n```\n这样div的内容的前后就会被加上`&`和`$`。\n而且他还能加各种属性。\n### II.还记得那只太极吗？\nCSS:\n```\nbody{\n  background-color: #444;\n}\n.balance{\n  width:200px;\n  height:200px;\n  border-radius: 50%;\n  background: linear-gradient(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); \n  position: relative;\n  margin:100px auto;\n}\n.dark{\n  width: 100px;\n  height: 100px;\n  border-radius:50%;\n  background: black;\n  position: absolute;\n  top: 25%;\n  left:0;\n}\n.light{\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  background: white;\n  position: absolute;\n  top: 25%;\n  left:50%;\n}\n.dark .l1{\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: white;\n  position:absolute;\n  top: 40px;\n  left: 40px;\n}\n.light .dr{\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: black;\n  position: absolute;\n  left: 40px;\n  top: 40px;\n}\n```\nHTML:\n```\n<div class=\"balance\">\n  <div class=\"light\">\n      <div class=\"dr\"></div>\n  </div>\n  <div class=\"dark\">\n      <div class=\"l1\"></div>\n  </div>\n</div>\n```\n很长对不对？\nCSS:\n```\nbody{\n  background-color: #444;\n}\n.balance{\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n  background: linear-gradient(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); \n  position: relative;\n  margin:100px auto;\n}\n.balance::before{\n  content: '';\n  width: 20px;\n  height: 20px;\n  border-radius:50%;\n  border: 40px solid black;\n  background: white;\n  position: absolute;\n  top: 25%;\n  left:0;\n}\n.balance::after{\n  content: '';\n  width: 20px;\n  height: 20px;\n  border-radius: 50%;\n  background: black;\n  position: absolute;\n  border: 40px solid white;\n  top: 25%;\n  left:50%;\n}\n```\nHTML:\n`<div class=\"balance\"></div>`\n是不是短了很多？\n只需要加上`::before`伪类之后在属性里添加`content: '';`甚至不需要加`display:block;`\n为什么要用伪类呢？因为可以少写很多<div>这边就少写了两个。\n### III.在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\n选择器的nth-child(第几个li)属性\n可以单独规定第几个li元素的属性。\n例：\n\t\n    section.Portfolio> nav >ol > li:nth-child(1){\n    margin-left:0\n    }\n这样第一个`<li>`就没有margin-left了。\n什么？`nth-child(1)`写起来太麻烦？\n你试试写`first-child`也可以。\n那么单独设定几个怎么做？\n`nth-child(even)`奇数项\n`nth-child(odd)`偶数项\n\n## 2.动画`@keyframes`\n### I.这个很容易敲错\n其实keyframes动画也是有生成器的。这里举个例子。\n```\n@keyframes spin{\n  from{\n    transform: rotate(0deg)\n  }\n  to{\n    transform: rotate(360deg)\n  }\n}\n```\n这里设置了动画的内容\n之后在想让他这么动的元素里面加上\n```\n.balance{\n  width: 200px;\n  height: 200px;\n  border-radius: 50%;\n  background: linear-gradient(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); \n  position: relative;\n  margin:100px auto;\n  animation-duration: 3s; //动画时间： 3s\n  animation-name: spin;  //动画名称：spin（就是上面@keyframes后面的名字）\n  animation-iteration-count: infinite;  //这行代码规定了动画循环进行\n  animation-timing-function: linear;  //这行动画规定了动画线性播放（就是匀速）\n}\n```\n#### i.除此之外还有`transition`属性\n用来做一些小的变化`transition: all 0.3s; //表达了指定元素的一切变化的都加上transition变化属性，时间为0.3s`\n### II.所以还是找Generator吧\n[这个是奇怪的动画的网站](http://www.theappguruz.com/tag-tools/web/CSSAnimations/)\n\n## 3.传说中的布局\n### I.左右布局\n#### i.通过定位的方法\nHTML：\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n<div class=\"box1\">\n  <div class=\"left\">这边定宽</div>\n  <div class=\"right\">这边自适应</div>\n</div>\n</body>\n</html>\n```\nCSS：\n```\n.box1{\n  position: relative;\n  width: 100%;\n  height: 100px;\n}\n.box1 .left{\n  position: absolute;\n  width: 100px;\n  height: 100%;\n  background-color: red;\n}\n\n.box1 .right{\n  margin-left: 100px;\n  width: 100%;\n  height: 100%;\n  background-color: black;\n  }\n```\n通过定位属性以父元素box1为`position:relative`左边红盒子绝对定位吸附父元素。\n右侧黑盒子用`margin-left: 100px;`让出红盒子的位置，同时`width: 100%;`来占据剩下的空间。来完成根据宽度自适应。\n\n#### ii.通过float浮动\nHTML:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n<div class=\"box1\" clearfix>\n  <div class=\"left\">这边浮动</div>\n  <div class=\"right\">这边自适应</div>\n</div>\n</body>\n</html>\n```\nCSS:\n```\n.clearfix::after{\n  content: '';\n  display: block;\n  clear: both;\n}\n.box1 .left {\n  float: left;\n  width: 100px;\n  height: 100px;\n  background-color: red;\n}\n.box1 .right {\n  margin-left: 100px;\n  height: 100px;\n  background-color: black;\n  display: inline-block;\n  vertical-align: top;  //修复上面那行造成的裂隙。\n}\n```\n通过让左侧红盒子添加`float: left;`脱离文档流（记得在父元素加clearfix伪类以防高度坍塌）\n同时右侧黑框`margin-left: 100px;`空出左侧红盒子的位置。\n这时候有个小问题：\n###### 1.红盒子已经浮动了\n那么黑盒子会无视红盒子的位置尽量占满一整行。那它可能会覆盖红盒子呀。\n###### 2.有个叫做BFC的盒子：\n①若浮动元素的块状兄弟元素为BFC，则不会占满一整行，而是根据浮动元素的宽度，占据该行剩下的宽度，避免与浮动元素重叠。\n②浮动元素与其块状BFC兄弟元素之间的margin可以生效，这将继续减少兄弟元素的宽度。\n③为了让黑盒子把红盒子的位置让出来，我们选择触发BFC：\n`float`的值不为`none`\n`position`的值不为`static`或者`relative`\n`display`的值为`table-cell`, `table-caption`, `inline-block`, `flex`, 或者 `inline-flex`中的其中一个。\n`overflow`的值不为`visible`\n**这样就做到了左右两边：红盒子不定宽，黑盒子自适应。**\n\n### II.传说中的圣杯布局\nHTML:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <title>JS Bin</title>\n</head>\n<body>\n  <div class=\"box\" clearfix>\n    <div class=\"middle\">middle</div>   //顺序，先中再左右。\n    <div class=\"left\">left</div>\n    <div class=\"right\">right</div>\n  </div>\n</body>\n</html>\n```\ncss:\n```\n.clearfix::after{    //清除浮动伪类\n  content: '';\n  display: block;\n  clear: both;\n}\n.box{\n  padding:  0 100px;  //最外层给红黄两个盒子留宽度\n  height: 100px;\n}\n.box .middle {\n  float: left;\n  width: 100%;\n  height: 100%;\n  background-color: black;\n}\n.box .left {\n  float: left;\n  width: 100px;\n  margin-left: -100%;\n  background-color: red;\n  position: relative;\n  left: -100px;    //往左边推出去\n  height: 100%;\n}\n.box .right {\n  float: left;\n  width: 100px;\n  margin-left: -100px;\n  background-color: yellow;\n  position: relative;\n  right: -100px;    //往右边推出去\n  height:100%;\n}\n```\n给最外面的`box`加`padding`让出左右红黄盒子的位置。\n给红黄盒子添加`position: relative;`让黑盒子不会受到他们俩位置变化的影响。\n### III.关于居中\n#### i.让图片居中\n```\n  background: url(\"wallhaven-w-min.jpg\") no-repeat center center ;\n\tbackground-size: cover;\n```\n#### ii.让div水平居中\n```\n\tmargin-left:auto;\n\tmargin-right:auto;\n```\n#### iii.内联元素居中：\n给内联元素的父元素加:`text-align:center;`\n如果不是内联元素，但是想让它居中怎么办？\n`display:inline-block`了解一下。但是但是但是加完以后下面会有诡异的裂隙，所以需要：\n`vertical-align: top;`\n\n#### iv.让div在父级元素中绝对居中\n父级元素加：`position:relative; `\n子元素(需要对齐的div):\n```\ndiv{\n \tposition: absolute;\n \ttop: 0;\n \tleft: 0;\n \tbottom: 0;\n \tright: 0;\n \tmargin: auto;\n}\n```\n\n## 4.写点别的\n### I.`src`和`href`有啥子区别？\n在写`link`的时候，必须要写`href`\n在`<a>`标签的时候用`href`\n在写`script`的时候，必须要写`src`\n在写`img`的时候，必须要写`src`\n在写`iframe`的时候，必须要写`src`\n\n如果一定要区别的话`href`一般指的外部文档\n`src`会嵌入文档里\n**其实没什么规律...就是记住，多用就行**","slug":"入门-CSS-II","published":1,"updated":"2018-04-10T04:22:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3r000jt2g3ggen7p1l","content":"<h2 id=\"1-伪类\"><a href=\"#1-伪类\" class=\"headerlink\" title=\"1.伪类\"></a>1.伪类</h2><h3 id=\"I-从-before和-after讲起\"><a href=\"#I-从-before和-after讲起\" class=\"headerlink\" title=\"I.从::before和::after讲起\"></a>I.从<code>::before</code>和<code>::after</code>讲起</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:‘&amp;’</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">'$'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样div的内容的前后就会被加上<code>&amp;</code>和<code>$</code>。<br>而且他还能加各种属性。</p>\n<h3 id=\"II-还记得那只太极吗？\"><a href=\"#II-还记得那只太极吗？\" class=\"headerlink\" title=\"II.还记得那只太极吗？\"></a>II.还记得那只太极吗？</h3><p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.dark</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.light</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.dark</span> <span class=\"selector-class\">.l1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.light</span> <span class=\"selector-class\">.dr</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>HTML:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"balance\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"light\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"dr\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"dark\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"l1\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>很长对不对？<br>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">40px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">40px</span> solid white;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>HTML:<br><code>&lt;div class=&quot;balance&quot;&gt;&lt;/div&gt;</code><br>是不是短了很多？<br>只需要加上<code>::before</code>伪类之后在属性里添加<code>content: &#39;&#39;;</code>甚至不需要加<code>display:block;</code><br>为什么要用伪类呢？因为可以少写很多<div>这边就少写了两个。</div></p>\n<h3 id=\"III-在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\"><a href=\"#III-在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\" class=\"headerlink\" title=\"III.在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\"></a>III.在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。</h3><p>选择器的nth-child(第几个li)属性<br>可以单独规定第几个li元素的属性。<br>例：</p>\n<pre><code>section.Portfolio&gt; nav &gt;ol &gt; li:nth-child(1){\nmargin-left:0\n}\n</code></pre><p>这样第一个<code>&lt;li&gt;</code>就没有margin-left了。<br>什么？<code>nth-child(1)</code>写起来太麻烦？<br>你试试写<code>first-child</code>也可以。<br>那么单独设定几个怎么做？<br><code>nth-child(even)</code>奇数项<br><code>nth-child(odd)</code>偶数项</p>\n<h2 id=\"2-动画-keyframes\"><a href=\"#2-动画-keyframes\" class=\"headerlink\" title=\"2.动画@keyframes\"></a>2.动画<code>@keyframes</code></h2><h3 id=\"I-这个很容易敲错\"><a href=\"#I-这个很容易敲错\" class=\"headerlink\" title=\"I.这个很容易敲错\"></a>I.这个很容易敲错</h3><p>其实keyframes动画也是有生成器的。这里举个例子。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> spin&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(0deg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(360deg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里设置了动画的内容<br>之后在想让他这么动的元素里面加上<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.balance</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: linear-gradient(to bottom, <span class=\"number\">#ffffff</span> <span class=\"number\">0%</span>,<span class=\"number\">#ffffff</span> <span class=\"number\">50%</span>,<span class=\"number\">#000000</span> <span class=\"number\">51%</span>,<span class=\"number\">#000000</span> <span class=\"number\">100%</span>); </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">animation-duration</span>: <span class=\"number\">3s</span>; <span class=\"comment\">//动画时间： 3s</span></span><br><span class=\"line\">  <span class=\"attribute\">animation-name</span>: spin;  <span class=\"comment\">//动画名称：spin（就是上面@keyframes后面的名字）</span></span><br><span class=\"line\">  <span class=\"attribute\">animation-iteration-count</span>: infinite;  <span class=\"comment\">//这行代码规定了动画循环进行</span></span><br><span class=\"line\">  <span class=\"attribute\">animation-timing-function</span>: linear;  <span class=\"comment\">//这行动画规定了动画线性播放（就是匀速）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"i-除此之外还有transition属性\"><a href=\"#i-除此之外还有transition属性\" class=\"headerlink\" title=\"i.除此之外还有transition属性\"></a>i.除此之外还有<code>transition</code>属性</h4><p>用来做一些小的变化<code>transition: all 0.3s; //表达了指定元素的一切变化的都加上transition变化属性，时间为0.3s</code></p>\n<h3 id=\"II-所以还是找Generator吧\"><a href=\"#II-所以还是找Generator吧\" class=\"headerlink\" title=\"II.所以还是找Generator吧\"></a>II.所以还是找Generator吧</h3><p><a href=\"http://www.theappguruz.com/tag-tools/web/CSSAnimations/\" target=\"_blank\" rel=\"noopener\">这个是奇怪的动画的网站</a></p>\n<h2 id=\"3-传说中的布局\"><a href=\"#3-传说中的布局\" class=\"headerlink\" title=\"3.传说中的布局\"></a>3.传说中的布局</h2><h3 id=\"I-左右布局\"><a href=\"#I-左右布局\" class=\"headerlink\" title=\"I.左右布局\"></a>I.左右布局</h3><h4 id=\"i-通过定位的方法\"><a href=\"#i-通过定位的方法\" class=\"headerlink\" title=\"i.通过定位的方法\"></a>i.通过定位的方法</h4><p>HTML：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>这边定宽<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>这边自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过定位属性以父元素box1为<code>position:relative</code>左边红盒子绝对定位吸附父元素。<br>右侧黑盒子用<code>margin-left: 100px;</code>让出红盒子的位置，同时<code>width: 100%;</code>来占据剩下的空间。来完成根据宽度自适应。</p>\n<h4 id=\"ii-通过float浮动\"><a href=\"#ii-通过float浮动\" class=\"headerlink\" title=\"ii.通过float浮动\"></a>ii.通过float浮动</h4><p>HTML:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span> <span class=\"attr\">clearfix</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>这边浮动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>这边自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>::after&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;  <span class=\"comment\">//修复上面那行造成的裂隙。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过让左侧红盒子添加<code>float: left;</code>脱离文档流（记得在父元素加clearfix伪类以防高度坍塌）<br>同时右侧黑框<code>margin-left: 100px;</code>空出左侧红盒子的位置。<br>这时候有个小问题：</p>\n<h6 id=\"1-红盒子已经浮动了\"><a href=\"#1-红盒子已经浮动了\" class=\"headerlink\" title=\"1.红盒子已经浮动了\"></a>1.红盒子已经浮动了</h6><p>那么黑盒子会无视红盒子的位置尽量占满一整行。那它可能会覆盖红盒子呀。</p>\n<h6 id=\"2-有个叫做BFC的盒子：\"><a href=\"#2-有个叫做BFC的盒子：\" class=\"headerlink\" title=\"2.有个叫做BFC的盒子：\"></a>2.有个叫做BFC的盒子：</h6><p>①若浮动元素的块状兄弟元素为BFC，则不会占满一整行，而是根据浮动元素的宽度，占据该行剩下的宽度，避免与浮动元素重叠。<br>②浮动元素与其块状BFC兄弟元素之间的margin可以生效，这将继续减少兄弟元素的宽度。<br>③为了让黑盒子把红盒子的位置让出来，我们选择触发BFC：<br><code>float</code>的值不为<code>none</code><br><code>position</code>的值不为<code>static</code>或者<code>relative</code><br><code>display</code>的值为<code>table-cell</code>, <code>table-caption</code>, <code>inline-block</code>, <code>flex</code>, 或者 <code>inline-flex</code>中的其中一个。<br><code>overflow</code>的值不为<code>visible</code><br><strong>这样就做到了左右两边：红盒子不定宽，黑盒子自适应。</strong></p>\n<h3 id=\"II-传说中的圣杯布局\"><a href=\"#II-传说中的圣杯布局\" class=\"headerlink\" title=\"II.传说中的圣杯布局\"></a>II.传说中的圣杯布局</h3><p>HTML:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">clearfix</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   //顺序，先中再左右。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>css:<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>::after&#123;    <span class=\"comment\">//清除浮动伪类</span></span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:  <span class=\"number\">0</span> <span class=\"number\">100px</span>;  <span class=\"comment\">//最外层给红黄两个盒子留宽度</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-class\">.middle</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;    <span class=\"comment\">//往左边推出去</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: -<span class=\"number\">100px</span>;    <span class=\"comment\">//往右边推出去</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>给最外面的<code>box</code>加<code>padding</code>让出左右红黄盒子的位置。<br>给红黄盒子添加<code>position: relative;</code>让黑盒子不会受到他们俩位置变化的影响。</p>\n<h3 id=\"III-关于居中\"><a href=\"#III-关于居中\" class=\"headerlink\" title=\"III.关于居中\"></a>III.关于居中</h3><h4 id=\"i-让图片居中\"><a href=\"#i-让图片居中\" class=\"headerlink\" title=\"i.让图片居中\"></a>i.让图片居中</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">background</span>: url(<span class=\"string\">\"wallhaven-w-min.jpg\"</span>) no-repeat <span class=\"built_in\">center</span> <span class=\"built_in\">center</span> ;</span><br><span class=\"line\"><span class=\"built_in\">background</span>-size: cover;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ii-让div水平居中\"><a href=\"#ii-让div水平居中\" class=\"headerlink\" title=\"ii.让div水平居中\"></a>ii.让div水平居中</h4><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin-<span class=\"built_in\">left</span>:<span class=\"built_in\">auto</span>;</span><br><span class=\"line\">margin-<span class=\"built_in\">right</span>:<span class=\"built_in\">auto</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"iii-内联元素居中：\"><a href=\"#iii-内联元素居中：\" class=\"headerlink\" title=\"iii.内联元素居中：\"></a>iii.内联元素居中：</h4><p>给内联元素的父元素加:<code>text-align:center;</code><br>如果不是内联元素，但是想让它居中怎么办？<br><code>display:inline-block</code>了解一下。但是但是但是加完以后下面会有诡异的裂隙，所以需要：<br><code>vertical-align: top;</code></p>\n<h4 id=\"iv-让div在父级元素中绝对居中\"><a href=\"#iv-让div在父级元素中绝对居中\" class=\"headerlink\" title=\"iv.让div在父级元素中绝对居中\"></a>iv.让div在父级元素中绝对居中</h4><p>父级元素加：<code>position:relative;</code><br>子元素(需要对齐的div):<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\"> \t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> \t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-写点别的\"><a href=\"#4-写点别的\" class=\"headerlink\" title=\"4.写点别的\"></a>4.写点别的</h2><h3 id=\"I-src和href有啥子区别？\"><a href=\"#I-src和href有啥子区别？\" class=\"headerlink\" title=\"I.src和href有啥子区别？\"></a>I.<code>src</code>和<code>href</code>有啥子区别？</h3><p>在写<code>link</code>的时候，必须要写<code>href</code><br>在<code>&lt;a&gt;</code>标签的时候用<code>href</code><br>在写<code>script</code>的时候，必须要写<code>src</code><br>在写<code>img</code>的时候，必须要写<code>src</code><br>在写<code>iframe</code>的时候，必须要写<code>src</code></p>\n<p>如果一定要区别的话<code>href</code>一般指的外部文档<br><code>src</code>会嵌入文档里<br><strong>其实没什么规律…就是记住，多用就行</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-伪类\"><a href=\"#1-伪类\" class=\"headerlink\" title=\"1.伪类\"></a>1.伪类</h2><h3 id=\"I-从-before和-after讲起\"><a href=\"#I-从-before和-after讲起\" class=\"headerlink\" title=\"I.从::before和::after讲起\"></a>I.从<code>::before</code>和<code>::after</code>讲起</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:‘&amp;’</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>:<span class=\"string\">'$'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样div的内容的前后就会被加上<code>&amp;</code>和<code>$</code>。<br>而且他还能加各种属性。</p>\n<h3 id=\"II-还记得那只太极吗？\"><a href=\"#II-还记得那只太极吗？\" class=\"headerlink\" title=\"II.还记得那只太极吗？\"></a>II.还记得那只太极吗？</h3><p>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.dark</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.light</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.dark</span> <span class=\"selector-class\">.l1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.light</span> <span class=\"selector-class\">.dr</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>HTML:<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"balance\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"light\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"dr\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"dark\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"keyword\">div</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"l1\"</span>&gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">  &lt;/<span class=\"keyword\">div</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure></p>\n<p>很长对不对？<br>CSS:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#444</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">linear-gradient</span>(to bottom, #ffffff 0%,#ffffff 50%,#000000 51%,#000000 100%); </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span><span class=\"selector-pseudo\">::before</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">40px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: white;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.balance</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">40px</span> solid white;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>HTML:<br><code>&lt;div class=&quot;balance&quot;&gt;&lt;/div&gt;</code><br>是不是短了很多？<br>只需要加上<code>::before</code>伪类之后在属性里添加<code>content: &#39;&#39;;</code>甚至不需要加<code>display:block;</code><br>为什么要用伪类呢？因为可以少写很多<div>这边就少写了两个。</div></p>\n<h3 id=\"III-在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\"><a href=\"#III-在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\" class=\"headerlink\" title=\"III.在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。\"></a>III.在设置margin、padding的时候不希望表格ol或者ul的边上的li设置到。</h3><p>选择器的nth-child(第几个li)属性<br>可以单独规定第几个li元素的属性。<br>例：</p>\n<pre><code>section.Portfolio&gt; nav &gt;ol &gt; li:nth-child(1){\nmargin-left:0\n}\n</code></pre><p>这样第一个<code>&lt;li&gt;</code>就没有margin-left了。<br>什么？<code>nth-child(1)</code>写起来太麻烦？<br>你试试写<code>first-child</code>也可以。<br>那么单独设定几个怎么做？<br><code>nth-child(even)</code>奇数项<br><code>nth-child(odd)</code>偶数项</p>\n<h2 id=\"2-动画-keyframes\"><a href=\"#2-动画-keyframes\" class=\"headerlink\" title=\"2.动画@keyframes\"></a>2.动画<code>@keyframes</code></h2><h3 id=\"I-这个很容易敲错\"><a href=\"#I-这个很容易敲错\" class=\"headerlink\" title=\"I.这个很容易敲错\"></a>I.这个很容易敲错</h3><p>其实keyframes动画也是有生成器的。这里举个例子。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">keyframes</span> spin&#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(0deg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-tag\">to</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(360deg)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里设置了动画的内容<br>之后在想让他这么动的元素里面加上<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.balance</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: linear-gradient(to bottom, <span class=\"number\">#ffffff</span> <span class=\"number\">0%</span>,<span class=\"number\">#ffffff</span> <span class=\"number\">50%</span>,<span class=\"number\">#000000</span> <span class=\"number\">51%</span>,<span class=\"number\">#000000</span> <span class=\"number\">100%</span>); </span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">animation-duration</span>: <span class=\"number\">3s</span>; <span class=\"comment\">//动画时间： 3s</span></span><br><span class=\"line\">  <span class=\"attribute\">animation-name</span>: spin;  <span class=\"comment\">//动画名称：spin（就是上面@keyframes后面的名字）</span></span><br><span class=\"line\">  <span class=\"attribute\">animation-iteration-count</span>: infinite;  <span class=\"comment\">//这行代码规定了动画循环进行</span></span><br><span class=\"line\">  <span class=\"attribute\">animation-timing-function</span>: linear;  <span class=\"comment\">//这行动画规定了动画线性播放（就是匀速）</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"i-除此之外还有transition属性\"><a href=\"#i-除此之外还有transition属性\" class=\"headerlink\" title=\"i.除此之外还有transition属性\"></a>i.除此之外还有<code>transition</code>属性</h4><p>用来做一些小的变化<code>transition: all 0.3s; //表达了指定元素的一切变化的都加上transition变化属性，时间为0.3s</code></p>\n<h3 id=\"II-所以还是找Generator吧\"><a href=\"#II-所以还是找Generator吧\" class=\"headerlink\" title=\"II.所以还是找Generator吧\"></a>II.所以还是找Generator吧</h3><p><a href=\"http://www.theappguruz.com/tag-tools/web/CSSAnimations/\" target=\"_blank\" rel=\"noopener\">这个是奇怪的动画的网站</a></p>\n<h2 id=\"3-传说中的布局\"><a href=\"#3-传说中的布局\" class=\"headerlink\" title=\"3.传说中的布局\"></a>3.传说中的布局</h2><h3 id=\"I-左右布局\"><a href=\"#I-左右布局\" class=\"headerlink\" title=\"I.左右布局\"></a>I.左右布局</h3><h4 id=\"i-通过定位的方法\"><a href=\"#i-通过定位的方法\" class=\"headerlink\" title=\"i.通过定位的方法\"></a>i.通过定位的方法</h4><p>HTML：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>这边定宽<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>这边自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box1</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.left</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.right</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过定位属性以父元素box1为<code>position:relative</code>左边红盒子绝对定位吸附父元素。<br>右侧黑盒子用<code>margin-left: 100px;</code>让出红盒子的位置，同时<code>width: 100%;</code>来占据剩下的空间。来完成根据宽度自适应。</p>\n<h4 id=\"ii-通过float浮动\"><a href=\"#ii-通过float浮动\" class=\"headerlink\" title=\"ii.通过float浮动\"></a>ii.通过float浮动</h4><p>HTML:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box1\"</span> <span class=\"attr\">clearfix</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>这边浮动<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>这边自适应<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>CSS:<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>::after&#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;  <span class=\"comment\">//修复上面那行造成的裂隙。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过让左侧红盒子添加<code>float: left;</code>脱离文档流（记得在父元素加clearfix伪类以防高度坍塌）<br>同时右侧黑框<code>margin-left: 100px;</code>空出左侧红盒子的位置。<br>这时候有个小问题：</p>\n<h6 id=\"1-红盒子已经浮动了\"><a href=\"#1-红盒子已经浮动了\" class=\"headerlink\" title=\"1.红盒子已经浮动了\"></a>1.红盒子已经浮动了</h6><p>那么黑盒子会无视红盒子的位置尽量占满一整行。那它可能会覆盖红盒子呀。</p>\n<h6 id=\"2-有个叫做BFC的盒子：\"><a href=\"#2-有个叫做BFC的盒子：\" class=\"headerlink\" title=\"2.有个叫做BFC的盒子：\"></a>2.有个叫做BFC的盒子：</h6><p>①若浮动元素的块状兄弟元素为BFC，则不会占满一整行，而是根据浮动元素的宽度，占据该行剩下的宽度，避免与浮动元素重叠。<br>②浮动元素与其块状BFC兄弟元素之间的margin可以生效，这将继续减少兄弟元素的宽度。<br>③为了让黑盒子把红盒子的位置让出来，我们选择触发BFC：<br><code>float</code>的值不为<code>none</code><br><code>position</code>的值不为<code>static</code>或者<code>relative</code><br><code>display</code>的值为<code>table-cell</code>, <code>table-caption</code>, <code>inline-block</code>, <code>flex</code>, 或者 <code>inline-flex</code>中的其中一个。<br><code>overflow</code>的值不为<code>visible</code><br><strong>这样就做到了左右两边：红盒子不定宽，黑盒子自适应。</strong></p>\n<h3 id=\"II-传说中的圣杯布局\"><a href=\"#II-传说中的圣杯布局\" class=\"headerlink\" title=\"II.传说中的圣杯布局\"></a>II.传说中的圣杯布局</h3><p>HTML:<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box\"</span> <span class=\"attr\">clearfix</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"middle\"</span>&gt;</span>middle<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>   //顺序，先中再左右。</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"left\"</span>&gt;</span>left<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"right\"</span>&gt;</span>right<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>css:<br><figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span>::after&#123;    <span class=\"comment\">//清除浮动伪类</span></span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>:  <span class=\"number\">0</span> <span class=\"number\">100px</span>;  <span class=\"comment\">//最外层给红黄两个盒子留宽度</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-class\">.middle</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: black;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;    <span class=\"comment\">//往左边推出去</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: -<span class=\"number\">100px</span>;    <span class=\"comment\">//往右边推出去</span></span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>给最外面的<code>box</code>加<code>padding</code>让出左右红黄盒子的位置。<br>给红黄盒子添加<code>position: relative;</code>让黑盒子不会受到他们俩位置变化的影响。</p>\n<h3 id=\"III-关于居中\"><a href=\"#III-关于居中\" class=\"headerlink\" title=\"III.关于居中\"></a>III.关于居中</h3><h4 id=\"i-让图片居中\"><a href=\"#i-让图片居中\" class=\"headerlink\" title=\"i.让图片居中\"></a>i.让图片居中</h4><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"built_in\">background</span>: url(<span class=\"string\">\"wallhaven-w-min.jpg\"</span>) no-repeat <span class=\"built_in\">center</span> <span class=\"built_in\">center</span> ;</span><br><span class=\"line\"><span class=\"built_in\">background</span>-size: cover;</span><br></pre></td></tr></table></figure>\n<h4 id=\"ii-让div水平居中\"><a href=\"#ii-让div水平居中\" class=\"headerlink\" title=\"ii.让div水平居中\"></a>ii.让div水平居中</h4><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin-<span class=\"built_in\">left</span>:<span class=\"built_in\">auto</span>;</span><br><span class=\"line\">margin-<span class=\"built_in\">right</span>:<span class=\"built_in\">auto</span>;</span><br></pre></td></tr></table></figure>\n<h4 id=\"iii-内联元素居中：\"><a href=\"#iii-内联元素居中：\" class=\"headerlink\" title=\"iii.内联元素居中：\"></a>iii.内联元素居中：</h4><p>给内联元素的父元素加:<code>text-align:center;</code><br>如果不是内联元素，但是想让它居中怎么办？<br><code>display:inline-block</code>了解一下。但是但是但是加完以后下面会有诡异的裂隙，所以需要：<br><code>vertical-align: top;</code></p>\n<h4 id=\"iv-让div在父级元素中绝对居中\"><a href=\"#iv-让div在父级元素中绝对居中\" class=\"headerlink\" title=\"iv.让div在父级元素中绝对居中\"></a>iv.让div在父级元素中绝对居中</h4><p>父级元素加：<code>position:relative;</code><br>子元素(需要对齐的div):<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\"> \t<span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\"> \t<span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\"> \t<span class=\"attribute\">margin</span>: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"4-写点别的\"><a href=\"#4-写点别的\" class=\"headerlink\" title=\"4.写点别的\"></a>4.写点别的</h2><h3 id=\"I-src和href有啥子区别？\"><a href=\"#I-src和href有啥子区别？\" class=\"headerlink\" title=\"I.src和href有啥子区别？\"></a>I.<code>src</code>和<code>href</code>有啥子区别？</h3><p>在写<code>link</code>的时候，必须要写<code>href</code><br>在<code>&lt;a&gt;</code>标签的时候用<code>href</code><br>在写<code>script</code>的时候，必须要写<code>src</code><br>在写<code>img</code>的时候，必须要写<code>src</code><br>在写<code>iframe</code>的时候，必须要写<code>src</code></p>\n<p>如果一定要区别的话<code>href</code>一般指的外部文档<br><code>src</code>会嵌入文档里<br><strong>其实没什么规律…就是记住，多用就行</strong></p>\n"},{"title":"入门-HTML-II","date":"2018-03-23T14:13:53.000Z","_content":"# 1.常见HTML标签\n\n## I. `<iframe>`标签\n目前用的很少，但是有些遗留项目可能会碰到它：页面里嵌套页面。\n### ①例子：jsbin\n举个例子：`<iframe src=\"http://qq.com\" frameborder=\"0\"></iframe>`\nframeborder=0?为了把阴影框删了，因为太难看了太难看了太难看了。\n默认iframe宽100高50但是可以用CSS给它一个属性\n\n```\n<style>\n  iframe{\n  width: 100%;\n  hight: 500PX; //为什么宽度可以100%，高度必须输像素呢？因为CSS规定的\n  }\n</style>\n```\n\n### ②还有些好玩的用法比如：\n\n```\n<body>\n  <iframe name=xxx src=\"#\" frameborder=\"0\"></iframe>\n  <a target=xxx href=\"http://qq.com\">QQ</a>\n  <a target=xxx href=\"http://baidu.com\">百度</a>\n</body>\n```\n\n厉害了呀，这样点击a标签就可以在iframe框里访问相应网页了。\n![浏览效果](https://ws1.sinaimg.cn/large/005XzYe2gy1fpn80xrwomj30qo0g4wkr.jpg)\n\n## II.`<a>`标签（HTTP GET 请求）\n\n### ①关于target\n\ni.`<a href=\"http://qq.com\" target=\"_blank\">qq</a>`\nii.`<a href=\"http://qq.com\" target=\"_self\">qq</a>`\niii.`<a href=\"http://qq.com\" target=\"_parent\">qq</a>`\niv.`<a href=\"http://qq.com\" target=\"_top\">qq</a>`\n\n**这个target：规定了在哪里打开**\nblank：新页面。\nself：在自己身上打开。\nparent：在他的父级打开，谁在他上面谁就是他爸咯。\ntop:顶层窗口，如果他爸爸有爸爸，那就在他爷爷那里打开。\n\n### ②download属性\n`<a href=\"http://qq.com\" download>下载</a>`\n在`Content-Type: text/html`的时候用↑\n或者`Content-Type: application/octet-stream`就不用download了\n下安装包的时候他很常见哦。\n\n### ③href属性\n`<a href=\"qq.com\">QQ</a>`他会让你跳转到qq.com吗？\n并不行，你前面没`http://`呀他会把qq.com看成是一个文件（还有文件叫.com呢？他不管他不管）。\n你换成//试试？他会去找文件夹...\n**//:你当前协议是什么协议，他就继承该协议。which means：无协议**\n那怎么办嘛：**要加协议名称呀**\n\n#### i.问题来了，那我不能写本地路径我怎么调试我的index.html呢？\n\n方法一：上传github，用预览功能调试他。\n方法二：下载一个小工具http-server\n`npm i -g http-server`\n他干吗用的呢？\n还记得那年大明湖畔的nodejs服务器吗?没错就是他\n运行的时候记得`http-server -c-1`不要缓存\n\n#### ii.问题又来了，我写点别的行不行\n\n可以，你加`#`或者`？`跟内容浏览器会自己识别你想表达的东西\n但是`#`:不会发出请求。\n\n### JavaScript伪协议\n`<a href=\"javascript: alert(’我在搞伪协议‘)；\">HiaHiaHia</a>`\n这时候你点他，他会直接弹alert。这个伪协议不是url但是他会执行（这个可能会给同事留大坑。）\n`<a href=\"javascript:；\">HiaHiaHia</a>`\n还可以这样做：点击以后让他不会跳转（很神奇是不是，但是它真的可能会有这种需求。他只是想让这个herf被占着。）\n`<a href=\"\">HiaHiaHia</a>`什么都不写？那他会刷新。\n`<a href=\"#\">HiaHiaHia</a>`写个锚？好了如果它前面有`<p>`那他会跳转一下。\n所以只有伪协议让他什么都不做\n\n## III.`<form>`标签（HTTP POST 请求）\n\n```\n<form action=\"users\" method=\"post\">\n  <input type=\"text\" name=”username“>\n<input type=\"text\" name=”password“>\n  <input type=\"submit\" value=\"提交\">\n</form>\n```\n\n一个典型的用户名提交窗口\n\n### ①关于`action`\n一个处理这个form信息的程序所在的URL。这个值可以被 `<button>` 或者 `<input>` 元素中的 formaction 属性重载（覆盖）。\n你要在提交到哪里\n\n### ②关于`method`\n浏览器使用这种 HTTP 方式来提交 form. 可能的值有:\npost: 指的是 HTTP POST 方法 ; 表单数据会包含在表单体内然后发送给服务器.\nget: 指的是 HTTP GET 方法; 表单数据会附加在 action 属性的URI中，并以 '?' 作为分隔符, 然后这样得到的 URI 再发送给服务器. 当这样做（数据暴露在URI里面）没什么副作用，或者表单仅包含ASCII字符时，再使用这种方法吧。\n这个值可以被 `<button>` 或者 `<input>` 元素中的 `formmethod` 属性重载（覆盖）。\n\n**什么都不写，默认是GET，但是估计没人会这么无聊，你有`<a>`为何不用。**\n在用**get**的时候，他会把数据传到查询参数里。\n**post**会直接放在第四部分，**但是：**\n你可以自己加呀`<form action=\"users?yyy=2\" method=\"post\">`他也可以有查询参数\n\n### ③关于`input`\n\n#### i.`<input>`\n`type=\"submit\"`类型是提交 `value=\"提交\"`按钮上显示的是提交俩字\n**如果表单里面没有提交按钮，那就无法提交form**\n不可以有子元素\n\n#### ii.`<button>`标签\n\n如果一个`<form>`里面**只有一个按钮**，他的`type`没写，那么他会自动升级为**提交按钮**\n可以有子元素\n\n#### iii.`checkbox`\n就是做一个能勾的选项`<input type=\"checkbox\" id=\"xxx\">但是点字没什么卵用`\n<input type=\"checkbox\" id=\"xxx\">但是点字没什么卵用\n`checkbox`也需要`name`不然无法传上去。\n打钩上传，`name`对应上传name后面的内容。\ncheckbox可以有很多个，是不是感觉在做选择题？怎么判断正误呢？通过上传的`name`，每个选项有对应的`name`。\n\n#### iv.`<label>`\n神奇的标签\n`<input type=\"checkbox\" id=\"xxx\"><label for=\"xxx\">这样点字就有用了</label>`\n可以让`<checkbox>`点字也有用。\n\n---\n`<label for=\"xxx\">用户名</label><input type=\"text\" name=”username“ id=\"xxx\">`\n`<label for=\"yyy\">密码</label><input type=\"text\" name=”password“ id=\"yyy\">`\n对应`<id>`和`<for>`可以点击用户名和密码就进入输入窗。**但是**老司机觉得起名字好麻烦呀。so：\n`<label>用户名<input type=\"text\" name=”username“ ></label>`\n**一样的效果。只需要把他包起来`<label>`成为了`<input>`的父亲**\n\n#### v.`radio`\n**单选框**和checkbox对应。name相同的时候只能点一个。\n\n```\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">Yes</label>\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">No</label>\n```\n\n难不难\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">Yes</label>\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">No</label>\n\n\n### ④关于`name`\n\n提交完了以后`name后面的就会被提交`\n写`username`和`password`就会提交上去`username=blablabla&passowrd=blablablabla`\n写`xxx`和`yyy`就会提交上去\n`xxx=blablabla&yyy=blablabla`\n\n`checkbox`也需要`name`\n\n**为什么说HTTP不安全，因为提交上去是什么直接就显示出来了，如果有人监听那他就直接知道用户名和密码了。所以要用HTTPS，关于这个协议和端口后面再说。**\n\n### ⑤关于`target`\n\n**其实他和`<a>`是兄弟，用法一样一样的。**\n\n### ⑥关于`<select>`\n\n下拉列表\n\n```\n<select name=\"分组\">\n  <option value=\"\">-</option>\n  <option value=\"1\">第一组</option>\n  <option value=\"2\">第二组</option>\n  <option value=\"3\" disabled>第三组</option>\n  <option value=\"4\" selected>第四组</option>\n</select>\n```\n\n<select name=\"group\">\n  <option value=\"\">-</option>\n  <option value=\"1\">第一组</option>\n  <option value=\"2\">第二组</option>\n  <option value=\"3\" disabled>第三组</option>\n  <option value=\"4\" selected>第四组</option>\n</select>\n\n选谁提交后就是`name的值=相应value`\n**还有个属性叫做`multiple`**\n加在`<select name=\"group\" mutiple>`\n加完了以后选择的时候按住`ctrl`就可以多选了。\n\n### ⑦关于`<textarea>`\n需要输入大段文字的时候使用\n`<textarea name=\"text\" cols=\"30\" rows=\"10\"></textarea>`\n这时候它是可以随意拉动的，但是我们不希望他变大变小所以用CSS：\n`<textarea style=\"resize:none; width: 200px;height: 100px;\" name=\"text\" cols=\"30\" rows=\"10\"></textarea>`\n`style=\"resize:none\"`让他不要乱动\n`width: 200px;height: 100px;`规定他的宽高\n在他不能乱动的时候可以用`cols`和`rows`来控制宽高（列、行）然而列不准，所以我们还是用CSS控制吧。\n\n## IV.`<table>`标签\n`head`头`body`身体`foot`脚  **他们三个顺序没有区别，他一定会自动按顺序展示**\n`tr`行`td`内容\n`colgroup`和`col`列宽\n其中哪一个不写可不可以？可以，他会自己匀到剩下的部分。\n全不写可不可以？那他会按你写的顺序识别。\n很大程度上，他还是非常智能的。\n\n**如何把表格的默认border取消？**\n\n```\n<style>\n  table{\n    border-collapse: collapse;\n    }\n</style>\n```\n\ntable选择器`border-collapse`属性\n改变表格默认border。","source":"_posts/入门-HTML-II.md","raw":"---\ntitle: 入门-HTML-II\ndate: 2018-03-23 22:13:53\ntags:\n---\n# 1.常见HTML标签\n\n## I. `<iframe>`标签\n目前用的很少，但是有些遗留项目可能会碰到它：页面里嵌套页面。\n### ①例子：jsbin\n举个例子：`<iframe src=\"http://qq.com\" frameborder=\"0\"></iframe>`\nframeborder=0?为了把阴影框删了，因为太难看了太难看了太难看了。\n默认iframe宽100高50但是可以用CSS给它一个属性\n\n```\n<style>\n  iframe{\n  width: 100%;\n  hight: 500PX; //为什么宽度可以100%，高度必须输像素呢？因为CSS规定的\n  }\n</style>\n```\n\n### ②还有些好玩的用法比如：\n\n```\n<body>\n  <iframe name=xxx src=\"#\" frameborder=\"0\"></iframe>\n  <a target=xxx href=\"http://qq.com\">QQ</a>\n  <a target=xxx href=\"http://baidu.com\">百度</a>\n</body>\n```\n\n厉害了呀，这样点击a标签就可以在iframe框里访问相应网页了。\n![浏览效果](https://ws1.sinaimg.cn/large/005XzYe2gy1fpn80xrwomj30qo0g4wkr.jpg)\n\n## II.`<a>`标签（HTTP GET 请求）\n\n### ①关于target\n\ni.`<a href=\"http://qq.com\" target=\"_blank\">qq</a>`\nii.`<a href=\"http://qq.com\" target=\"_self\">qq</a>`\niii.`<a href=\"http://qq.com\" target=\"_parent\">qq</a>`\niv.`<a href=\"http://qq.com\" target=\"_top\">qq</a>`\n\n**这个target：规定了在哪里打开**\nblank：新页面。\nself：在自己身上打开。\nparent：在他的父级打开，谁在他上面谁就是他爸咯。\ntop:顶层窗口，如果他爸爸有爸爸，那就在他爷爷那里打开。\n\n### ②download属性\n`<a href=\"http://qq.com\" download>下载</a>`\n在`Content-Type: text/html`的时候用↑\n或者`Content-Type: application/octet-stream`就不用download了\n下安装包的时候他很常见哦。\n\n### ③href属性\n`<a href=\"qq.com\">QQ</a>`他会让你跳转到qq.com吗？\n并不行，你前面没`http://`呀他会把qq.com看成是一个文件（还有文件叫.com呢？他不管他不管）。\n你换成//试试？他会去找文件夹...\n**//:你当前协议是什么协议，他就继承该协议。which means：无协议**\n那怎么办嘛：**要加协议名称呀**\n\n#### i.问题来了，那我不能写本地路径我怎么调试我的index.html呢？\n\n方法一：上传github，用预览功能调试他。\n方法二：下载一个小工具http-server\n`npm i -g http-server`\n他干吗用的呢？\n还记得那年大明湖畔的nodejs服务器吗?没错就是他\n运行的时候记得`http-server -c-1`不要缓存\n\n#### ii.问题又来了，我写点别的行不行\n\n可以，你加`#`或者`？`跟内容浏览器会自己识别你想表达的东西\n但是`#`:不会发出请求。\n\n### JavaScript伪协议\n`<a href=\"javascript: alert(’我在搞伪协议‘)；\">HiaHiaHia</a>`\n这时候你点他，他会直接弹alert。这个伪协议不是url但是他会执行（这个可能会给同事留大坑。）\n`<a href=\"javascript:；\">HiaHiaHia</a>`\n还可以这样做：点击以后让他不会跳转（很神奇是不是，但是它真的可能会有这种需求。他只是想让这个herf被占着。）\n`<a href=\"\">HiaHiaHia</a>`什么都不写？那他会刷新。\n`<a href=\"#\">HiaHiaHia</a>`写个锚？好了如果它前面有`<p>`那他会跳转一下。\n所以只有伪协议让他什么都不做\n\n## III.`<form>`标签（HTTP POST 请求）\n\n```\n<form action=\"users\" method=\"post\">\n  <input type=\"text\" name=”username“>\n<input type=\"text\" name=”password“>\n  <input type=\"submit\" value=\"提交\">\n</form>\n```\n\n一个典型的用户名提交窗口\n\n### ①关于`action`\n一个处理这个form信息的程序所在的URL。这个值可以被 `<button>` 或者 `<input>` 元素中的 formaction 属性重载（覆盖）。\n你要在提交到哪里\n\n### ②关于`method`\n浏览器使用这种 HTTP 方式来提交 form. 可能的值有:\npost: 指的是 HTTP POST 方法 ; 表单数据会包含在表单体内然后发送给服务器.\nget: 指的是 HTTP GET 方法; 表单数据会附加在 action 属性的URI中，并以 '?' 作为分隔符, 然后这样得到的 URI 再发送给服务器. 当这样做（数据暴露在URI里面）没什么副作用，或者表单仅包含ASCII字符时，再使用这种方法吧。\n这个值可以被 `<button>` 或者 `<input>` 元素中的 `formmethod` 属性重载（覆盖）。\n\n**什么都不写，默认是GET，但是估计没人会这么无聊，你有`<a>`为何不用。**\n在用**get**的时候，他会把数据传到查询参数里。\n**post**会直接放在第四部分，**但是：**\n你可以自己加呀`<form action=\"users?yyy=2\" method=\"post\">`他也可以有查询参数\n\n### ③关于`input`\n\n#### i.`<input>`\n`type=\"submit\"`类型是提交 `value=\"提交\"`按钮上显示的是提交俩字\n**如果表单里面没有提交按钮，那就无法提交form**\n不可以有子元素\n\n#### ii.`<button>`标签\n\n如果一个`<form>`里面**只有一个按钮**，他的`type`没写，那么他会自动升级为**提交按钮**\n可以有子元素\n\n#### iii.`checkbox`\n就是做一个能勾的选项`<input type=\"checkbox\" id=\"xxx\">但是点字没什么卵用`\n<input type=\"checkbox\" id=\"xxx\">但是点字没什么卵用\n`checkbox`也需要`name`不然无法传上去。\n打钩上传，`name`对应上传name后面的内容。\ncheckbox可以有很多个，是不是感觉在做选择题？怎么判断正误呢？通过上传的`name`，每个选项有对应的`name`。\n\n#### iv.`<label>`\n神奇的标签\n`<input type=\"checkbox\" id=\"xxx\"><label for=\"xxx\">这样点字就有用了</label>`\n可以让`<checkbox>`点字也有用。\n\n---\n`<label for=\"xxx\">用户名</label><input type=\"text\" name=”username“ id=\"xxx\">`\n`<label for=\"yyy\">密码</label><input type=\"text\" name=”password“ id=\"yyy\">`\n对应`<id>`和`<for>`可以点击用户名和密码就进入输入窗。**但是**老司机觉得起名字好麻烦呀。so：\n`<label>用户名<input type=\"text\" name=”username“ ></label>`\n**一样的效果。只需要把他包起来`<label>`成为了`<input>`的父亲**\n\n#### v.`radio`\n**单选框**和checkbox对应。name相同的时候只能点一个。\n\n```\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">Yes</label>\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">No</label>\n```\n\n难不难\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">Yes</label>\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">No</label>\n\n\n### ④关于`name`\n\n提交完了以后`name后面的就会被提交`\n写`username`和`password`就会提交上去`username=blablabla&passowrd=blablablabla`\n写`xxx`和`yyy`就会提交上去\n`xxx=blablabla&yyy=blablabla`\n\n`checkbox`也需要`name`\n\n**为什么说HTTP不安全，因为提交上去是什么直接就显示出来了，如果有人监听那他就直接知道用户名和密码了。所以要用HTTPS，关于这个协议和端口后面再说。**\n\n### ⑤关于`target`\n\n**其实他和`<a>`是兄弟，用法一样一样的。**\n\n### ⑥关于`<select>`\n\n下拉列表\n\n```\n<select name=\"分组\">\n  <option value=\"\">-</option>\n  <option value=\"1\">第一组</option>\n  <option value=\"2\">第二组</option>\n  <option value=\"3\" disabled>第三组</option>\n  <option value=\"4\" selected>第四组</option>\n</select>\n```\n\n<select name=\"group\">\n  <option value=\"\">-</option>\n  <option value=\"1\">第一组</option>\n  <option value=\"2\">第二组</option>\n  <option value=\"3\" disabled>第三组</option>\n  <option value=\"4\" selected>第四组</option>\n</select>\n\n选谁提交后就是`name的值=相应value`\n**还有个属性叫做`multiple`**\n加在`<select name=\"group\" mutiple>`\n加完了以后选择的时候按住`ctrl`就可以多选了。\n\n### ⑦关于`<textarea>`\n需要输入大段文字的时候使用\n`<textarea name=\"text\" cols=\"30\" rows=\"10\"></textarea>`\n这时候它是可以随意拉动的，但是我们不希望他变大变小所以用CSS：\n`<textarea style=\"resize:none; width: 200px;height: 100px;\" name=\"text\" cols=\"30\" rows=\"10\"></textarea>`\n`style=\"resize:none\"`让他不要乱动\n`width: 200px;height: 100px;`规定他的宽高\n在他不能乱动的时候可以用`cols`和`rows`来控制宽高（列、行）然而列不准，所以我们还是用CSS控制吧。\n\n## IV.`<table>`标签\n`head`头`body`身体`foot`脚  **他们三个顺序没有区别，他一定会自动按顺序展示**\n`tr`行`td`内容\n`colgroup`和`col`列宽\n其中哪一个不写可不可以？可以，他会自己匀到剩下的部分。\n全不写可不可以？那他会按你写的顺序识别。\n很大程度上，他还是非常智能的。\n\n**如何把表格的默认border取消？**\n\n```\n<style>\n  table{\n    border-collapse: collapse;\n    }\n</style>\n```\n\ntable选择器`border-collapse`属性\n改变表格默认border。","slug":"入门-HTML-II","published":1,"updated":"2018-04-10T04:35:23.709Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3t000mt2g3h46ixt9y","content":"<h1 id=\"1-常见HTML标签\"><a href=\"#1-常见HTML标签\" class=\"headerlink\" title=\"1.常见HTML标签\"></a>1.常见HTML标签</h1><h2 id=\"I-lt-iframe-gt-标签\"><a href=\"#I-lt-iframe-gt-标签\" class=\"headerlink\" title=\"I. &lt;iframe&gt;标签\"></a>I. <code>&lt;iframe&gt;</code>标签</h2><p>目前用的很少，但是有些遗留项目可能会碰到它：页面里嵌套页面。</p>\n<h3 id=\"①例子：jsbin\"><a href=\"#①例子：jsbin\" class=\"headerlink\" title=\"①例子：jsbin\"></a>①例子：jsbin</h3><p>举个例子：<code>&lt;iframe src=&quot;http://qq.com&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</code><br>frameborder=0?为了把阴影框删了，因为太难看了太难看了太难看了。<br>默认iframe宽100高50但是可以用CSS给它一个属性</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">&lt;style&gt;</span></span><br><span class=\"line\">  iframe&#123;</span><br><span class=\"line\"><span class=\"symbol\">  width:</span> <span class=\"number\">100</span>%;</span><br><span class=\"line\"><span class=\"symbol\">  hight:</span> <span class=\"number\">500</span>PX; <span class=\"comment\">//为什么宽度可以100%，高度必须输像素呢？因为CSS规定的</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"params\">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"②还有些好玩的用法比如：\"><a href=\"#②还有些好玩的用法比如：\" class=\"headerlink\" title=\"②还有些好玩的用法比如：\"></a>②还有些好玩的用法比如：</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">name</span>=<span class=\"string\">xxx</span> <span class=\"attr\">src</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">xxx</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://qq.com\"</span>&gt;</span>QQ<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">xxx</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://baidu.com\"</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>厉害了呀，这样点击a标签就可以在iframe框里访问相应网页了。<br><img src=\"https://ws1.sinaimg.cn/large/005XzYe2gy1fpn80xrwomj30qo0g4wkr.jpg\" alt=\"浏览效果\"></p>\n<h2 id=\"II-lt-a-gt-标签（HTTP-GET-请求）\"><a href=\"#II-lt-a-gt-标签（HTTP-GET-请求）\" class=\"headerlink\" title=\"II.&lt;a&gt;标签（HTTP GET 请求）\"></a>II.<code>&lt;a&gt;</code>标签（HTTP GET 请求）</h2><h3 id=\"①关于target\"><a href=\"#①关于target\" class=\"headerlink\" title=\"①关于target\"></a>①关于target</h3><p>i.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_blank&quot;&gt;qq&lt;/a&gt;</code><br>ii.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_self&quot;&gt;qq&lt;/a&gt;</code><br>iii.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_parent&quot;&gt;qq&lt;/a&gt;</code><br>iv.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_top&quot;&gt;qq&lt;/a&gt;</code></p>\n<p><strong>这个target：规定了在哪里打开</strong><br>blank：新页面。<br>self：在自己身上打开。<br>parent：在他的父级打开，谁在他上面谁就是他爸咯。<br>top:顶层窗口，如果他爸爸有爸爸，那就在他爷爷那里打开。</p>\n<h3 id=\"②download属性\"><a href=\"#②download属性\" class=\"headerlink\" title=\"②download属性\"></a>②download属性</h3><p><code>&lt;a href=&quot;http://qq.com&quot; download&gt;下载&lt;/a&gt;</code><br>在<code>Content-Type: text/html</code>的时候用↑<br>或者<code>Content-Type: application/octet-stream</code>就不用download了<br>下安装包的时候他很常见哦。</p>\n<h3 id=\"③href属性\"><a href=\"#③href属性\" class=\"headerlink\" title=\"③href属性\"></a>③href属性</h3><p><code>&lt;a href=&quot;qq.com&quot;&gt;QQ&lt;/a&gt;</code>他会让你跳转到qq.com吗？<br>并不行，你前面没<code>http://</code>呀他会把qq.com看成是一个文件（还有文件叫.com呢？他不管他不管）。<br>你换成//试试？他会去找文件夹…<br><strong>//:你当前协议是什么协议，他就继承该协议。which means：无协议</strong><br>那怎么办嘛：<strong>要加协议名称呀</strong></p>\n<h4 id=\"i-问题来了，那我不能写本地路径我怎么调试我的index-html呢？\"><a href=\"#i-问题来了，那我不能写本地路径我怎么调试我的index-html呢？\" class=\"headerlink\" title=\"i.问题来了，那我不能写本地路径我怎么调试我的index.html呢？\"></a>i.问题来了，那我不能写本地路径我怎么调试我的index.html呢？</h4><p>方法一：上传github，用预览功能调试他。<br>方法二：下载一个小工具http-server<br><code>npm i -g http-server</code><br>他干吗用的呢？<br>还记得那年大明湖畔的nodejs服务器吗?没错就是他<br>运行的时候记得<code>http-server -c-1</code>不要缓存</p>\n<h4 id=\"ii-问题又来了，我写点别的行不行\"><a href=\"#ii-问题又来了，我写点别的行不行\" class=\"headerlink\" title=\"ii.问题又来了，我写点别的行不行\"></a>ii.问题又来了，我写点别的行不行</h4><p>可以，你加<code>#</code>或者<code>？</code>跟内容浏览器会自己识别你想表达的东西<br>但是<code>#</code>:不会发出请求。</p>\n<h3 id=\"JavaScript伪协议\"><a href=\"#JavaScript伪协议\" class=\"headerlink\" title=\"JavaScript伪协议\"></a>JavaScript伪协议</h3><p><code>&lt;a href=&quot;javascript: alert(’我在搞伪协议‘)；&quot;&gt;HiaHiaHia&lt;/a&gt;</code><br>这时候你点他，他会直接弹alert。这个伪协议不是url但是他会执行（这个可能会给同事留大坑。）<br><code>&lt;a href=&quot;javascript:；&quot;&gt;HiaHiaHia&lt;/a&gt;</code><br>还可以这样做：点击以后让他不会跳转（很神奇是不是，但是它真的可能会有这种需求。他只是想让这个herf被占着。）<br><code>&lt;a href=&quot;&quot;&gt;HiaHiaHia&lt;/a&gt;</code>什么都不写？那他会刷新。<br><code>&lt;a href=&quot;#&quot;&gt;HiaHiaHia&lt;/a&gt;</code>写个锚？好了如果它前面有<code>&lt;p&gt;</code>那他会跳转一下。<br>所以只有伪协议让他什么都不做</p>\n<h2 id=\"III-lt-form-gt-标签（HTTP-POST-请求）\"><a href=\"#III-lt-form-gt-标签（HTTP-POST-请求）\" class=\"headerlink\" title=\"III.&lt;form&gt;标签（HTTP POST 请求）\"></a>III.<code>&lt;form&gt;</code>标签（HTTP POST 请求）</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">form</span> action=<span class=\"string\">\"users\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span> name=”username“&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span> name=”password“&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"提交\"</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">form</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>一个典型的用户名提交窗口</p>\n<h3 id=\"①关于action\"><a href=\"#①关于action\" class=\"headerlink\" title=\"①关于action\"></a>①关于<code>action</code></h3><p>一个处理这个form信息的程序所在的URL。这个值可以被 <code>&lt;button&gt;</code> 或者 <code>&lt;input&gt;</code> 元素中的 formaction 属性重载（覆盖）。<br>你要在提交到哪里</p>\n<h3 id=\"②关于method\"><a href=\"#②关于method\" class=\"headerlink\" title=\"②关于method\"></a>②关于<code>method</code></h3><p>浏览器使用这种 HTTP 方式来提交 form. 可能的值有:<br>post: 指的是 HTTP POST 方法 ; 表单数据会包含在表单体内然后发送给服务器.<br>get: 指的是 HTTP GET 方法; 表单数据会附加在 action 属性的URI中，并以 ‘?’ 作为分隔符, 然后这样得到的 URI 再发送给服务器. 当这样做（数据暴露在URI里面）没什么副作用，或者表单仅包含ASCII字符时，再使用这种方法吧。<br>这个值可以被 <code>&lt;button&gt;</code> 或者 <code>&lt;input&gt;</code> 元素中的 <code>formmethod</code> 属性重载（覆盖）。</p>\n<p><strong>什么都不写，默认是GET，但是估计没人会这么无聊，你有<code>&lt;a&gt;</code>为何不用。</strong><br>在用<strong>get</strong>的时候，他会把数据传到查询参数里。<br><strong>post</strong>会直接放在第四部分，<strong>但是：</strong><br>你可以自己加呀<code>&lt;form action=&quot;users?yyy=2&quot; method=&quot;post&quot;&gt;</code>他也可以有查询参数</p>\n<h3 id=\"③关于input\"><a href=\"#③关于input\" class=\"headerlink\" title=\"③关于input\"></a>③关于<code>input</code></h3><h4 id=\"i-lt-input-gt\"><a href=\"#i-lt-input-gt\" class=\"headerlink\" title=\"i.&lt;input&gt;\"></a>i.<code>&lt;input&gt;</code></h4><p><code>type=&quot;submit&quot;</code>类型是提交 <code>value=&quot;提交&quot;</code>按钮上显示的是提交俩字<br><strong>如果表单里面没有提交按钮，那就无法提交form</strong><br>不可以有子元素</p>\n<h4 id=\"ii-lt-button-gt-标签\"><a href=\"#ii-lt-button-gt-标签\" class=\"headerlink\" title=\"ii.&lt;button&gt;标签\"></a>ii.<code>&lt;button&gt;</code>标签</h4><p>如果一个<code>&lt;form&gt;</code>里面<strong>只有一个按钮</strong>，他的<code>type</code>没写，那么他会自动升级为<strong>提交按钮</strong><br>可以有子元素</p>\n<h4 id=\"iii-checkbox\"><a href=\"#iii-checkbox\" class=\"headerlink\" title=\"iii.checkbox\"></a>iii.<code>checkbox</code></h4><p>就是做一个能勾的选项<code>&lt;input type=&quot;checkbox&quot; id=&quot;xxx&quot;&gt;但是点字没什么卵用</code></p>\n<p><input type=\"checkbox\" id=\"xxx\">但是点字没什么卵用<br><code>checkbox</code>也需要<code>name</code>不然无法传上去。<br>打钩上传，<code>name</code>对应上传name后面的内容。<br>checkbox可以有很多个，是不是感觉在做选择题？怎么判断正误呢？通过上传的<code>name</code>，每个选项有对应的<code>name</code>。</p>\n<h4 id=\"iv-lt-label-gt\"><a href=\"#iv-lt-label-gt\" class=\"headerlink\" title=\"iv.&lt;label&gt;\"></a>iv.<code>&lt;label&gt;</code></h4><p>神奇的标签<br><code>&lt;input type=&quot;checkbox&quot; id=&quot;xxx&quot;&gt;&lt;label for=&quot;xxx&quot;&gt;这样点字就有用了&lt;/label&gt;</code><br>可以让<code>&lt;checkbox&gt;</code>点字也有用。</p>\n<hr>\n<p><code>&lt;label for=&quot;xxx&quot;&gt;用户名&lt;/label&gt;&lt;input type=&quot;text&quot; name=”username“ id=&quot;xxx&quot;&gt;</code><br><code>&lt;label for=&quot;yyy&quot;&gt;密码&lt;/label&gt;&lt;input type=&quot;text&quot; name=”password“ id=&quot;yyy&quot;&gt;</code><br>对应<code>&lt;id&gt;</code>和<code>&lt;for&gt;</code>可以点击用户名和密码就进入输入窗。<strong>但是</strong>老司机觉得起名字好麻烦呀。so：<br><code>&lt;label&gt;用户名&lt;input type=&quot;text&quot; name=”username“ &gt;&lt;/label&gt;</code><br><strong>一样的效果。只需要把他包起来<code>&lt;label&gt;</code>成为了<code>&lt;input&gt;</code>的父亲</strong></p>\n<h4 id=\"v-radio\"><a href=\"#v-radio\" class=\"headerlink\" title=\"v.radio\"></a>v.<code>radio</code></h4><p><strong>单选框</strong>和checkbox对应。name相同的时候只能点一个。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">label</span>&gt;&lt;<span class=\"keyword\">input</span> name=<span class=\"string\">\"难不难\"</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> value=<span class=\"string\">\"yes\"</span>&gt;Yes&lt;/<span class=\"keyword\">label</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">label</span>&gt;&lt;<span class=\"keyword\">input</span> name=<span class=\"string\">\"难不难\"</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> value=<span class=\"string\">\"yes\"</span>&gt;<span class=\"keyword\">No</span>&lt;/<span class=\"keyword\">label</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>难不难</p>\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">Yes</label><br><label><input name=\"难不难\" type=\"radio\" value=\"yes\">No</label>\n\n\n<h3 id=\"④关于name\"><a href=\"#④关于name\" class=\"headerlink\" title=\"④关于name\"></a>④关于<code>name</code></h3><p>提交完了以后<code>name后面的就会被提交</code><br>写<code>username</code>和<code>password</code>就会提交上去<code>username=blablabla&amp;passowrd=blablablabla</code><br>写<code>xxx</code>和<code>yyy</code>就会提交上去<br><code>xxx=blablabla&amp;yyy=blablabla</code></p>\n<p><code>checkbox</code>也需要<code>name</code></p>\n<p><strong>为什么说HTTP不安全，因为提交上去是什么直接就显示出来了，如果有人监听那他就直接知道用户名和密码了。所以要用HTTPS，关于这个协议和端口后面再说。</strong></p>\n<h3 id=\"⑤关于target\"><a href=\"#⑤关于target\" class=\"headerlink\" title=\"⑤关于target\"></a>⑤关于<code>target</code></h3><p><strong>其实他和<code>&lt;a&gt;</code>是兄弟，用法一样一样的。</strong></p>\n<h3 id=\"⑥关于-lt-select-gt\"><a href=\"#⑥关于-lt-select-gt\" class=\"headerlink\" title=\"⑥关于&lt;select&gt;\"></a>⑥关于<code>&lt;select&gt;</code></h3><p>下拉列表</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select name=<span class=\"string\">\"分组\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"\"</span>&gt;-&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"1\"</span>&gt;第一组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"2\"</span>&gt;第二组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"3\"</span> disabled&gt;第三组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"4\"</span> selected&gt;第四组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<select name=\"group\"><br>  <option value=\"\">-</option><br>  <option value=\"1\">第一组</option><br>  <option value=\"2\">第二组</option><br>  <option value=\"3\" disabled>第三组</option><br>  <option value=\"4\" selected>第四组</option><br></select>\n\n<p>选谁提交后就是<code>name的值=相应value</code><br><strong>还有个属性叫做<code>multiple</code></strong><br>加在<code>&lt;select name=&quot;group&quot; mutiple&gt;</code><br>加完了以后选择的时候按住<code>ctrl</code>就可以多选了。</p>\n<h3 id=\"⑦关于-lt-textarea-gt\"><a href=\"#⑦关于-lt-textarea-gt\" class=\"headerlink\" title=\"⑦关于&lt;textarea&gt;\"></a>⑦关于<code>&lt;textarea&gt;</code></h3><p>需要输入大段文字的时候使用<br><code>&lt;textarea name=&quot;text&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code><br>这时候它是可以随意拉动的，但是我们不希望他变大变小所以用CSS：<br><code>&lt;textarea style=&quot;resize:none; width: 200px;height: 100px;&quot; name=&quot;text&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code><br><code>style=&quot;resize:none&quot;</code>让他不要乱动<br><code>width: 200px;height: 100px;</code>规定他的宽高<br>在他不能乱动的时候可以用<code>cols</code>和<code>rows</code>来控制宽高（列、行）然而列不准，所以我们还是用CSS控制吧。</p>\n<h2 id=\"IV-lt-table-gt-标签\"><a href=\"#IV-lt-table-gt-标签\" class=\"headerlink\" title=\"IV.&lt;table&gt;标签\"></a>IV.<code>&lt;table&gt;</code>标签</h2><p><code>head</code>头<code>body</code>身体<code>foot</code>脚  <strong>他们三个顺序没有区别，他一定会自动按顺序展示</strong><br><code>tr</code>行<code>td</code>内容<br><code>colgroup</code>和<code>col</code>列宽<br>其中哪一个不写可不可以？可以，他会自己匀到剩下的部分。<br>全不写可不可以？那他会按你写的顺序识别。<br>很大程度上，他还是非常智能的。</p>\n<p><strong>如何把表格的默认border取消？</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  table&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    border-collapse: collapse;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>table选择器<code>border-collapse</code>属性<br>改变表格默认border。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-常见HTML标签\"><a href=\"#1-常见HTML标签\" class=\"headerlink\" title=\"1.常见HTML标签\"></a>1.常见HTML标签</h1><h2 id=\"I-lt-iframe-gt-标签\"><a href=\"#I-lt-iframe-gt-标签\" class=\"headerlink\" title=\"I. &lt;iframe&gt;标签\"></a>I. <code>&lt;iframe&gt;</code>标签</h2><p>目前用的很少，但是有些遗留项目可能会碰到它：页面里嵌套页面。</p>\n<h3 id=\"①例子：jsbin\"><a href=\"#①例子：jsbin\" class=\"headerlink\" title=\"①例子：jsbin\"></a>①例子：jsbin</h3><p>举个例子：<code>&lt;iframe src=&quot;http://qq.com&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;</code><br>frameborder=0?为了把阴影框删了，因为太难看了太难看了太难看了。<br>默认iframe宽100高50但是可以用CSS给它一个属性</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">&lt;style&gt;</span></span><br><span class=\"line\">  iframe&#123;</span><br><span class=\"line\"><span class=\"symbol\">  width:</span> <span class=\"number\">100</span>%;</span><br><span class=\"line\"><span class=\"symbol\">  hight:</span> <span class=\"number\">500</span>PX; <span class=\"comment\">//为什么宽度可以100%，高度必须输像素呢？因为CSS规定的</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"params\">&lt;/style&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"②还有些好玩的用法比如：\"><a href=\"#②还有些好玩的用法比如：\" class=\"headerlink\" title=\"②还有些好玩的用法比如：\"></a>②还有些好玩的用法比如：</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">name</span>=<span class=\"string\">xxx</span> <span class=\"attr\">src</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">frameborder</span>=<span class=\"string\">\"0\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">xxx</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://qq.com\"</span>&gt;</span>QQ<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">target</span>=<span class=\"string\">xxx</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://baidu.com\"</span>&gt;</span>百度<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>厉害了呀，这样点击a标签就可以在iframe框里访问相应网页了。<br><img src=\"https://ws1.sinaimg.cn/large/005XzYe2gy1fpn80xrwomj30qo0g4wkr.jpg\" alt=\"浏览效果\"></p>\n<h2 id=\"II-lt-a-gt-标签（HTTP-GET-请求）\"><a href=\"#II-lt-a-gt-标签（HTTP-GET-请求）\" class=\"headerlink\" title=\"II.&lt;a&gt;标签（HTTP GET 请求）\"></a>II.<code>&lt;a&gt;</code>标签（HTTP GET 请求）</h2><h3 id=\"①关于target\"><a href=\"#①关于target\" class=\"headerlink\" title=\"①关于target\"></a>①关于target</h3><p>i.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_blank&quot;&gt;qq&lt;/a&gt;</code><br>ii.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_self&quot;&gt;qq&lt;/a&gt;</code><br>iii.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_parent&quot;&gt;qq&lt;/a&gt;</code><br>iv.<code>&lt;a href=&quot;http://qq.com&quot; target=&quot;_top&quot;&gt;qq&lt;/a&gt;</code></p>\n<p><strong>这个target：规定了在哪里打开</strong><br>blank：新页面。<br>self：在自己身上打开。<br>parent：在他的父级打开，谁在他上面谁就是他爸咯。<br>top:顶层窗口，如果他爸爸有爸爸，那就在他爷爷那里打开。</p>\n<h3 id=\"②download属性\"><a href=\"#②download属性\" class=\"headerlink\" title=\"②download属性\"></a>②download属性</h3><p><code>&lt;a href=&quot;http://qq.com&quot; download&gt;下载&lt;/a&gt;</code><br>在<code>Content-Type: text/html</code>的时候用↑<br>或者<code>Content-Type: application/octet-stream</code>就不用download了<br>下安装包的时候他很常见哦。</p>\n<h3 id=\"③href属性\"><a href=\"#③href属性\" class=\"headerlink\" title=\"③href属性\"></a>③href属性</h3><p><code>&lt;a href=&quot;qq.com&quot;&gt;QQ&lt;/a&gt;</code>他会让你跳转到qq.com吗？<br>并不行，你前面没<code>http://</code>呀他会把qq.com看成是一个文件（还有文件叫.com呢？他不管他不管）。<br>你换成//试试？他会去找文件夹…<br><strong>//:你当前协议是什么协议，他就继承该协议。which means：无协议</strong><br>那怎么办嘛：<strong>要加协议名称呀</strong></p>\n<h4 id=\"i-问题来了，那我不能写本地路径我怎么调试我的index-html呢？\"><a href=\"#i-问题来了，那我不能写本地路径我怎么调试我的index-html呢？\" class=\"headerlink\" title=\"i.问题来了，那我不能写本地路径我怎么调试我的index.html呢？\"></a>i.问题来了，那我不能写本地路径我怎么调试我的index.html呢？</h4><p>方法一：上传github，用预览功能调试他。<br>方法二：下载一个小工具http-server<br><code>npm i -g http-server</code><br>他干吗用的呢？<br>还记得那年大明湖畔的nodejs服务器吗?没错就是他<br>运行的时候记得<code>http-server -c-1</code>不要缓存</p>\n<h4 id=\"ii-问题又来了，我写点别的行不行\"><a href=\"#ii-问题又来了，我写点别的行不行\" class=\"headerlink\" title=\"ii.问题又来了，我写点别的行不行\"></a>ii.问题又来了，我写点别的行不行</h4><p>可以，你加<code>#</code>或者<code>？</code>跟内容浏览器会自己识别你想表达的东西<br>但是<code>#</code>:不会发出请求。</p>\n<h3 id=\"JavaScript伪协议\"><a href=\"#JavaScript伪协议\" class=\"headerlink\" title=\"JavaScript伪协议\"></a>JavaScript伪协议</h3><p><code>&lt;a href=&quot;javascript: alert(’我在搞伪协议‘)；&quot;&gt;HiaHiaHia&lt;/a&gt;</code><br>这时候你点他，他会直接弹alert。这个伪协议不是url但是他会执行（这个可能会给同事留大坑。）<br><code>&lt;a href=&quot;javascript:；&quot;&gt;HiaHiaHia&lt;/a&gt;</code><br>还可以这样做：点击以后让他不会跳转（很神奇是不是，但是它真的可能会有这种需求。他只是想让这个herf被占着。）<br><code>&lt;a href=&quot;&quot;&gt;HiaHiaHia&lt;/a&gt;</code>什么都不写？那他会刷新。<br><code>&lt;a href=&quot;#&quot;&gt;HiaHiaHia&lt;/a&gt;</code>写个锚？好了如果它前面有<code>&lt;p&gt;</code>那他会跳转一下。<br>所以只有伪协议让他什么都不做</p>\n<h2 id=\"III-lt-form-gt-标签（HTTP-POST-请求）\"><a href=\"#III-lt-form-gt-标签（HTTP-POST-请求）\" class=\"headerlink\" title=\"III.&lt;form&gt;标签（HTTP POST 请求）\"></a>III.<code>&lt;form&gt;</code>标签（HTTP POST 请求）</h2><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">form</span> action=<span class=\"string\">\"users\"</span> method=<span class=\"string\">\"post\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span> name=”username“&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"text\"</span> name=”password“&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">input</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"submit\"</span> value=<span class=\"string\">\"提交\"</span>&gt;</span><br><span class=\"line\">&lt;/<span class=\"keyword\">form</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>一个典型的用户名提交窗口</p>\n<h3 id=\"①关于action\"><a href=\"#①关于action\" class=\"headerlink\" title=\"①关于action\"></a>①关于<code>action</code></h3><p>一个处理这个form信息的程序所在的URL。这个值可以被 <code>&lt;button&gt;</code> 或者 <code>&lt;input&gt;</code> 元素中的 formaction 属性重载（覆盖）。<br>你要在提交到哪里</p>\n<h3 id=\"②关于method\"><a href=\"#②关于method\" class=\"headerlink\" title=\"②关于method\"></a>②关于<code>method</code></h3><p>浏览器使用这种 HTTP 方式来提交 form. 可能的值有:<br>post: 指的是 HTTP POST 方法 ; 表单数据会包含在表单体内然后发送给服务器.<br>get: 指的是 HTTP GET 方法; 表单数据会附加在 action 属性的URI中，并以 ‘?’ 作为分隔符, 然后这样得到的 URI 再发送给服务器. 当这样做（数据暴露在URI里面）没什么副作用，或者表单仅包含ASCII字符时，再使用这种方法吧。<br>这个值可以被 <code>&lt;button&gt;</code> 或者 <code>&lt;input&gt;</code> 元素中的 <code>formmethod</code> 属性重载（覆盖）。</p>\n<p><strong>什么都不写，默认是GET，但是估计没人会这么无聊，你有<code>&lt;a&gt;</code>为何不用。</strong><br>在用<strong>get</strong>的时候，他会把数据传到查询参数里。<br><strong>post</strong>会直接放在第四部分，<strong>但是：</strong><br>你可以自己加呀<code>&lt;form action=&quot;users?yyy=2&quot; method=&quot;post&quot;&gt;</code>他也可以有查询参数</p>\n<h3 id=\"③关于input\"><a href=\"#③关于input\" class=\"headerlink\" title=\"③关于input\"></a>③关于<code>input</code></h3><h4 id=\"i-lt-input-gt\"><a href=\"#i-lt-input-gt\" class=\"headerlink\" title=\"i.&lt;input&gt;\"></a>i.<code>&lt;input&gt;</code></h4><p><code>type=&quot;submit&quot;</code>类型是提交 <code>value=&quot;提交&quot;</code>按钮上显示的是提交俩字<br><strong>如果表单里面没有提交按钮，那就无法提交form</strong><br>不可以有子元素</p>\n<h4 id=\"ii-lt-button-gt-标签\"><a href=\"#ii-lt-button-gt-标签\" class=\"headerlink\" title=\"ii.&lt;button&gt;标签\"></a>ii.<code>&lt;button&gt;</code>标签</h4><p>如果一个<code>&lt;form&gt;</code>里面<strong>只有一个按钮</strong>，他的<code>type</code>没写，那么他会自动升级为<strong>提交按钮</strong><br>可以有子元素</p>\n<h4 id=\"iii-checkbox\"><a href=\"#iii-checkbox\" class=\"headerlink\" title=\"iii.checkbox\"></a>iii.<code>checkbox</code></h4><p>就是做一个能勾的选项<code>&lt;input type=&quot;checkbox&quot; id=&quot;xxx&quot;&gt;但是点字没什么卵用</code></p>\n<p><input type=\"checkbox\" id=\"xxx\">但是点字没什么卵用<br><code>checkbox</code>也需要<code>name</code>不然无法传上去。<br>打钩上传，<code>name</code>对应上传name后面的内容。<br>checkbox可以有很多个，是不是感觉在做选择题？怎么判断正误呢？通过上传的<code>name</code>，每个选项有对应的<code>name</code>。</p>\n<h4 id=\"iv-lt-label-gt\"><a href=\"#iv-lt-label-gt\" class=\"headerlink\" title=\"iv.&lt;label&gt;\"></a>iv.<code>&lt;label&gt;</code></h4><p>神奇的标签<br><code>&lt;input type=&quot;checkbox&quot; id=&quot;xxx&quot;&gt;&lt;label for=&quot;xxx&quot;&gt;这样点字就有用了&lt;/label&gt;</code><br>可以让<code>&lt;checkbox&gt;</code>点字也有用。</p>\n<hr>\n<p><code>&lt;label for=&quot;xxx&quot;&gt;用户名&lt;/label&gt;&lt;input type=&quot;text&quot; name=”username“ id=&quot;xxx&quot;&gt;</code><br><code>&lt;label for=&quot;yyy&quot;&gt;密码&lt;/label&gt;&lt;input type=&quot;text&quot; name=”password“ id=&quot;yyy&quot;&gt;</code><br>对应<code>&lt;id&gt;</code>和<code>&lt;for&gt;</code>可以点击用户名和密码就进入输入窗。<strong>但是</strong>老司机觉得起名字好麻烦呀。so：<br><code>&lt;label&gt;用户名&lt;input type=&quot;text&quot; name=”username“ &gt;&lt;/label&gt;</code><br><strong>一样的效果。只需要把他包起来<code>&lt;label&gt;</code>成为了<code>&lt;input&gt;</code>的父亲</strong></p>\n<h4 id=\"v-radio\"><a href=\"#v-radio\" class=\"headerlink\" title=\"v.radio\"></a>v.<code>radio</code></h4><p><strong>单选框</strong>和checkbox对应。name相同的时候只能点一个。</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">label</span>&gt;&lt;<span class=\"keyword\">input</span> name=<span class=\"string\">\"难不难\"</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> value=<span class=\"string\">\"yes\"</span>&gt;Yes&lt;/<span class=\"keyword\">label</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"keyword\">label</span>&gt;&lt;<span class=\"keyword\">input</span> name=<span class=\"string\">\"难不难\"</span> <span class=\"keyword\">type</span>=<span class=\"string\">\"radio\"</span> value=<span class=\"string\">\"yes\"</span>&gt;<span class=\"keyword\">No</span>&lt;/<span class=\"keyword\">label</span>&gt;</span><br></pre></td></tr></table></figure>\n<p>难不难</p>\n<label><input name=\"难不难\" type=\"radio\" value=\"yes\">Yes</label><br><label><input name=\"难不难\" type=\"radio\" value=\"yes\">No</label>\n\n\n<h3 id=\"④关于name\"><a href=\"#④关于name\" class=\"headerlink\" title=\"④关于name\"></a>④关于<code>name</code></h3><p>提交完了以后<code>name后面的就会被提交</code><br>写<code>username</code>和<code>password</code>就会提交上去<code>username=blablabla&amp;passowrd=blablablabla</code><br>写<code>xxx</code>和<code>yyy</code>就会提交上去<br><code>xxx=blablabla&amp;yyy=blablabla</code></p>\n<p><code>checkbox</code>也需要<code>name</code></p>\n<p><strong>为什么说HTTP不安全，因为提交上去是什么直接就显示出来了，如果有人监听那他就直接知道用户名和密码了。所以要用HTTPS，关于这个协议和端口后面再说。</strong></p>\n<h3 id=\"⑤关于target\"><a href=\"#⑤关于target\" class=\"headerlink\" title=\"⑤关于target\"></a>⑤关于<code>target</code></h3><p><strong>其实他和<code>&lt;a&gt;</code>是兄弟，用法一样一样的。</strong></p>\n<h3 id=\"⑥关于-lt-select-gt\"><a href=\"#⑥关于-lt-select-gt\" class=\"headerlink\" title=\"⑥关于&lt;select&gt;\"></a>⑥关于<code>&lt;select&gt;</code></h3><p>下拉列表</p>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select name=<span class=\"string\">\"分组\"</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"\"</span>&gt;-&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"1\"</span>&gt;第一组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"2\"</span>&gt;第二组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"3\"</span> disabled&gt;第三组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">  &lt;<span class=\"keyword\">option</span> <span class=\"keyword\">value</span>=<span class=\"string\">\"4\"</span> selected&gt;第四组&lt;/<span class=\"keyword\">option</span>&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure>\n<select name=\"group\"><br>  <option value=\"\">-</option><br>  <option value=\"1\">第一组</option><br>  <option value=\"2\">第二组</option><br>  <option value=\"3\" disabled>第三组</option><br>  <option value=\"4\" selected>第四组</option><br></select>\n\n<p>选谁提交后就是<code>name的值=相应value</code><br><strong>还有个属性叫做<code>multiple</code></strong><br>加在<code>&lt;select name=&quot;group&quot; mutiple&gt;</code><br>加完了以后选择的时候按住<code>ctrl</code>就可以多选了。</p>\n<h3 id=\"⑦关于-lt-textarea-gt\"><a href=\"#⑦关于-lt-textarea-gt\" class=\"headerlink\" title=\"⑦关于&lt;textarea&gt;\"></a>⑦关于<code>&lt;textarea&gt;</code></h3><p>需要输入大段文字的时候使用<br><code>&lt;textarea name=&quot;text&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code><br>这时候它是可以随意拉动的，但是我们不希望他变大变小所以用CSS：<br><code>&lt;textarea style=&quot;resize:none; width: 200px;height: 100px;&quot; name=&quot;text&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;&lt;/textarea&gt;</code><br><code>style=&quot;resize:none&quot;</code>让他不要乱动<br><code>width: 200px;height: 100px;</code>规定他的宽高<br>在他不能乱动的时候可以用<code>cols</code>和<code>rows</code>来控制宽高（列、行）然而列不准，所以我们还是用CSS控制吧。</p>\n<h2 id=\"IV-lt-table-gt-标签\"><a href=\"#IV-lt-table-gt-标签\" class=\"headerlink\" title=\"IV.&lt;table&gt;标签\"></a>IV.<code>&lt;table&gt;</code>标签</h2><p><code>head</code>头<code>body</code>身体<code>foot</code>脚  <strong>他们三个顺序没有区别，他一定会自动按顺序展示</strong><br><code>tr</code>行<code>td</code>内容<br><code>colgroup</code>和<code>col</code>列宽<br>其中哪一个不写可不可以？可以，他会自己匀到剩下的部分。<br>全不写可不可以？那他会按你写的顺序识别。<br>很大程度上，他还是非常智能的。</p>\n<p><strong>如何把表格的默认border取消？</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">  table&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    border-collapse: collapse;</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>table选择器<code>border-collapse</code>属性<br>改变表格默认border。</p>\n"},{"title":"入门-CSS","date":"2018-03-24T11:29:24.000Z","_content":"## 1.CSS（Cascading Style Sheets）层叠样式表\n### I.诞生与发展\n#### i.两个人发明CSS\n哈肯·维姆·莱（Håkon Wium Lie）提出CSS的最初建议（1994）\n伯特·波斯(Bert Bos)当时正在设计一个叫\"Argo\"的浏览器，他们决定一起合作设计CSS。\n#### ii.W3C接管CSS\n1997年初，W3C内成立CSS工作组\n#### iii.CSS 2.1\n1998年5月，删除了2.0中基本不被支持的内容和增加了一些已有的浏览器的扩展内容。\n最受欢迎，支持最广泛的CSS。Which means：从IE 5.5支持CSS 2.1。\n做前端，低于IE 8，不看，不管，不测试。Why?淘宝是这样的。而且现在的电脑，IE 11起好吗？\n#### iv.CSS3\n2011年开始。什么？CSS 3这么久了吗？对的，就是这么久。\n·CSS选择器leval 3\n·CSS媒体查询leval 3\n·CSS Color leval 3\n他们三个模块被统称为CSS 3。详情请点击[CSS文档](https://www.w3.org/Style/CSS/specs.en.html)内容超级多。\n#### v.CSS 4？\n不会有CSS 4。只有各个模块leval 4\n前端每18个月难度翻一倍...\n#### vi.Tips:\n·LESS CSS：简化过后功能更多的CSS语言\n·SASS：同上，比上面的功能还多\n·PostCSS：一种CSS处理程序，纠错之类的\n三个周边工具，逼格超高。\n\n### II.如何学习\n#### i.MDN\n老朋友了不多介绍了。\n可以看可以查\n\n#### ii.CSS-Tricks\nSNIPPETS标签下的代码片段\n有效果以及代码。\n这个网站里面有各种CSS的奇淫技巧（真是一个贴切的名字）。\n善用搜索引擎可以搜一切技巧。前提：英语水平。\n\n#### iii.博客\n阮一峰CSS\n张鑫旭CSS（CSS大神，精通精通精通CSS）\n\n#### iv.Coderops\n炫酷的CSS效果，超Cooooooooooooool。\n按钮，加载条，各种。他为了表达CSS能做很多事情。\n基本一周出一个特效。\n\n#### v.《CSS揭秘》\nCSS技巧，有汉化。八个章节，讲了很多基础特效。\n\n---\n**规范文档是最强的，如果把文档研究透了，那太强了。**\n\n## 2.自己敲一敲\n\n### I.内联样式\n`<body style=\"background-color: black\">里面是内容</body>`\n`<h1 style=\"text-align: center; color: white;\">内联样式</h1>`\n在标签里面写CSS样式。也称为Style属性\n\n### II.但是这样标签好长呀\n```\n<head>\n    <style>\n        body{\n          background-color: gray;\n        }\n    </style>\n</head>\n```\n没问题，在头部加`<style>`标签就可以。\n\n### III.那style多了头部是不是会超级长\n```\n<head>\n   <link rel=\"stylesheet\" href=\"./a.css\">\n</head>\n```\n引入外部样式就可以\n**CSS文件也可以引入CSS**\n`@import url(./需要引入的CSS.css);`\n在用a的时候先引入b\n\n### IV.float和clearfix\n```\n<ul style=\"list-style: none; margin: 0; padding: 0;\" class=\"clearfix\"> //class之前为了去掉默认样式中的点和margin以及padding\n    <li style=\"float:left;\">内容</li>\n</ul>\n```\n想让表格的子元素横着排，给子元素加`style=\"float:left;\"`但是这时候有BUG\n所以在父元素加`class=\"clearfix\"`\n```\n.clearfix::after{\n    content: '';\n    display: block;\n    clear: both;\n}\n```\n还可以用什么呢？让块横着排的方法？\n有一个叫做`display: inline-block;`可以让块像内联元素一样排列了。\n**但是，建议还是用`float`吧**\n\n### V.第一个选择器`>`\n表达了一个左边是父，右边是子。\n**HTML默认字体大小：16px**\n\n### VI.padding的缩写\n顺时针，上右下左。\n\n### VII.一个元素的高度是由什么决定的？\n#### **由内容决定**\n**`<div>`高度由其内部文档流元素的高度综合决定。**\n##### **文档流**：\n文档内元素的流动方向。\n##### **流动方向**：\n**内联元素**从左至右流动，若流动受到阻碍（例如宽度不够），则换行继续从左往右流。\n**块级元素**自上而下流动，每个块占一行(管你宽度多少他就不用)。\n##### Tips:\ntip1：内联元素在宽度不够的时候如果有border，他不会在另起一行的部分加上border，而会截断这个border。\ntip2：中文会截断换行，英文如果不空格，打死不换行。\n如果你希望英文也会截断，请加入一个属性`word-break:break-all;`默认为`word-break:break-word`\n如果你希望他一直不断`word-break:keep-all;`了解一下。\n中文网站推荐：`word-break:break-all;`\n#### **那么`<span>`这种内联元素的高度由什么决定呢？**\n##### 字体设计（基线）\n基线 上部 下部\n对齐是基于基线的。\n我们常说的`font-size: 100px;`指的是字体（注意是字体）的最高点和最低点的竖直距离。\n但为什么把字放在`<span>`里面加上border会比字体本身高度要多出来呢？\n**因为**:这个字体设计的**建议行高**，就是字体大小的倍数（例如100px大小的字体，span高度140，那么建议高度就是1.4）\n###### 这时候怎么破呢？\n改它的行高系数呗`line-height: 1.2;`把他系数固定就好了。\n\n##### 那么有多个`<span>`的`<div>`的高度怎么说？\n一旦涉及到内联元素，div的高度就玄学了呀。\n字体小的时候`<div>`可以用line-height来控制高度，想要确定的高度就拿padding凑凑吧。\n有时候迫不得已...定死height这个属性，可能会出现无穷无尽的问题（很难维护之类的）。\n所以`display: inline-block;`之后通过改变padding的方式改变宽高好一点。\n**`inline-block`状态下不会合并外边距。**这时候可能下面会有一条诡异的空隙\n这时候需要`vertical-align: top;`\n`<span>`是不接受宽高这个属性的。\n\n### 感觉再不练Grid布局，真的就要累死人了。\n早就有grid布局插件了。\n\n### VIII`position`\n#### `position: fixed;`\n可以脱离文档流。相对于屏幕脱离文档流。\n这时候他飘了，不像一个正常规则下的排列了，只能`width: 100%;`这种巨坑把它卡死...后面又是好多大坑。\n#### `background-position`\n`background-position: center center;`可以让背景图片在`<div>`里面居中\n但是很多时候由于图片过大导致超出div范围所以加入`background-size: cover;`属性使其自适应。\n同样，在`<div>`加入属性`max-width: 800px`则会使div在800px以内缩放自适应。\n`margin-left：auto;`\n`margin-right:auto;`即可水平居中。\n#### `position: absolute`绝对定位\n和`position: fixed`不同的是\n`absolute`可以相对父级（或以上）元素有`position: relative;`的第一个元素相对定位。\n在我发现footer在到处飘的时候通过它绝对定位(需要设置width left right)\n\n### IX.如何用CSS画个三角玩玩。\n```\ndiv{\n    border: 10px solid red;\n    width: 0px;\n    height: 0px;\n    border-top-color:black;\n    border-right-color:blue;\n    border-left-color:green;\n}\n```\n现在我们有四个三角形\n```\t\ndiv{\n    border: 10px solid red;\n    width: 0px;\n    height: 0px;\n    border-top-color:black;\n    border-right-color:blue;\n    border-left-color:green;\n    border-top-width:0px;\n}\n```\n现在我们有三个长得不一样的三角形了。\n```\ndiv{\n    border: 100px solid transparent;\n    width: 0px;\n    height: 0px;\n    border-top-color:transparent;\n    border-right-color:transparent;\n    border-left-color:red;\n    border-top-width:0px;\n}\n```\n把不需要的三角形部分透明就OK了呀。那么top和right的color属性也不需要了。\n#### i.CSS 3的属性\n##### 线性渐变：`linear gradient`\n他有相应的生成工具：`ultimate CSS Gradient Generator`[Google it](http://www.colorzilla.com/gradient-editor/).\n\n\n#### ii.CSS tricks shape\n[这个网站教你用CSS画画](https://css-tricks.com/examples/ShapesOfCSS/)\n\n#### iii.iconfont\n[这个网站是找图标的](http://iconfont.cn/)\nsvg需要记住三个属性\n`width`宽\n`height`高（需要和宽一起变化）\n`fill`颜色（这是svg的语法,用来改变svg图标的颜色）","source":"_posts/入门-CSS.md","raw":"---\ntitle: 入门-CSS\ndate: 2018-03-24 19:29:24\ntags: CSS\n---\n## 1.CSS（Cascading Style Sheets）层叠样式表\n### I.诞生与发展\n#### i.两个人发明CSS\n哈肯·维姆·莱（Håkon Wium Lie）提出CSS的最初建议（1994）\n伯特·波斯(Bert Bos)当时正在设计一个叫\"Argo\"的浏览器，他们决定一起合作设计CSS。\n#### ii.W3C接管CSS\n1997年初，W3C内成立CSS工作组\n#### iii.CSS 2.1\n1998年5月，删除了2.0中基本不被支持的内容和增加了一些已有的浏览器的扩展内容。\n最受欢迎，支持最广泛的CSS。Which means：从IE 5.5支持CSS 2.1。\n做前端，低于IE 8，不看，不管，不测试。Why?淘宝是这样的。而且现在的电脑，IE 11起好吗？\n#### iv.CSS3\n2011年开始。什么？CSS 3这么久了吗？对的，就是这么久。\n·CSS选择器leval 3\n·CSS媒体查询leval 3\n·CSS Color leval 3\n他们三个模块被统称为CSS 3。详情请点击[CSS文档](https://www.w3.org/Style/CSS/specs.en.html)内容超级多。\n#### v.CSS 4？\n不会有CSS 4。只有各个模块leval 4\n前端每18个月难度翻一倍...\n#### vi.Tips:\n·LESS CSS：简化过后功能更多的CSS语言\n·SASS：同上，比上面的功能还多\n·PostCSS：一种CSS处理程序，纠错之类的\n三个周边工具，逼格超高。\n\n### II.如何学习\n#### i.MDN\n老朋友了不多介绍了。\n可以看可以查\n\n#### ii.CSS-Tricks\nSNIPPETS标签下的代码片段\n有效果以及代码。\n这个网站里面有各种CSS的奇淫技巧（真是一个贴切的名字）。\n善用搜索引擎可以搜一切技巧。前提：英语水平。\n\n#### iii.博客\n阮一峰CSS\n张鑫旭CSS（CSS大神，精通精通精通CSS）\n\n#### iv.Coderops\n炫酷的CSS效果，超Cooooooooooooool。\n按钮，加载条，各种。他为了表达CSS能做很多事情。\n基本一周出一个特效。\n\n#### v.《CSS揭秘》\nCSS技巧，有汉化。八个章节，讲了很多基础特效。\n\n---\n**规范文档是最强的，如果把文档研究透了，那太强了。**\n\n## 2.自己敲一敲\n\n### I.内联样式\n`<body style=\"background-color: black\">里面是内容</body>`\n`<h1 style=\"text-align: center; color: white;\">内联样式</h1>`\n在标签里面写CSS样式。也称为Style属性\n\n### II.但是这样标签好长呀\n```\n<head>\n    <style>\n        body{\n          background-color: gray;\n        }\n    </style>\n</head>\n```\n没问题，在头部加`<style>`标签就可以。\n\n### III.那style多了头部是不是会超级长\n```\n<head>\n   <link rel=\"stylesheet\" href=\"./a.css\">\n</head>\n```\n引入外部样式就可以\n**CSS文件也可以引入CSS**\n`@import url(./需要引入的CSS.css);`\n在用a的时候先引入b\n\n### IV.float和clearfix\n```\n<ul style=\"list-style: none; margin: 0; padding: 0;\" class=\"clearfix\"> //class之前为了去掉默认样式中的点和margin以及padding\n    <li style=\"float:left;\">内容</li>\n</ul>\n```\n想让表格的子元素横着排，给子元素加`style=\"float:left;\"`但是这时候有BUG\n所以在父元素加`class=\"clearfix\"`\n```\n.clearfix::after{\n    content: '';\n    display: block;\n    clear: both;\n}\n```\n还可以用什么呢？让块横着排的方法？\n有一个叫做`display: inline-block;`可以让块像内联元素一样排列了。\n**但是，建议还是用`float`吧**\n\n### V.第一个选择器`>`\n表达了一个左边是父，右边是子。\n**HTML默认字体大小：16px**\n\n### VI.padding的缩写\n顺时针，上右下左。\n\n### VII.一个元素的高度是由什么决定的？\n#### **由内容决定**\n**`<div>`高度由其内部文档流元素的高度综合决定。**\n##### **文档流**：\n文档内元素的流动方向。\n##### **流动方向**：\n**内联元素**从左至右流动，若流动受到阻碍（例如宽度不够），则换行继续从左往右流。\n**块级元素**自上而下流动，每个块占一行(管你宽度多少他就不用)。\n##### Tips:\ntip1：内联元素在宽度不够的时候如果有border，他不会在另起一行的部分加上border，而会截断这个border。\ntip2：中文会截断换行，英文如果不空格，打死不换行。\n如果你希望英文也会截断，请加入一个属性`word-break:break-all;`默认为`word-break:break-word`\n如果你希望他一直不断`word-break:keep-all;`了解一下。\n中文网站推荐：`word-break:break-all;`\n#### **那么`<span>`这种内联元素的高度由什么决定呢？**\n##### 字体设计（基线）\n基线 上部 下部\n对齐是基于基线的。\n我们常说的`font-size: 100px;`指的是字体（注意是字体）的最高点和最低点的竖直距离。\n但为什么把字放在`<span>`里面加上border会比字体本身高度要多出来呢？\n**因为**:这个字体设计的**建议行高**，就是字体大小的倍数（例如100px大小的字体，span高度140，那么建议高度就是1.4）\n###### 这时候怎么破呢？\n改它的行高系数呗`line-height: 1.2;`把他系数固定就好了。\n\n##### 那么有多个`<span>`的`<div>`的高度怎么说？\n一旦涉及到内联元素，div的高度就玄学了呀。\n字体小的时候`<div>`可以用line-height来控制高度，想要确定的高度就拿padding凑凑吧。\n有时候迫不得已...定死height这个属性，可能会出现无穷无尽的问题（很难维护之类的）。\n所以`display: inline-block;`之后通过改变padding的方式改变宽高好一点。\n**`inline-block`状态下不会合并外边距。**这时候可能下面会有一条诡异的空隙\n这时候需要`vertical-align: top;`\n`<span>`是不接受宽高这个属性的。\n\n### 感觉再不练Grid布局，真的就要累死人了。\n早就有grid布局插件了。\n\n### VIII`position`\n#### `position: fixed;`\n可以脱离文档流。相对于屏幕脱离文档流。\n这时候他飘了，不像一个正常规则下的排列了，只能`width: 100%;`这种巨坑把它卡死...后面又是好多大坑。\n#### `background-position`\n`background-position: center center;`可以让背景图片在`<div>`里面居中\n但是很多时候由于图片过大导致超出div范围所以加入`background-size: cover;`属性使其自适应。\n同样，在`<div>`加入属性`max-width: 800px`则会使div在800px以内缩放自适应。\n`margin-left：auto;`\n`margin-right:auto;`即可水平居中。\n#### `position: absolute`绝对定位\n和`position: fixed`不同的是\n`absolute`可以相对父级（或以上）元素有`position: relative;`的第一个元素相对定位。\n在我发现footer在到处飘的时候通过它绝对定位(需要设置width left right)\n\n### IX.如何用CSS画个三角玩玩。\n```\ndiv{\n    border: 10px solid red;\n    width: 0px;\n    height: 0px;\n    border-top-color:black;\n    border-right-color:blue;\n    border-left-color:green;\n}\n```\n现在我们有四个三角形\n```\t\ndiv{\n    border: 10px solid red;\n    width: 0px;\n    height: 0px;\n    border-top-color:black;\n    border-right-color:blue;\n    border-left-color:green;\n    border-top-width:0px;\n}\n```\n现在我们有三个长得不一样的三角形了。\n```\ndiv{\n    border: 100px solid transparent;\n    width: 0px;\n    height: 0px;\n    border-top-color:transparent;\n    border-right-color:transparent;\n    border-left-color:red;\n    border-top-width:0px;\n}\n```\n把不需要的三角形部分透明就OK了呀。那么top和right的color属性也不需要了。\n#### i.CSS 3的属性\n##### 线性渐变：`linear gradient`\n他有相应的生成工具：`ultimate CSS Gradient Generator`[Google it](http://www.colorzilla.com/gradient-editor/).\n\n\n#### ii.CSS tricks shape\n[这个网站教你用CSS画画](https://css-tricks.com/examples/ShapesOfCSS/)\n\n#### iii.iconfont\n[这个网站是找图标的](http://iconfont.cn/)\nsvg需要记住三个属性\n`width`宽\n`height`高（需要和宽一起变化）\n`fill`颜色（这是svg的语法,用来改变svg图标的颜色）","slug":"入门-CSS","published":1,"updated":"2018-04-10T04:21:53.650Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3u000ot2g3pu1im18j","content":"<h2 id=\"1-CSS（Cascading-Style-Sheets）层叠样式表\"><a href=\"#1-CSS（Cascading-Style-Sheets）层叠样式表\" class=\"headerlink\" title=\"1.CSS（Cascading Style Sheets）层叠样式表\"></a>1.CSS（Cascading Style Sheets）层叠样式表</h2><h3 id=\"I-诞生与发展\"><a href=\"#I-诞生与发展\" class=\"headerlink\" title=\"I.诞生与发展\"></a>I.诞生与发展</h3><h4 id=\"i-两个人发明CSS\"><a href=\"#i-两个人发明CSS\" class=\"headerlink\" title=\"i.两个人发明CSS\"></a>i.两个人发明CSS</h4><p>哈肯·维姆·莱（Håkon Wium Lie）提出CSS的最初建议（1994）<br>伯特·波斯(Bert Bos)当时正在设计一个叫”Argo”的浏览器，他们决定一起合作设计CSS。</p>\n<h4 id=\"ii-W3C接管CSS\"><a href=\"#ii-W3C接管CSS\" class=\"headerlink\" title=\"ii.W3C接管CSS\"></a>ii.W3C接管CSS</h4><p>1997年初，W3C内成立CSS工作组</p>\n<h4 id=\"iii-CSS-2-1\"><a href=\"#iii-CSS-2-1\" class=\"headerlink\" title=\"iii.CSS 2.1\"></a>iii.CSS 2.1</h4><p>1998年5月，删除了2.0中基本不被支持的内容和增加了一些已有的浏览器的扩展内容。<br>最受欢迎，支持最广泛的CSS。Which means：从IE 5.5支持CSS 2.1。<br>做前端，低于IE 8，不看，不管，不测试。Why?淘宝是这样的。而且现在的电脑，IE 11起好吗？</p>\n<h4 id=\"iv-CSS3\"><a href=\"#iv-CSS3\" class=\"headerlink\" title=\"iv.CSS3\"></a>iv.CSS3</h4><p>2011年开始。什么？CSS 3这么久了吗？对的，就是这么久。<br>·CSS选择器leval 3<br>·CSS媒体查询leval 3<br>·CSS Color leval 3<br>他们三个模块被统称为CSS 3。详情请点击<a href=\"https://www.w3.org/Style/CSS/specs.en.html\" target=\"_blank\" rel=\"noopener\">CSS文档</a>内容超级多。</p>\n<h4 id=\"v-CSS-4？\"><a href=\"#v-CSS-4？\" class=\"headerlink\" title=\"v.CSS 4？\"></a>v.CSS 4？</h4><p>不会有CSS 4。只有各个模块leval 4<br>前端每18个月难度翻一倍…</p>\n<h4 id=\"vi-Tips\"><a href=\"#vi-Tips\" class=\"headerlink\" title=\"vi.Tips:\"></a>vi.Tips:</h4><p>·LESS CSS：简化过后功能更多的CSS语言<br>·SASS：同上，比上面的功能还多<br>·PostCSS：一种CSS处理程序，纠错之类的<br>三个周边工具，逼格超高。</p>\n<h3 id=\"II-如何学习\"><a href=\"#II-如何学习\" class=\"headerlink\" title=\"II.如何学习\"></a>II.如何学习</h3><h4 id=\"i-MDN\"><a href=\"#i-MDN\" class=\"headerlink\" title=\"i.MDN\"></a>i.MDN</h4><p>老朋友了不多介绍了。<br>可以看可以查</p>\n<h4 id=\"ii-CSS-Tricks\"><a href=\"#ii-CSS-Tricks\" class=\"headerlink\" title=\"ii.CSS-Tricks\"></a>ii.CSS-Tricks</h4><p>SNIPPETS标签下的代码片段<br>有效果以及代码。<br>这个网站里面有各种CSS的奇淫技巧（真是一个贴切的名字）。<br>善用搜索引擎可以搜一切技巧。前提：英语水平。</p>\n<h4 id=\"iii-博客\"><a href=\"#iii-博客\" class=\"headerlink\" title=\"iii.博客\"></a>iii.博客</h4><p>阮一峰CSS<br>张鑫旭CSS（CSS大神，精通精通精通CSS）</p>\n<h4 id=\"iv-Coderops\"><a href=\"#iv-Coderops\" class=\"headerlink\" title=\"iv.Coderops\"></a>iv.Coderops</h4><p>炫酷的CSS效果，超Cooooooooooooool。<br>按钮，加载条，各种。他为了表达CSS能做很多事情。<br>基本一周出一个特效。</p>\n<h4 id=\"v-《CSS揭秘》\"><a href=\"#v-《CSS揭秘》\" class=\"headerlink\" title=\"v.《CSS揭秘》\"></a>v.《CSS揭秘》</h4><p>CSS技巧，有汉化。八个章节，讲了很多基础特效。</p>\n<hr>\n<p><strong>规范文档是最强的，如果把文档研究透了，那太强了。</strong></p>\n<h2 id=\"2-自己敲一敲\"><a href=\"#2-自己敲一敲\" class=\"headerlink\" title=\"2.自己敲一敲\"></a>2.自己敲一敲</h2><h3 id=\"I-内联样式\"><a href=\"#I-内联样式\" class=\"headerlink\" title=\"I.内联样式\"></a>I.内联样式</h3><p><code>&lt;body style=&quot;background-color: black&quot;&gt;里面是内容&lt;/body&gt;</code><br><code>&lt;h1 style=&quot;text-align: center; color: white;&quot;&gt;内联样式&lt;/h1&gt;</code><br>在标签里面写CSS样式。也称为Style属性</p>\n<h3 id=\"II-但是这样标签好长呀\"><a href=\"#II-但是这样标签好长呀\" class=\"headerlink\" title=\"II.但是这样标签好长呀\"></a>II.但是这样标签好长呀</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        body&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没问题，在头部加<code>&lt;style&gt;</code>标签就可以。</p>\n<h3 id=\"III-那style多了头部是不是会超级长\"><a href=\"#III-那style多了头部是不是会超级长\" class=\"headerlink\" title=\"III.那style多了头部是不是会超级长\"></a>III.那style多了头部是不是会超级长</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./a.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>引入外部样式就可以<br><strong>CSS文件也可以引入CSS</strong><br><code>@import url(./需要引入的CSS.css);</code><br>在用a的时候先引入b</p>\n<h3 id=\"IV-float和clearfix\"><a href=\"#IV-float和clearfix\" class=\"headerlink\" title=\"IV.float和clearfix\"></a>IV.float和clearfix</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">ul</span> style=<span class=\"string\">\"list-style: none; margin: 0; padding: 0;\"</span> class=<span class=\"string\">\"clearfix\"</span>&gt; <span class=\"comment\">//class之前为了去掉默认样式中的点和margin以及padding</span></span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">li</span> style=<span class=\"string\">\"float:left;\"</span>&gt;内容&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>想让表格的子元素横着排，给子元素加<code>style=&quot;float:left;&quot;</code>但是这时候有BUG<br>所以在父元素加<code>class=&quot;clearfix&quot;</code><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还可以用什么呢？让块横着排的方法？<br>有一个叫做<code>display: inline-block;</code>可以让块像内联元素一样排列了。<br><strong>但是，建议还是用<code>float</code>吧</strong></p>\n<h3 id=\"V-第一个选择器-gt\"><a href=\"#V-第一个选择器-gt\" class=\"headerlink\" title=\"V.第一个选择器&gt;\"></a>V.第一个选择器<code>&gt;</code></h3><p>表达了一个左边是父，右边是子。<br><strong>HTML默认字体大小：16px</strong></p>\n<h3 id=\"VI-padding的缩写\"><a href=\"#VI-padding的缩写\" class=\"headerlink\" title=\"VI.padding的缩写\"></a>VI.padding的缩写</h3><p>顺时针，上右下左。</p>\n<h3 id=\"VII-一个元素的高度是由什么决定的？\"><a href=\"#VII-一个元素的高度是由什么决定的？\" class=\"headerlink\" title=\"VII.一个元素的高度是由什么决定的？\"></a>VII.一个元素的高度是由什么决定的？</h3><h4 id=\"由内容决定\"><a href=\"#由内容决定\" class=\"headerlink\" title=\"由内容决定\"></a><strong>由内容决定</strong></h4><p><strong><code>&lt;div&gt;</code>高度由其内部文档流元素的高度综合决定。</strong></p>\n<h5 id=\"文档流：\"><a href=\"#文档流：\" class=\"headerlink\" title=\"文档流：\"></a><strong>文档流</strong>：</h5><p>文档内元素的流动方向。</p>\n<h5 id=\"流动方向：\"><a href=\"#流动方向：\" class=\"headerlink\" title=\"流动方向：\"></a><strong>流动方向</strong>：</h5><p><strong>内联元素</strong>从左至右流动，若流动受到阻碍（例如宽度不够），则换行继续从左往右流。<br><strong>块级元素</strong>自上而下流动，每个块占一行(管你宽度多少他就不用)。</p>\n<h5 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h5><p>tip1：内联元素在宽度不够的时候如果有border，他不会在另起一行的部分加上border，而会截断这个border。<br>tip2：中文会截断换行，英文如果不空格，打死不换行。<br>如果你希望英文也会截断，请加入一个属性<code>word-break:break-all;</code>默认为<code>word-break:break-word</code><br>如果你希望他一直不断<code>word-break:keep-all;</code>了解一下。<br>中文网站推荐：<code>word-break:break-all;</code></p>\n<h4 id=\"那么-lt-span-gt-这种内联元素的高度由什么决定呢？\"><a href=\"#那么-lt-span-gt-这种内联元素的高度由什么决定呢？\" class=\"headerlink\" title=\"那么&lt;span&gt;这种内联元素的高度由什么决定呢？\"></a><strong>那么<code>&lt;span&gt;</code>这种内联元素的高度由什么决定呢？</strong></h4><h5 id=\"字体设计（基线）\"><a href=\"#字体设计（基线）\" class=\"headerlink\" title=\"字体设计（基线）\"></a>字体设计（基线）</h5><p>基线 上部 下部<br>对齐是基于基线的。<br>我们常说的<code>font-size: 100px;</code>指的是字体（注意是字体）的最高点和最低点的竖直距离。<br>但为什么把字放在<code>&lt;span&gt;</code>里面加上border会比字体本身高度要多出来呢？<br><strong>因为</strong>:这个字体设计的<strong>建议行高</strong>，就是字体大小的倍数（例如100px大小的字体，span高度140，那么建议高度就是1.4）</p>\n<h6 id=\"这时候怎么破呢？\"><a href=\"#这时候怎么破呢？\" class=\"headerlink\" title=\"这时候怎么破呢？\"></a>这时候怎么破呢？</h6><p>改它的行高系数呗<code>line-height: 1.2;</code>把他系数固定就好了。</p>\n<h5 id=\"那么有多个-lt-span-gt-的-lt-div-gt-的高度怎么说？\"><a href=\"#那么有多个-lt-span-gt-的-lt-div-gt-的高度怎么说？\" class=\"headerlink\" title=\"那么有多个&lt;span&gt;的&lt;div&gt;的高度怎么说？\"></a>那么有多个<code>&lt;span&gt;</code>的<code>&lt;div&gt;</code>的高度怎么说？</h5><p>一旦涉及到内联元素，div的高度就玄学了呀。<br>字体小的时候<code>&lt;div&gt;</code>可以用line-height来控制高度，想要确定的高度就拿padding凑凑吧。<br>有时候迫不得已…定死height这个属性，可能会出现无穷无尽的问题（很难维护之类的）。<br>所以<code>display: inline-block;</code>之后通过改变padding的方式改变宽高好一点。<br><strong><code>inline-block</code>状态下不会合并外边距。</strong>这时候可能下面会有一条诡异的空隙<br>这时候需要<code>vertical-align: top;</code><br><code>&lt;span&gt;</code>是不接受宽高这个属性的。</p>\n<h3 id=\"感觉再不练Grid布局，真的就要累死人了。\"><a href=\"#感觉再不练Grid布局，真的就要累死人了。\" class=\"headerlink\" title=\"感觉再不练Grid布局，真的就要累死人了。\"></a>感觉再不练Grid布局，真的就要累死人了。</h3><p>早就有grid布局插件了。</p>\n<h3 id=\"VIIIposition\"><a href=\"#VIIIposition\" class=\"headerlink\" title=\"VIIIposition\"></a>VIII<code>position</code></h3><h4 id=\"position-fixed\"><a href=\"#position-fixed\" class=\"headerlink\" title=\"position: fixed;\"></a><code>position: fixed;</code></h4><p>可以脱离文档流。相对于屏幕脱离文档流。<br>这时候他飘了，不像一个正常规则下的排列了，只能<code>width: 100%;</code>这种巨坑把它卡死…后面又是好多大坑。</p>\n<h4 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a><code>background-position</code></h4><p><code>background-position: center center;</code>可以让背景图片在<code>&lt;div&gt;</code>里面居中<br>但是很多时候由于图片过大导致超出div范围所以加入<code>background-size: cover;</code>属性使其自适应。<br>同样，在<code>&lt;div&gt;</code>加入属性<code>max-width: 800px</code>则会使div在800px以内缩放自适应。<br><code>margin-left：auto;</code><br><code>margin-right:auto;</code>即可水平居中。</p>\n<h4 id=\"position-absolute绝对定位\"><a href=\"#position-absolute绝对定位\" class=\"headerlink\" title=\"position: absolute绝对定位\"></a><code>position: absolute</code>绝对定位</h4><p>和<code>position: fixed</code>不同的是<br><code>absolute</code>可以相对父级（或以上）元素有<code>position: relative;</code>的第一个元素相对定位。<br>在我发现footer在到处飘的时候通过它绝对定位(需要设置width left right)</p>\n<h3 id=\"IX-如何用CSS画个三角玩玩。\"><a href=\"#IX-如何用CSS画个三角玩玩。\" class=\"headerlink\" title=\"IX.如何用CSS画个三角玩玩。\"></a>IX.如何用CSS画个三角玩玩。</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">border-right-color</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>:green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们有四个三角形<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">border-right-color</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>:green;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-width</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们有三个长得不一样的三角形了。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>:transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right-color</span>:transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-width</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>把不需要的三角形部分透明就OK了呀。那么top和right的color属性也不需要了。</p>\n<h4 id=\"i-CSS-3的属性\"><a href=\"#i-CSS-3的属性\" class=\"headerlink\" title=\"i.CSS 3的属性\"></a>i.CSS 3的属性</h4><h5 id=\"线性渐变：linear-gradient\"><a href=\"#线性渐变：linear-gradient\" class=\"headerlink\" title=\"线性渐变：linear gradient\"></a>线性渐变：<code>linear gradient</code></h5><p>他有相应的生成工具：<code>ultimate CSS Gradient Generator</code><a href=\"http://www.colorzilla.com/gradient-editor/\" target=\"_blank\" rel=\"noopener\">Google it</a>.</p>\n<h4 id=\"ii-CSS-tricks-shape\"><a href=\"#ii-CSS-tricks-shape\" class=\"headerlink\" title=\"ii.CSS tricks shape\"></a>ii.CSS tricks shape</h4><p><a href=\"https://css-tricks.com/examples/ShapesOfCSS/\" target=\"_blank\" rel=\"noopener\">这个网站教你用CSS画画</a></p>\n<h4 id=\"iii-iconfont\"><a href=\"#iii-iconfont\" class=\"headerlink\" title=\"iii.iconfont\"></a>iii.iconfont</h4><p><a href=\"http://iconfont.cn/\" target=\"_blank\" rel=\"noopener\">这个网站是找图标的</a><br>svg需要记住三个属性<br><code>width</code>宽<br><code>height</code>高（需要和宽一起变化）<br><code>fill</code>颜色（这是svg的语法,用来改变svg图标的颜色）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-CSS（Cascading-Style-Sheets）层叠样式表\"><a href=\"#1-CSS（Cascading-Style-Sheets）层叠样式表\" class=\"headerlink\" title=\"1.CSS（Cascading Style Sheets）层叠样式表\"></a>1.CSS（Cascading Style Sheets）层叠样式表</h2><h3 id=\"I-诞生与发展\"><a href=\"#I-诞生与发展\" class=\"headerlink\" title=\"I.诞生与发展\"></a>I.诞生与发展</h3><h4 id=\"i-两个人发明CSS\"><a href=\"#i-两个人发明CSS\" class=\"headerlink\" title=\"i.两个人发明CSS\"></a>i.两个人发明CSS</h4><p>哈肯·维姆·莱（Håkon Wium Lie）提出CSS的最初建议（1994）<br>伯特·波斯(Bert Bos)当时正在设计一个叫”Argo”的浏览器，他们决定一起合作设计CSS。</p>\n<h4 id=\"ii-W3C接管CSS\"><a href=\"#ii-W3C接管CSS\" class=\"headerlink\" title=\"ii.W3C接管CSS\"></a>ii.W3C接管CSS</h4><p>1997年初，W3C内成立CSS工作组</p>\n<h4 id=\"iii-CSS-2-1\"><a href=\"#iii-CSS-2-1\" class=\"headerlink\" title=\"iii.CSS 2.1\"></a>iii.CSS 2.1</h4><p>1998年5月，删除了2.0中基本不被支持的内容和增加了一些已有的浏览器的扩展内容。<br>最受欢迎，支持最广泛的CSS。Which means：从IE 5.5支持CSS 2.1。<br>做前端，低于IE 8，不看，不管，不测试。Why?淘宝是这样的。而且现在的电脑，IE 11起好吗？</p>\n<h4 id=\"iv-CSS3\"><a href=\"#iv-CSS3\" class=\"headerlink\" title=\"iv.CSS3\"></a>iv.CSS3</h4><p>2011年开始。什么？CSS 3这么久了吗？对的，就是这么久。<br>·CSS选择器leval 3<br>·CSS媒体查询leval 3<br>·CSS Color leval 3<br>他们三个模块被统称为CSS 3。详情请点击<a href=\"https://www.w3.org/Style/CSS/specs.en.html\" target=\"_blank\" rel=\"noopener\">CSS文档</a>内容超级多。</p>\n<h4 id=\"v-CSS-4？\"><a href=\"#v-CSS-4？\" class=\"headerlink\" title=\"v.CSS 4？\"></a>v.CSS 4？</h4><p>不会有CSS 4。只有各个模块leval 4<br>前端每18个月难度翻一倍…</p>\n<h4 id=\"vi-Tips\"><a href=\"#vi-Tips\" class=\"headerlink\" title=\"vi.Tips:\"></a>vi.Tips:</h4><p>·LESS CSS：简化过后功能更多的CSS语言<br>·SASS：同上，比上面的功能还多<br>·PostCSS：一种CSS处理程序，纠错之类的<br>三个周边工具，逼格超高。</p>\n<h3 id=\"II-如何学习\"><a href=\"#II-如何学习\" class=\"headerlink\" title=\"II.如何学习\"></a>II.如何学习</h3><h4 id=\"i-MDN\"><a href=\"#i-MDN\" class=\"headerlink\" title=\"i.MDN\"></a>i.MDN</h4><p>老朋友了不多介绍了。<br>可以看可以查</p>\n<h4 id=\"ii-CSS-Tricks\"><a href=\"#ii-CSS-Tricks\" class=\"headerlink\" title=\"ii.CSS-Tricks\"></a>ii.CSS-Tricks</h4><p>SNIPPETS标签下的代码片段<br>有效果以及代码。<br>这个网站里面有各种CSS的奇淫技巧（真是一个贴切的名字）。<br>善用搜索引擎可以搜一切技巧。前提：英语水平。</p>\n<h4 id=\"iii-博客\"><a href=\"#iii-博客\" class=\"headerlink\" title=\"iii.博客\"></a>iii.博客</h4><p>阮一峰CSS<br>张鑫旭CSS（CSS大神，精通精通精通CSS）</p>\n<h4 id=\"iv-Coderops\"><a href=\"#iv-Coderops\" class=\"headerlink\" title=\"iv.Coderops\"></a>iv.Coderops</h4><p>炫酷的CSS效果，超Cooooooooooooool。<br>按钮，加载条，各种。他为了表达CSS能做很多事情。<br>基本一周出一个特效。</p>\n<h4 id=\"v-《CSS揭秘》\"><a href=\"#v-《CSS揭秘》\" class=\"headerlink\" title=\"v.《CSS揭秘》\"></a>v.《CSS揭秘》</h4><p>CSS技巧，有汉化。八个章节，讲了很多基础特效。</p>\n<hr>\n<p><strong>规范文档是最强的，如果把文档研究透了，那太强了。</strong></p>\n<h2 id=\"2-自己敲一敲\"><a href=\"#2-自己敲一敲\" class=\"headerlink\" title=\"2.自己敲一敲\"></a>2.自己敲一敲</h2><h3 id=\"I-内联样式\"><a href=\"#I-内联样式\" class=\"headerlink\" title=\"I.内联样式\"></a>I.内联样式</h3><p><code>&lt;body style=&quot;background-color: black&quot;&gt;里面是内容&lt;/body&gt;</code><br><code>&lt;h1 style=&quot;text-align: center; color: white;&quot;&gt;内联样式&lt;/h1&gt;</code><br>在标签里面写CSS样式。也称为Style属性</p>\n<h3 id=\"II-但是这样标签好长呀\"><a href=\"#II-但是这样标签好长呀\" class=\"headerlink\" title=\"II.但是这样标签好长呀\"></a>II.但是这样标签好长呀</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">        body&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">          background-color: gray;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>没问题，在头部加<code>&lt;style&gt;</code>标签就可以。</p>\n<h3 id=\"III-那style多了头部是不是会超级长\"><a href=\"#III-那style多了头部是不是会超级长\" class=\"headerlink\" title=\"III.那style多了头部是不是会超级长\"></a>III.那style多了头部是不是会超级长</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"./a.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>引入外部样式就可以<br><strong>CSS文件也可以引入CSS</strong><br><code>@import url(./需要引入的CSS.css);</code><br>在用a的时候先引入b</p>\n<h3 id=\"IV-float和clearfix\"><a href=\"#IV-float和clearfix\" class=\"headerlink\" title=\"IV.float和clearfix\"></a>IV.float和clearfix</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"selector-tag\">ul</span> style=<span class=\"string\">\"list-style: none; margin: 0; padding: 0;\"</span> class=<span class=\"string\">\"clearfix\"</span>&gt; <span class=\"comment\">//class之前为了去掉默认样式中的点和margin以及padding</span></span><br><span class=\"line\">    &lt;<span class=\"selector-tag\">li</span> style=<span class=\"string\">\"float:left;\"</span>&gt;内容&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<p>想让表格的子元素横着排，给子元素加<code>style=&quot;float:left;&quot;</code>但是这时候有BUG<br>所以在父元素加<code>class=&quot;clearfix&quot;</code><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">''</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>还可以用什么呢？让块横着排的方法？<br>有一个叫做<code>display: inline-block;</code>可以让块像内联元素一样排列了。<br><strong>但是，建议还是用<code>float</code>吧</strong></p>\n<h3 id=\"V-第一个选择器-gt\"><a href=\"#V-第一个选择器-gt\" class=\"headerlink\" title=\"V.第一个选择器&gt;\"></a>V.第一个选择器<code>&gt;</code></h3><p>表达了一个左边是父，右边是子。<br><strong>HTML默认字体大小：16px</strong></p>\n<h3 id=\"VI-padding的缩写\"><a href=\"#VI-padding的缩写\" class=\"headerlink\" title=\"VI.padding的缩写\"></a>VI.padding的缩写</h3><p>顺时针，上右下左。</p>\n<h3 id=\"VII-一个元素的高度是由什么决定的？\"><a href=\"#VII-一个元素的高度是由什么决定的？\" class=\"headerlink\" title=\"VII.一个元素的高度是由什么决定的？\"></a>VII.一个元素的高度是由什么决定的？</h3><h4 id=\"由内容决定\"><a href=\"#由内容决定\" class=\"headerlink\" title=\"由内容决定\"></a><strong>由内容决定</strong></h4><p><strong><code>&lt;div&gt;</code>高度由其内部文档流元素的高度综合决定。</strong></p>\n<h5 id=\"文档流：\"><a href=\"#文档流：\" class=\"headerlink\" title=\"文档流：\"></a><strong>文档流</strong>：</h5><p>文档内元素的流动方向。</p>\n<h5 id=\"流动方向：\"><a href=\"#流动方向：\" class=\"headerlink\" title=\"流动方向：\"></a><strong>流动方向</strong>：</h5><p><strong>内联元素</strong>从左至右流动，若流动受到阻碍（例如宽度不够），则换行继续从左往右流。<br><strong>块级元素</strong>自上而下流动，每个块占一行(管你宽度多少他就不用)。</p>\n<h5 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h5><p>tip1：内联元素在宽度不够的时候如果有border，他不会在另起一行的部分加上border，而会截断这个border。<br>tip2：中文会截断换行，英文如果不空格，打死不换行。<br>如果你希望英文也会截断，请加入一个属性<code>word-break:break-all;</code>默认为<code>word-break:break-word</code><br>如果你希望他一直不断<code>word-break:keep-all;</code>了解一下。<br>中文网站推荐：<code>word-break:break-all;</code></p>\n<h4 id=\"那么-lt-span-gt-这种内联元素的高度由什么决定呢？\"><a href=\"#那么-lt-span-gt-这种内联元素的高度由什么决定呢？\" class=\"headerlink\" title=\"那么&lt;span&gt;这种内联元素的高度由什么决定呢？\"></a><strong>那么<code>&lt;span&gt;</code>这种内联元素的高度由什么决定呢？</strong></h4><h5 id=\"字体设计（基线）\"><a href=\"#字体设计（基线）\" class=\"headerlink\" title=\"字体设计（基线）\"></a>字体设计（基线）</h5><p>基线 上部 下部<br>对齐是基于基线的。<br>我们常说的<code>font-size: 100px;</code>指的是字体（注意是字体）的最高点和最低点的竖直距离。<br>但为什么把字放在<code>&lt;span&gt;</code>里面加上border会比字体本身高度要多出来呢？<br><strong>因为</strong>:这个字体设计的<strong>建议行高</strong>，就是字体大小的倍数（例如100px大小的字体，span高度140，那么建议高度就是1.4）</p>\n<h6 id=\"这时候怎么破呢？\"><a href=\"#这时候怎么破呢？\" class=\"headerlink\" title=\"这时候怎么破呢？\"></a>这时候怎么破呢？</h6><p>改它的行高系数呗<code>line-height: 1.2;</code>把他系数固定就好了。</p>\n<h5 id=\"那么有多个-lt-span-gt-的-lt-div-gt-的高度怎么说？\"><a href=\"#那么有多个-lt-span-gt-的-lt-div-gt-的高度怎么说？\" class=\"headerlink\" title=\"那么有多个&lt;span&gt;的&lt;div&gt;的高度怎么说？\"></a>那么有多个<code>&lt;span&gt;</code>的<code>&lt;div&gt;</code>的高度怎么说？</h5><p>一旦涉及到内联元素，div的高度就玄学了呀。<br>字体小的时候<code>&lt;div&gt;</code>可以用line-height来控制高度，想要确定的高度就拿padding凑凑吧。<br>有时候迫不得已…定死height这个属性，可能会出现无穷无尽的问题（很难维护之类的）。<br>所以<code>display: inline-block;</code>之后通过改变padding的方式改变宽高好一点。<br><strong><code>inline-block</code>状态下不会合并外边距。</strong>这时候可能下面会有一条诡异的空隙<br>这时候需要<code>vertical-align: top;</code><br><code>&lt;span&gt;</code>是不接受宽高这个属性的。</p>\n<h3 id=\"感觉再不练Grid布局，真的就要累死人了。\"><a href=\"#感觉再不练Grid布局，真的就要累死人了。\" class=\"headerlink\" title=\"感觉再不练Grid布局，真的就要累死人了。\"></a>感觉再不练Grid布局，真的就要累死人了。</h3><p>早就有grid布局插件了。</p>\n<h3 id=\"VIIIposition\"><a href=\"#VIIIposition\" class=\"headerlink\" title=\"VIIIposition\"></a>VIII<code>position</code></h3><h4 id=\"position-fixed\"><a href=\"#position-fixed\" class=\"headerlink\" title=\"position: fixed;\"></a><code>position: fixed;</code></h4><p>可以脱离文档流。相对于屏幕脱离文档流。<br>这时候他飘了，不像一个正常规则下的排列了，只能<code>width: 100%;</code>这种巨坑把它卡死…后面又是好多大坑。</p>\n<h4 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a><code>background-position</code></h4><p><code>background-position: center center;</code>可以让背景图片在<code>&lt;div&gt;</code>里面居中<br>但是很多时候由于图片过大导致超出div范围所以加入<code>background-size: cover;</code>属性使其自适应。<br>同样，在<code>&lt;div&gt;</code>加入属性<code>max-width: 800px</code>则会使div在800px以内缩放自适应。<br><code>margin-left：auto;</code><br><code>margin-right:auto;</code>即可水平居中。</p>\n<h4 id=\"position-absolute绝对定位\"><a href=\"#position-absolute绝对定位\" class=\"headerlink\" title=\"position: absolute绝对定位\"></a><code>position: absolute</code>绝对定位</h4><p>和<code>position: fixed</code>不同的是<br><code>absolute</code>可以相对父级（或以上）元素有<code>position: relative;</code>的第一个元素相对定位。<br>在我发现footer在到处飘的时候通过它绝对定位(需要设置width left right)</p>\n<h3 id=\"IX-如何用CSS画个三角玩玩。\"><a href=\"#IX-如何用CSS画个三角玩玩。\" class=\"headerlink\" title=\"IX.如何用CSS画个三角玩玩。\"></a>IX.如何用CSS画个三角玩玩。</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">border-right-color</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>:green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在我们有四个三角形<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">10px</span> solid red;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>:black;</span><br><span class=\"line\">    <span class=\"attribute\">border-right-color</span>:blue;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>:green;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-width</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>现在我们有三个长得不一样的三角形了。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">100px</span> solid transparent;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-color</span>:transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-right-color</span>:transparent;</span><br><span class=\"line\">    <span class=\"attribute\">border-left-color</span>:red;</span><br><span class=\"line\">    <span class=\"attribute\">border-top-width</span>:<span class=\"number\">0px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>把不需要的三角形部分透明就OK了呀。那么top和right的color属性也不需要了。</p>\n<h4 id=\"i-CSS-3的属性\"><a href=\"#i-CSS-3的属性\" class=\"headerlink\" title=\"i.CSS 3的属性\"></a>i.CSS 3的属性</h4><h5 id=\"线性渐变：linear-gradient\"><a href=\"#线性渐变：linear-gradient\" class=\"headerlink\" title=\"线性渐变：linear gradient\"></a>线性渐变：<code>linear gradient</code></h5><p>他有相应的生成工具：<code>ultimate CSS Gradient Generator</code><a href=\"http://www.colorzilla.com/gradient-editor/\" target=\"_blank\" rel=\"noopener\">Google it</a>.</p>\n<h4 id=\"ii-CSS-tricks-shape\"><a href=\"#ii-CSS-tricks-shape\" class=\"headerlink\" title=\"ii.CSS tricks shape\"></a>ii.CSS tricks shape</h4><p><a href=\"https://css-tricks.com/examples/ShapesOfCSS/\" target=\"_blank\" rel=\"noopener\">这个网站教你用CSS画画</a></p>\n<h4 id=\"iii-iconfont\"><a href=\"#iii-iconfont\" class=\"headerlink\" title=\"iii.iconfont\"></a>iii.iconfont</h4><p><a href=\"http://iconfont.cn/\" target=\"_blank\" rel=\"noopener\">这个网站是找图标的</a><br>svg需要记住三个属性<br><code>width</code>宽<br><code>height</code>高（需要和宽一起变化）<br><code>fill</code>颜色（这是svg的语法,用来改变svg图标的颜色）</p>\n"},{"title":"入门-HTML","date":"2018-03-22T08:13:21.000Z","_content":"## 1.什么是HTML\n\n### I. HTML\n是超文本标记语言（**H**yper**T**ext**M**arkup **L**anguage，简称：**HTML**）是一种用于创建网页的标准标记语言。\n### II. HTML版本(W3C组织制定规范)：\n  i. HTML 4.01\n  ii.XHTML\n  iii. HTML 5\n  iv. HTML 5.1\n### III. 规范文档(Specification)\n  i. 由W3C写文档（Sir Timothy John Berners-Lee）\n  ii. W3C根据浏览器的实际情况总结文档，并不是凭空想象。\n### IV. DOCTYPE\n  i. 用来选择文档类型\n  ii. DOCTYPE\n  \n  |版本|DOCTYPE|\n  |:---:|:---:|\n  |HTML 5及以上|<!DOCTYPE HTML>|\n  |HTML 4.01 Strict|<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\"http://www.w3.org/TR/html4/strict.dtd\"|\n   |HTML 4.01 Transitional|<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">|\n   |HTML 4.01 Frameset|<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"\"http://www.w3.org/TR/html4/frameset.dtd\">|\n   |XHTML 1.0 Strict|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">|\n   |XHTML 1.0 Transitional|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">|\n   |XHTML 1.0 Frameset|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">|\n   |XHTML 1.1 DTD|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">|\n   |XHTML Basic 1.1 (quick reference)|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">|\n   如果不写，就是个GG\n   \n## 2.W3C\nI. 万维网联盟（World Wide Web Consortium，W3C），又称W3C理事会，是万维网的主要国际标准组织。李爵士创立。\nII. 该组织试图通过W3C制定的新标准来促进业界成员间的兼容性和协议。不兼容的HTML版本由不同的供应商提供，导致网页显示方式不一致。联盟试图让所有的供应商实施一套由联盟选择的核心原则和组件。\nIII. 总结一下，制定规范的组织。\n\n## 3.MDN\nI. MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网路技术开发文档的免费网站。\nII. 就是查文档的。\n\n## 4.HTML标签\n### I.标签\n|类型|元素|描述|备注|\n|:---:|:---:|:---:|:---:|\n|根元素|`<html>`|代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。|包含全局属性|\n|文档元数据|`<head>`|代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。|该元素包含全局属性。可用于`<head>`元素内的元素有: `<title>, <base>, <link>, <style>, <meta>, <script>, <noscript>, <command>`|\n||`<title>`|定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。|仅拥有全局属性，允许内容为非空字符或特殊字符（inter-element whitespace）的文本。\t一个 `<head>` 元素只能包含一个 `<title>`元素|\n||`<base>`|定义页面上相对 URL 的基准 URL。|允许空标签，不可以有结束标签。|\n||`<link>`|用于链接外部的 CSS 到该文档。|这是一个空标签，鉴于他也是空元素，所以也不可有结束标签|\n||`<meta>`|定义其他 HTML 元素无法描述的元数据。|也是个空标签，所以有始不能有终|\n||`<style>`|用于内联 CSS。|内容为匹配type属性指定的语言的样式信息。标签始终都不能省略|\n|脚本|`<script>`|定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。|内容为动态脚本。包含全局属性而且拥有以下类别：`<async><defer> <integrity><src><type><text><crossorigin>`|\n||`<noscript>`|定义当浏览器不支持脚本时显示的替代文字。|仅拥有全局元素|\n||`<template>`|通过 JavaScript 在运行时实例化内容的容器。|是一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用JavaScript进行实例化。，加载页面的同时,解析器确实处理 `<template>`元素的内容，这样做只是确保这些内容是有效的; 然而,元素的内容不会被渲染|\n|章节|`<body>`|代表 HTML 文档的内容。在文档中只能有一个 <body> 元素。|它必须是 `<html>` 元素的直接子元素。|\n||`<section>`|定义文档中的一个章节。|内容中的一个专题组，一般来说会有包含一个标题（heading）。一般通过是否包含一个标题` (<h1>-<h6> element)` 作为子节点 来 辨识每一个`<section>`。允许内容：流式元素|\n||`<nav>`|定义只包含导航链接的章节。|用于描述一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表。允许内容：流式元素|\n||<article>|定义可以独立于内容其余部分的完整独立内容块。|表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。允许元素：流式元素|\n||`<h1>,<h2>,<h3>,<h4>,<h5>,<h6>`|标题元素实现了六层文档标题，`<h1>` 是最大的标题，`<h6>` 是最小的标题。标题元素简要地描述章节的主题。|标题顺序从1到6顺序排列，不要为了改变字体大小跳过顺序使用标题，应该用CSS样式改变字体。允许内容：短语元素|\n||`<header>`|定义页面或章节的头部。它经常包含 logo、页面标题、搜索表单和导航性的目录。|允许内容：流式元素|\n||`<footer>`|定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。|允许内容：流式元素，但是不能包含`<footer>`或者`<header>`。|\n||`<address>`|定义包含联系信息的一个章节。|允许内容：流式元素但是不能是内嵌的`<address>`元素、标题元素、章节元素|\n||`<main>`|定义文档中主要或重要的内容。|允许内容：流式元素|\n|组织内容|`<p>`|定义一个段落。|表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，`<p>`是块级元素。允许元素：短语元素|\n||`<hr>`|代表章节、文章或其他长内容中段落之间的分隔符。|允许内容：无，这是一个空元素。所以有始无终。|\n||`<pre>`|代表其内容已经预先排版过，格式应当保留 。|允许内容：短语元素|\n||`<blockquote>`|代表引用自其他来源的内容。（块级引用）|代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（注 中说明了如何更改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 cite 特性上，若要以文本的形式告知读者引文的出处时，可以通过 `<cite>` 元素。允许内容：流式元素|\n||`<ol>`|定义一个有序列表。|表示多个有序列表项，通常渲染为有带编号的列表。允许内容：一个或多个`<li>`元素。这些`<li>`元素可以再包含嵌套的`<ol>`或`<ul>`元素。|\n||`<ul>`|定义一个无序列表。|代表多项的无序列表，即无数值排序项的集合，且它们在列表中的顺序是没有意义的。通常情况下，无序列表项的头部可以是几种形式，如一个点，一个圆形或方形。头部的风格并不是在页面的HTML描述定义, 但在其相关的CSS 可以用 list-style-type 属性。允许内容：一个或多个`<li>`元素。这些`<li>`元素可以再包含嵌套的`<ol>`或`<ul>`元素。|\n||`<li>`|定义列表中的一个列表项。|用于表示列表里的条目。它必须被包含在一个父元素里：一个有顺序的列表(`<ol>`)，一个无顺序的列表(`<ul>`)，或者一个菜单 (`<menu>`)。在菜单或者无顺序的列表里，列表条目通常用点排列显示。在有顺序的列表里，列表条目通常是在左边有按升序排列计数的显示，例如数字或者字母。元素类型：块级 允许内容：流式内容|\n||`<dl>`|HTML `<dl> `元素 （或 HTML 描述列表元素）是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 。|允许内容：一个或者多个`<dt>`元素。这些`<dt>`元素可以再包含嵌套的`<dd>`元素|\n||`<dt>`|HTML `<dt>` 元素 （或 HTML 术语定义元素）用于在一个定义列表中声明一个术语。该元素仅能作为 `<dl>` 的子元素出现。通常在该元素后面会跟着 `<dd>` 元素， 然而，多个连续出现的 `<dt>` 元素都将由出现在它们后面的第一个 `<dd>` 元素定义。 |允许的内容：流式内容 但是不能包含 `<header>` 元素、`<footer>` 元素或者其他章节、标题内容。|\n||`<dd>`|HTML `<dd>` 元素（HTML 描述元素）用来指明一个描述列表  (`<dl>`) 元素中一个术语的描述。这个元素只能作为描述列表元素的子元素出现，并且必须跟着一个 `<dt>` 元素。|允许的内容：流式元素|\n||`<figure>`|代表一个和文档有关的图例。|`<figure>` 元素代表一段独立的内容, 经常与说明(caption) `<figcaption>` 配合使用, 并且作为一个独立的引用单元。当它属于主体(main flow)时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。允许的内容：flow content中的`<figcaption>` 元素; 或者`<figcaption>` 元素中的flow content ; 或者 flow content.|\n||`<figcaption>`|代表一个图例的说明。|`<figcaption>` 元素 是与其相关联的图片的说明/标题，用?于描述其父节点 `<figure>` 元素里的其他数据。这意味着 <figcaption> 在<figure> 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。允许的内容：流式元素|\n||`<div>`|代表一个通用的容器，没有特殊含义。|`<div>`元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求（使用 class 或 id 特性) 或者对具有相同特性的一组元素进行分组 (比如 lang)，它应该在没有任何其它语义元素可用时才使用 (比如 `<article>` 或 `<nav>`) 。**没有默认样式!!!**允许的内容：流式元素|\n|文字形式|`<a>`|代表一个链接到其他资源的超链接 。|`<a>` 元素  (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。允许内容：透明内容模型、流式元素、短语元素|\n||`<em>`|代表强调的文字。|着重元素 (`<em>`) 标记出需要用户着重阅读的内容， <em> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。通常展现为斜体。允许内容：短语元素|\n||`<strong>`|代表特别重要的文字。|Strong 元素 (`<strong>`)表示文本十分重要，一般用粗体显示。允许内容：短语元素|\n||`<small>`|代表注释 ，如免责声明、版权声明等，对理解文档不重要。|`<small>`元素將使文本的字体变小一号。(例如从大变成中等，从中等变成小，从小变成超小)。在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。允许内容：短语元素|\n||`<s>`|代表不准确或不相关 的内容。|`<s>` 元素 使用删除线来渲染文本。使用 <s> 元素来表示不再相关，或者不再准确的事情。但是当表示文档编辑时，不提倡使用 <s> ；为此，提倡使用 `<del>` 和 `<ins>` 元素。允许的内容：短语元素|\n||`<cite>`|代表作品标题。|HTML引用（Citation）标签 (<cite>) 表示一个作品的引用。它必须包含引用作品的符合简写格式的标题或者URL，它可能是一个根据添加引用元数据的约定的简写形式。允许内容：流式元素、短语元素|\n||`<q>`|代表内联的引用 。|引用标签 (`<q>`)表示一个封闭的并且是短的行内引用的文本. 这个标签是用来引用短的文本，所以请不要引入换行符; 对于长的文本的引用请使用 `<blockquote>` 替代。|\n||`<dfn>`|代表一个术语包含在其最近祖先内容中的定义 。|定义元素 (`<dfn>`) 表示术语的一个定义。`<dfn>` 元素标记了被定义的术语；术语定义应当在 `<p>`, `<section>`或定义列表 (通常是`<dt>`, `<dd>` 对)中给出。被定义术语的值由下列规则确定：如果 `<dfn>` 元素有一个 title 属性，那么该术语的值就是该属性的值。否则，如果它仅包含一个 `<abbr>` 元素，该元素拥有 title 属性，那么该术语的值就是该属性的值。否则，`<dfn>` 元素的文本内容就是该术语的值。|\n||`<abbr>`|代表省略或缩写，其完整内容在 title 属性中。|允许内容：短语元素|\n||`<data>`|关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。|<data> 元素 将一个指定内容和机器可读的翻译联系在一起。但如果内容是与 time 或者 date 相关的，一定要使用 `<time>`。允许内容：短语元素|\n||`<time>`|代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。|time 标签(`<time>`) 用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。此元素意在以机器可读的格式表示日期和时间。 有安排日程表功能的应用可以利用这一点。允许内容：短语元素，但不能包含time元素|\n||`<code>`|\t代表计算机代码 。|<code> 元素呈现一段计算机代码. 默认情况下, 它以浏览器的默认等宽字体显示。允许元素：短语元素|\n||`<var>`|代表代码中的变量 。|<var> 标签表示变量的名称，或者由用户提供的值。允许元素：短语元素|\n||`<samp>`|代表程序或电脑的输出 。|`<samp>` 元素用于标识计算机程序输出，通常使用浏览器默认的 monotype 字体。允许内容：短语元素|\n||`<kbd>`|代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。|键盘输入元素(`<kbd>`) 用于表示用户输入，它将产生一个行内元素，以浏览器的默认monospace字体显示。允许内容：短语元素|\n||`<sub>,<sup>`|分别代表下标 和上标 。|`<sub>` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。`<sup>` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。允许内容：短语元素。|\n||`<i>`|代表一段不同性质 的文字，如技术术语、外文短语等。|<i> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。允许内容：短语元素|\n||`<b>`|代表一段需要被关注 的文字。|提醒注意（Bring Attention To）元素（`<b>`）用于吸引读者的注意到该元素的内容上（如果没有另加特别强调）。这个元素过去被认为是粗体（Boldface）元素，并且大多数浏览器仍然将文字显示为粗体。尽管如此，你不应将 `<b>` 元素用于显示粗体文字；替代方案是使用 CSS font-weight 属性来创建粗体文字。允许内容：短语元素|\n||`<u>`|代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。|`<u>` 元素使文本在其内容的基线下的一行呈现下划线。在HTML5中, 此元素表示具有未标注的文本跨度，显示渲染，非文本注释，例如将文本标记为中文文本中的专有名称(一个正确的中文标记), 或 将文本标记为拼写错误。允许内容：短语元素|\n||`<mark>`|代表一段需要被高亮的引用的文字。|可以用来显示搜索引擎的关键词，允许的内容：短语元素|\n||`<ruby>`|代表被ruby 注释 标记的文本，如中文汉字和它的拼音。|<ruby> 元素 被用来展示东亚文字注音或字符注释。允许内容：短语元素|\n||`<rt>`|代表ruby 注释 ，如中文拼音。|Ruby 文本 (<rt>) 元素包含字符的发音，字符在 ruby 注解中出现，它用于描述东亚字符的发音。这个元素始终在 <ruby> 元素中使用。允许内容：短语元素|\n||`<rp>`|代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。|<rp> 元素用于为那些不能使用 <ruby> 元素展示 ruby 注解的浏览器，提供随后的圆括号。允许的内容：短语元素|\n||`<bdi>`|代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。|`<bdi>` 元素 (双向隔离元素) 会隔离可能以不同方向进行格式化的外部文本。当不知道是从什么方向嵌入文本，如来自于数据库的文本（有起数据库的文本方向）的时候，该元素是十分有用的。允许内容：短语元素|\n||`<span>`|代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。|`<span>` 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者Id属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。`<span>` 与 `<div>` 元素很相似，但 `<div>` 是一个 块元素 而 `<span>` 则是 行内元素。**没有默认样式没有默认样式！！！**允许内容：短语元素|\n||`<br>`|代表换行。|`<br>` 元素在文本中生成一个换行（回车）符号。此元素在写诗和地址时很有用，这些地方的换行都非常重要。允许内容：无，这是一个空元素|\n||`<wbr>`|代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。|<wbr> 元素  — 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。允许内容：无，这是一个空元素|\n|编辑|`<ins>`|定义增加到文档的内容。|`<ins>` 元素定义已经被插入文档中的文本。允许内容：透明内容模型|\n||`<del>`|定义从文档移除 的内容。|`<del>`标签表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。`<ins>`标签的作用恰恰于此相反：表示文档中添加的内容。这个标签通常（但不一定要）在文字上显示删除线。允许内容：透明内容模型|\n|嵌入内容|`<img>`|代表一张图片 。|允许内容：无 这是一个空元素 有始无终 父元素：接受嵌入式内容的任意元素|\n||`<iframe>`|代表一个内联的框架 。|内联框架元素 `<iframe>` 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。在HTML 4.01中，文档可能包含头部和正文，或头部和框架集，但不能包含正文和框架集。但是，`<iframe>`可以在正常的文档主体中使用。每个浏览上下文都有自己的会话历史记录和活动文档。包含嵌入内容的浏览上下文称为父浏览上下文。顶级浏览上下文（没有父级）通常是浏览器窗口。允许元素：流式元素、短语元素、嵌入元素、。|\n||`<embed>`|代表一个嵌入 的外部资源，如应用程序或交互内容。|`<embed>`元素将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。允许内容：流式元素、短语元素、嵌入元素|\n||`<object>`|代表一个外部资源 ，如图片、HTML 子文档、插件等。|`<object>` 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。允许内容：流式元素、短语元素、嵌入元素|\n||`<param>`|`<param> `元素(或 HTML Parameter 元素) 定义了 `<object>`的参数|允许内容：空元素 有始无终|\n||`<video>`|代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。|`<video>` 元素 用于在HTML或者XHTML文档中嵌入视频内容。允许内容：流式元素，包含任一 src 属性或是一个或多个 `<source>` 元素，其后紧跟流式元素 或 短语元素 ， 不包括`<video>` 或者 `<audio>` 元素。|\n||`<audio>`|代表一段声音 ，或音频流 。|`<audio>` 元素用于在文档中表示音频内容。 `<audio>` 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者`<source>` 元素来进行描述； 浏览器将会选择最合适的一个来使用。对于不支持`<audio>`元素的浏览器，`<audio>`元素也可以作为浏览器不识别的内容加入到文档中。允许内容：如果元素包含 src 属性：零个或多个 `<track>` 元素，其后紧跟不包含 `<audio>` 或者 `<video>`媒体元素的透明内容。或者：零个或多个 `<source>` 元素，其后紧跟零个或多个 `<track>` 元素，其后紧跟不包含 `<audio>` 或者 `<video>`媒体元素的透明内容。|\n||`<source>`|为 `<video>` 或 `<audio>` 这类媒体元素指定媒体源 。|允许内容：一个 `<picture>` 元素, 且在`<img>`元素之前|\n||`<track> `|为 `<video>` 或 `<audio>` 这类媒体元素指定文本轨道（字幕） 。|`<track>` 元素 被当作媒体元素—`<audio>` 和 `<video>`的子元素来使用。它允许指定计时字幕（或者基于事件的数据），例如自动处理字幕。track 给媒体元素添加的数据的类型在 kind 属性中设置，属性值可以是`subtitles`, `captions`, `descriptions`, `chapters` 或 `metadata`。该元素指向当用户请求额外的数据时浏览器公开的包含定时文本的源文件。一个`media` 元素的任意两个 `track` 子元素不能有相同的 `kind`, `srclang`, 和 `label`属性。允许内容：空，这是一个空元素|\n||`<canvas>`|代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。|`<canvas>`元素可被用来通过脚本（通常是JavaScript）绘制图形。比如,它可以被用来绘制图形,制作图片集合,甚至用来实现动画效果。你可以(也应该)在元素标签内写入可提供替代的的代码内容，这些内容将会在在旧的、不支持`<canvas>`元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现。|\n||`<map>`|与 `<area>` 元素共同定义图像映射 区域。|<map> 属性 与 <area> 属性一起使用来定义一个图像映射(一个可点击的链接区域).允许内容：任何透明元素模型|\n||`<area>`|与 <map> 元素共同定义图像映射 区域。|<area> 元素 在图片上定义一个热点区域，可以关联一个超链接。<area>元素仅在<map>元素内部使用。允许内容：空，这是一个空元素 有始无终|\n||`<svg>`|定义一个嵌入式矢量图 。|如果svg不是根元素，svg 元素可以用于在当前文档（比如说，一个HTML文档）内嵌套一个独立的svg片段。这个独立片段拥有独立的视口和坐标系统。允许内容：任意数量、任意排序的下列元素：动画元素；描述性元素；形状元素；结构化元素；渐变元素；`<a>, <altGlyphDef>, <clipPath>, <color-profile>, <cursor>, <filter>, <font>, <font-face>, <foreignObject>, <image>, <marker>, <mask>, <pattern>, <script>, <style>, <switch>, <text>, <view>`|\n||`<math>`|定义一段数学公式 。|MathML的顶级元素是`<math>`。所有有效的MathML实例必须被包括在 `<math>` 标记中。另外不可以在一个 `<math>` 元素中嵌套第二个` <math>` 元素，但是 `<math>` 元素中可以有任意多的子元素 。|\n|表格|`<table>`|定义多维数据 。|在 CSS 创建之前， HTML `<table>` 元素常常被用于布局页面。 这种用法在 HTML 4之后不被推荐使用，并且 `<table>`元素 不应该 被用于此目的。允许内容：按照这个顺序：一个可选的 `<caption>` 元素；零个或多个的 `<colgroup>` 元素；一个可选的 `<thead>` 元素；一个可选的 `<tfoot>` 元素（tfoot元素出现在tbody或tr元素前后都可以。在HTML4中，它只能出现在这些元素之前）；零个或多个 `<tbody>` 元素；一个或多个 `<tr>` 元素；|\n||`<caption>`|代表表格的标题。|`<caption>` 元素 (or HTML 表格标题元素) 展示一个表格的标题， 它常常作为 `<table>` 的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被CSS样式化，所以，它同样可以出现在任何一个一个相对于表格的做任意位置。允许内容：流式元素|\n||`<colgroup>`|代表表格中一组单列或多列。|表格列组（Column Group `<colgroup>`） 标签用来定义表中的一组列表。若`span`属性为`present`: 那它就是一个空属性。如果属性不是`present`内容为：零或多个`<col>`属性|\n||`<col>`|代表表格中的列。|`<col>` 元素 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于<colgroup>元素内。允许内容：这是一个空元素有始无终|\n||`<tbody>`|代表表格中一块具体数据 （表格主体）。|允许内容：零或多个`<tr>`元素|\n||`<thead>`|代表表格中一块列标签（表头）。|允许内容：零或多个`<tr>`元素|\n||`<tfoot>`|代表表格中一块列摘要（表尾）|允许内容：零或多个`<tr>`元素|\n||`<tr>`|代表表格中的行 。|允许内容：零或多个`<td>`或`<th>`元素|\n||`<td>`|代表表格中的单元格 。|允许内容：流式元素|\n||`<th>`|代表表格中的头部单元格 。|允许内容：流内容（除header、footer、sectioning content或heading content的继承。）|\n|表单|`<form>`|代表一个表单 ，由控件组成。|<form> 元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。可以用 `:valid `和`:invalid` CSS 伪类 来给一个元素指定样式。允许内容：流式元素|\n||`<fieldset>`|代表控件组 。|`fieldset`元素通常用来对表单中的控制元素进行分组(也包括 label 元素)允许内容：一个可选的` <legend> `元素，后面跟流式元素|\n||`<legend>`|代表 `<fieldset>` 控件组的标题。|`<legend>`元素（也称为HTML的域说明元素（or HMTL Legend Field Element））代表一个用于表示它的父元素`<fieldset>`的内容的标题。允许内容：短语元素|\n||`<label>`|代表表单控件的标题。## II.元素|它通常关联一个控件，或者是将控件放置在label元素内，或者是用作其属性。这样的控制称作label元素的labeled control。允许内容：没有后代`label`元素的短语元素。除了标记控制之外，不允许使用其他可标记的元素。|\n||`<button>\t`|代表按钮。|`<button>` 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。 默认情况下，HTML按钮的显示样式接近于 user agent 所在的宿主系统平台（用户操作系统）的按钮， 但你可以使用 CSS 来改变按钮的样貌。允许内容：短语元素|\n||`<select>`|代表下拉框。|`<select>` 元素是一种表单控件，可创建选项菜单。菜单内的选项为`<option>` , 可以由 `<optgroup>` 元素分组。选项可以被用户预先选择。允许内容：0个或多个 `<option>` 或者 `<optgroup>` 元素|\n||`<datalist>`|代表提供给其他控件的一组预定义选项 。|Datalist 元素 (`<datalist>`) 包含了一组<option>元素,这些元素表示其它表单控件可选值。允许内容：要么短语元素 要么 0个或多个 `<option>`元素.|\n||`<optgroup>`|代表一个选项分组。|在一个web表单中, HTML元素` <optgroup> `会创建包含在一个 `<select>` 元素中的一组选项。允许内容：0或多个 `<option>` 元素|\n||`<option>`|代表一个 `<select>` 元素或 `<datalist>` 元素中的一个选项| HTML元素 `<option>`  用于定义在`<select>`,  `<optgroup>` 或`<datalist>` 元素中包含的项。`<option>` 可以在弹出窗口和 html 文档中的其他项目列表中表示菜单项。允许内容：带有最终转义字符（例如 `&eacute;`）的文本|\n||`<textarea>`|代表多行文本框 。|`<textarea>` 元素表示一个多行纯文本编辑控件。 允许内容：文字|\n||`<keygen>`|代表一个密钥对生成器。|尽量不要使用了，该特性已从Web标准中删除。|\n||`<output>`|代表计算值。|`<output>` 标签表示计算或用户操作的结果。允许内容：短语元素|\n||`<progress>`|代表进度条 。|progress (`<progress>`) 元素用来显示一项任务的完成进度.虽然规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式。允许内容：流式元素|\n||`<meter>`|代表滑动条。| `<meter>`元素用来显示已知范围的标量值或者分数值。允许内容：短语元素，但不允许有<meter>元素作为其子元素。|\n|交互元素|`<details>`|代表一个用户可以(点击)获取额外信息或控件的小部件。|`<details>` 元素被用作发现小部件，用户可以从其中检索附加信息。允许内容：`<summary>`后紧跟流式元素|\n||`<summary>`|代表 `<details>` 元素的综述或标题。|<summary> 元素 用作 一个`<details>`元素的一个内容的摘要，标题或图例。如果 `<summary>` 元素在浏览器内不能被正确解析和渲染,，则会展示`<details>`标签内的其他内容。|\n||`<menuitem>`|代表一个用户可以点击的菜单项。|用户可以通过HTML的 `<menuitem>` 标签生成一个弹出式菜单。这包括上下文菜单，以及按钮可能附带的菜单。这个标签可以被显式定义，带有文本标签和可选图标来描述其外观，或者作为一个间接命令，其行为由一个单独的元素定义。命令还可以选择包含复选框或分组共享单选按钮。（`<input type=\"checkbox\">` 和 `<input type=\"radio\">`.)|\n||`<menu>`|代表菜单。|HTML <menu> 元素 呈现了一组用户可执行或激活的命令。这既包含了可能出现在屏幕顶端的列表菜单，也包含了那些隐藏在按钮之下、当点击按钮后显示出来的文本菜单。使用说明:  `<menu>` 和 `<ul>` 元素都呈现了无序列表元素。最主要的区别是 `<ul>` 主要是为了展示选项，而 `<menu>` 则是为了交互。允许内容：如果元素位于列表菜单内：流式元素；或者零个或多个活动的 `<li>`, `<script>`和`<template>`二选一。如果元素位于右键菜单（上下文菜单）：零个或多个事件，任何顺序中，`<menu>`(仅上下文菜单) `<menuitem>`、`<hr>`、`<script>`、`<template>`。|\n\n---\n\n### II.元素内容类型\n\n每一个HTML元素都必须遵循定义了它可以包含哪一类内容的规则。 这些规则被归类为几个常见的元素内容模型（content model）。每个HTML元素都属于0个、1 个或多个内容模型，每个模型都有一些规则使得元素中的内容必须遵循一个HTML规范文档( HTML-conformant document)。\n\n以下是三种类型的内容分类：\n\n主内容类，描述了很多元素共享的内容规范；\n表单相关的内容类，描述了表单相关元素共有的内容规范；\n特殊内容类，描述了仅仅在某些特殊元素上才需要遵守的内容规范，通常这些元素都有特殊的上下文关系。\n\n#### i.元数据内容（Metadata content）\n此类元素 修改文档其余部分的陈述或者行为，建立与其他文档的链接，或者传达其他外带信息。\n属于这一类的元素有：`<base>, <command>, <link>, <meta>, <noscript>, <script>, <style> and <title>.`\n#### ii.流式元素（Flow content）\n此类元素通常包含 文本或植入的内容。此类元素有：` <a>, <abbr>, <address>, <article>, <aside>, <audio>, <b>,<bdo>, <bdi>, <blockquote>, <br>, <button>, <canvas>, <cite>, <code>, <command>, <data>, <datalist>, <del>, <details>, <dfn>, <div>, <dl>, <em>, <embed>, <fieldset>, <figure>, <footer>, <form>, <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <header>, <hgroup>, <hr>, <i>, <iframe>, <img>, <input>, <ins>, <kbd>, <keygen>, <label>, <main>, <map>, <mark>, <math>, <menu>, <meter>, <nav>, <noscript>, <object>, <ol>, <output>, <p>, <pre>, <progress>, <q>, <ruby>, <s>, <samp>, <script>, <section>, <select>, <small>, <span>, <strong>, <sub>, <sup>, <svg>, <table>, <template>, <textarea>, <time>, <ul>, <var>, <video>, <wbr>` 以及 Text.\n\n属于此类的少数其他元素（仅限于某种特殊情形，这些元素才会属于此类）：\n`<area>`, 仅限于它作为<map>的子节点的情形\n`<link>`, 仅限于itemprop属性存在的情形\n`<meta>`, 仅限于itemprop属性存在的情形\n`<style>`, 仅限于 scoped属性存在的情形\n#### iii.章节元素（Sectioning content）\n隶属于分节内容模型的元素 在当前的大纲中创建一个分节，此分节将定义`<header>`元素、`<footer> `元素和标题元素（heading content）的范围。\n属于此类的元素有： `<article>, <aside>, <nav> and <section>`. \n#### iv.标题元素（Heading content）\n标题内容 定义了分节的标题，而这个分节可能由一个明确的分节内容元素直接标记，也可能由标题本身隐式地定义。\n属于此分类的元素有： `<h1>, <h2>, <h3>, <h4>, <h5>, <h6>` and `<hgroup>`.\n#### v.短语元素（Phrasing content）\n短语元素（Phrasing content） 规定文本和它包含的标记。 一些Phrasing content就构成了段落.\n属于此类的元素有： `<abbr>, <audio>, <b>, <bdo>, <br>, <button>, <canvas>, <cite>, <code>, <command>, <datalist>, <dfn>, <em>, <embed>, <i>, <iframe>, <img>, <input>, <kbd>, <keygen>, <label>, <mark>, <math>, <meter>, <noscript>, <object>, <output>, <progress>, <q>, <ruby>, <samp>, <script>, <select>, <small>, <span>, <strong>, <sub>, <sup>, <svg>, <textarea>, <time>, <var>, <video>, <wbr>` 和 plain text (仅当所包含的内容不完全为空字符的时候).\n一些其他的元素也属于这个分类，但是只有当如下特殊情况时才会实现:\n`<a>`, 当它仅包含 phrasing content 时\n`<area>`, 当它为`<map>` 元素的子元素时\n`<del>`, 当它仅包含 phrasing content 时\n`<ins>`, 当它仅包含 phrasing content 时\n`<link>`, 如果itemprop属性存在的情形\n`<map>`, 当它仅包含 phrasing content 时\n`<meta>`,如果itemprop属性存在的情形\n#### vi.嵌入元素（Embedded content）\nEmbedded content输入另一个资源或者将来自另一种标记语言或命名空间的内容插入到文档中。\n属于此类的元素有：`<audio>, <canvas>, <embed>, <iframe>, <img>, <math>, <object>, <svg>, <video>`.\n#### vii.交互元素（Interactive content）\n交互式内容包含为用户交互而特别设计的元素。 \n属于此类的元素有：`<a>，<button>，<details>，<embed>，<iframe>，<keygen>，<label>，<select>` 和 `<textarea>`。\n仅在特殊情形下才会属于此类的元素有:\n`<audio>`, 若controls属性存在\n`<img>`, 若usemap属性存在\n`<input>`, 若type属性不处于隐藏（hidden）状态\n`<menu>`, 若type属性处于工具栏（toolbar）状态\n`<object>`, 若usemap属性存在\n`<video>`, 若controls属性存在\n#### viii.表单相关内容（Form-associated content）\n表单相关的内容 包含 拥有表单父节点（exposed by a form attribute）的元素，一个表单父节点可以是`<form>`元素，也可以是其id在表单属性中被指定了的元素。（Form-associated content comprises elements that have a form owner, exposed by a form attribute. A form owner is either the containing `<form>` element or the element whose id is specified in the form attribute.）\n`<button>`\n`<fieldset>`\n`<input>`\n`<keygen>`\n`<label>`\n`<meter>`\n`<object>`\n`<output>`\n`<progress>`\n`<select>`\n`<textarea>`\n 此类包含了几个子类：\n**可列举的元素（listed）**\n在 form.elements 和 fieldset.elements IDL collections中列举出的元素. 包括 `<button>，<fieldset>，<input>，<keygen>，<object>，<output>，<select>` 和 `<textarea>`。\n**可标签的元素（labelable）**\n和 `<label>` 相关联的元素。包括 `<button>，<input>，<keygen>，<meter>，<output>，<progress>，<select>` 和 `<textarea>`。\n**可提交的元素（submittable）**\n包括当表单提交时可以用来组成表单数据的元素。 包括 `<button>，<input>，<keygen>，<object>，<select>` 和 `<textarea>`.\n**可重置的元素（resettable）**\n当表单重置时会被重置的元素。包括 `<input>，<keygen>，<output>，<select>` 和 `<textarea>`.\n#### ix.透明内容模型（Transparent content model）\n如果一个元素拥有 transparent content mode， 即使将透明内容更换为子元素，其内容必须由合法的HTML5元素组成。\n例如，`<del>` 和 `<ins>` 是透明的：\n`<p>We hold these truths to be <del><em>sacred &amp; undeniable</em></del> <ins>self-evident</ins>.</p>`\n如果这两个元素被移除，这个程序段依然是合法的。\n`<p>We hold these truths to be <em>sacred &amp; undeniable</em> self-evident.</p>`\n\n### III. 空元素\n**一个空元素（empty element）**可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。\nHTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 `<audio>` 元素嵌套在一个 `<hr>` 元素里。\n在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， `<input type=\"text\"></input>` 的闭标签是无效的 HTML。\n在 HTML 中有以下这些空元素：\n`<area>`\n`<base>`\n`<br>`\n`<col>`\n`<colgroup>` when the span is present\n`<command>`\n`<embed>`\n`<hr>`\n`<img>`\n`<input>`\n`<keygen>`\n`<link>`\n`<meta>`\n`<param>`\n`<source>`\n`<track>`\n`<wbr>`\n**在极少数情况下，空元素被错误地称为“无效元素”(void elements)。**\n<font color=gray>有始无终的诸位，不加闭标签</font>\n\n### IV.可替换元素\nCSS 里，可替换元素（replaced element）的展现不是由CSS来控制的。这些元素是一类 外观渲染独立于CSS的 外部对象。 典型的可替换元素有 `<img>`、 `<object>`、 `<video>` 和 表单元素，如`<textarea>`、 `<input>` 。 某些元素只在一些特殊情况下表现为可替换元素，例如 `<audio>` 和 `<canvas>` 。 通过 CSS content 属性来插入的对象 被称作 匿名可替换元素（anonymous replaced elements）。\n\n**自己决定自己宽高的元素**\n\nCSS在某些情况下会对可替换元素做特殊处理，比如计算外边距和一些auto值。\n\n需要注意的是，一部分（并非全部）可替换元素，本身具有尺寸和基线（baseline），会被像vertical-align之类的一些 CSS 属性用到。\n\n### V.标签的属性\n**HTML标签没有块级元素和内联元素的区别，仅仅仅仅仅仅在CSS里有这种区别**\n`<div>`是块级元素？？？naive！\n`<style>\n  div{\n    display: inline;\n }\n</style>`\n你曾经是个块级元素(默认)，但看看你现在的样子。\n<br>\n**HTML只做一件事情：定义他是什么，而他长什么样子和HTML没关系。**~~这种问题请交给CSS~~","source":"_posts/入门-HTML.md","raw":"---\ntitle: 入门-HTML\ndate: 2018-03-22 16:13:21\ntags:\n---\n## 1.什么是HTML\n\n### I. HTML\n是超文本标记语言（**H**yper**T**ext**M**arkup **L**anguage，简称：**HTML**）是一种用于创建网页的标准标记语言。\n### II. HTML版本(W3C组织制定规范)：\n  i. HTML 4.01\n  ii.XHTML\n  iii. HTML 5\n  iv. HTML 5.1\n### III. 规范文档(Specification)\n  i. 由W3C写文档（Sir Timothy John Berners-Lee）\n  ii. W3C根据浏览器的实际情况总结文档，并不是凭空想象。\n### IV. DOCTYPE\n  i. 用来选择文档类型\n  ii. DOCTYPE\n  \n  |版本|DOCTYPE|\n  |:---:|:---:|\n  |HTML 5及以上|<!DOCTYPE HTML>|\n  |HTML 4.01 Strict|<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\"http://www.w3.org/TR/html4/strict.dtd\"|\n   |HTML 4.01 Transitional|<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"\"http://www.w3.org/TR/html4/loose.dtd\">|\n   |HTML 4.01 Frameset|<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"\"http://www.w3.org/TR/html4/frameset.dtd\">|\n   |XHTML 1.0 Strict|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">|\n   |XHTML 1.0 Transitional|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">|\n   |XHTML 1.0 Frameset|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">|\n   |XHTML 1.1 DTD|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">|\n   |XHTML Basic 1.1 (quick reference)|<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\"\"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">|\n   如果不写，就是个GG\n   \n## 2.W3C\nI. 万维网联盟（World Wide Web Consortium，W3C），又称W3C理事会，是万维网的主要国际标准组织。李爵士创立。\nII. 该组织试图通过W3C制定的新标准来促进业界成员间的兼容性和协议。不兼容的HTML版本由不同的供应商提供，导致网页显示方式不一致。联盟试图让所有的供应商实施一套由联盟选择的核心原则和组件。\nIII. 总结一下，制定规范的组织。\n\n## 3.MDN\nI. MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网路技术开发文档的免费网站。\nII. 就是查文档的。\n\n## 4.HTML标签\n### I.标签\n|类型|元素|描述|备注|\n|:---:|:---:|:---:|:---:|\n|根元素|`<html>`|代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。|包含全局属性|\n|文档元数据|`<head>`|代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。|该元素包含全局属性。可用于`<head>`元素内的元素有: `<title>, <base>, <link>, <style>, <meta>, <script>, <noscript>, <command>`|\n||`<title>`|定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。|仅拥有全局属性，允许内容为非空字符或特殊字符（inter-element whitespace）的文本。\t一个 `<head>` 元素只能包含一个 `<title>`元素|\n||`<base>`|定义页面上相对 URL 的基准 URL。|允许空标签，不可以有结束标签。|\n||`<link>`|用于链接外部的 CSS 到该文档。|这是一个空标签，鉴于他也是空元素，所以也不可有结束标签|\n||`<meta>`|定义其他 HTML 元素无法描述的元数据。|也是个空标签，所以有始不能有终|\n||`<style>`|用于内联 CSS。|内容为匹配type属性指定的语言的样式信息。标签始终都不能省略|\n|脚本|`<script>`|定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。|内容为动态脚本。包含全局属性而且拥有以下类别：`<async><defer> <integrity><src><type><text><crossorigin>`|\n||`<noscript>`|定义当浏览器不支持脚本时显示的替代文字。|仅拥有全局元素|\n||`<template>`|通过 JavaScript 在运行时实例化内容的容器。|是一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用JavaScript进行实例化。，加载页面的同时,解析器确实处理 `<template>`元素的内容，这样做只是确保这些内容是有效的; 然而,元素的内容不会被渲染|\n|章节|`<body>`|代表 HTML 文档的内容。在文档中只能有一个 <body> 元素。|它必须是 `<html>` 元素的直接子元素。|\n||`<section>`|定义文档中的一个章节。|内容中的一个专题组，一般来说会有包含一个标题（heading）。一般通过是否包含一个标题` (<h1>-<h6> element)` 作为子节点 来 辨识每一个`<section>`。允许内容：流式元素|\n||`<nav>`|定义只包含导航链接的章节。|用于描述一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表。允许内容：流式元素|\n||<article>|定义可以独立于内容其余部分的完整独立内容块。|表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。允许元素：流式元素|\n||`<h1>,<h2>,<h3>,<h4>,<h5>,<h6>`|标题元素实现了六层文档标题，`<h1>` 是最大的标题，`<h6>` 是最小的标题。标题元素简要地描述章节的主题。|标题顺序从1到6顺序排列，不要为了改变字体大小跳过顺序使用标题，应该用CSS样式改变字体。允许内容：短语元素|\n||`<header>`|定义页面或章节的头部。它经常包含 logo、页面标题、搜索表单和导航性的目录。|允许内容：流式元素|\n||`<footer>`|定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。|允许内容：流式元素，但是不能包含`<footer>`或者`<header>`。|\n||`<address>`|定义包含联系信息的一个章节。|允许内容：流式元素但是不能是内嵌的`<address>`元素、标题元素、章节元素|\n||`<main>`|定义文档中主要或重要的内容。|允许内容：流式元素|\n|组织内容|`<p>`|定义一个段落。|表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，`<p>`是块级元素。允许元素：短语元素|\n||`<hr>`|代表章节、文章或其他长内容中段落之间的分隔符。|允许内容：无，这是一个空元素。所以有始无终。|\n||`<pre>`|代表其内容已经预先排版过，格式应当保留 。|允许内容：短语元素|\n||`<blockquote>`|代表引用自其他来源的内容。（块级引用）|代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（注 中说明了如何更改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 cite 特性上，若要以文本的形式告知读者引文的出处时，可以通过 `<cite>` 元素。允许内容：流式元素|\n||`<ol>`|定义一个有序列表。|表示多个有序列表项，通常渲染为有带编号的列表。允许内容：一个或多个`<li>`元素。这些`<li>`元素可以再包含嵌套的`<ol>`或`<ul>`元素。|\n||`<ul>`|定义一个无序列表。|代表多项的无序列表，即无数值排序项的集合，且它们在列表中的顺序是没有意义的。通常情况下，无序列表项的头部可以是几种形式，如一个点，一个圆形或方形。头部的风格并不是在页面的HTML描述定义, 但在其相关的CSS 可以用 list-style-type 属性。允许内容：一个或多个`<li>`元素。这些`<li>`元素可以再包含嵌套的`<ol>`或`<ul>`元素。|\n||`<li>`|定义列表中的一个列表项。|用于表示列表里的条目。它必须被包含在一个父元素里：一个有顺序的列表(`<ol>`)，一个无顺序的列表(`<ul>`)，或者一个菜单 (`<menu>`)。在菜单或者无顺序的列表里，列表条目通常用点排列显示。在有顺序的列表里，列表条目通常是在左边有按升序排列计数的显示，例如数字或者字母。元素类型：块级 允许内容：流式内容|\n||`<dl>`|HTML `<dl> `元素 （或 HTML 描述列表元素）是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 。|允许内容：一个或者多个`<dt>`元素。这些`<dt>`元素可以再包含嵌套的`<dd>`元素|\n||`<dt>`|HTML `<dt>` 元素 （或 HTML 术语定义元素）用于在一个定义列表中声明一个术语。该元素仅能作为 `<dl>` 的子元素出现。通常在该元素后面会跟着 `<dd>` 元素， 然而，多个连续出现的 `<dt>` 元素都将由出现在它们后面的第一个 `<dd>` 元素定义。 |允许的内容：流式内容 但是不能包含 `<header>` 元素、`<footer>` 元素或者其他章节、标题内容。|\n||`<dd>`|HTML `<dd>` 元素（HTML 描述元素）用来指明一个描述列表  (`<dl>`) 元素中一个术语的描述。这个元素只能作为描述列表元素的子元素出现，并且必须跟着一个 `<dt>` 元素。|允许的内容：流式元素|\n||`<figure>`|代表一个和文档有关的图例。|`<figure>` 元素代表一段独立的内容, 经常与说明(caption) `<figcaption>` 配合使用, 并且作为一个独立的引用单元。当它属于主体(main flow)时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。允许的内容：flow content中的`<figcaption>` 元素; 或者`<figcaption>` 元素中的flow content ; 或者 flow content.|\n||`<figcaption>`|代表一个图例的说明。|`<figcaption>` 元素 是与其相关联的图片的说明/标题，用?于描述其父节点 `<figure>` 元素里的其他数据。这意味着 <figcaption> 在<figure> 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。允许的内容：流式元素|\n||`<div>`|代表一个通用的容器，没有特殊含义。|`<div>`元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求（使用 class 或 id 特性) 或者对具有相同特性的一组元素进行分组 (比如 lang)，它应该在没有任何其它语义元素可用时才使用 (比如 `<article>` 或 `<nav>`) 。**没有默认样式!!!**允许的内容：流式元素|\n|文字形式|`<a>`|代表一个链接到其他资源的超链接 。|`<a>` 元素  (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。允许内容：透明内容模型、流式元素、短语元素|\n||`<em>`|代表强调的文字。|着重元素 (`<em>`) 标记出需要用户着重阅读的内容， <em> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。通常展现为斜体。允许内容：短语元素|\n||`<strong>`|代表特别重要的文字。|Strong 元素 (`<strong>`)表示文本十分重要，一般用粗体显示。允许内容：短语元素|\n||`<small>`|代表注释 ，如免责声明、版权声明等，对理解文档不重要。|`<small>`元素將使文本的字体变小一号。(例如从大变成中等，从中等变成小，从小变成超小)。在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。允许内容：短语元素|\n||`<s>`|代表不准确或不相关 的内容。|`<s>` 元素 使用删除线来渲染文本。使用 <s> 元素来表示不再相关，或者不再准确的事情。但是当表示文档编辑时，不提倡使用 <s> ；为此，提倡使用 `<del>` 和 `<ins>` 元素。允许的内容：短语元素|\n||`<cite>`|代表作品标题。|HTML引用（Citation）标签 (<cite>) 表示一个作品的引用。它必须包含引用作品的符合简写格式的标题或者URL，它可能是一个根据添加引用元数据的约定的简写形式。允许内容：流式元素、短语元素|\n||`<q>`|代表内联的引用 。|引用标签 (`<q>`)表示一个封闭的并且是短的行内引用的文本. 这个标签是用来引用短的文本，所以请不要引入换行符; 对于长的文本的引用请使用 `<blockquote>` 替代。|\n||`<dfn>`|代表一个术语包含在其最近祖先内容中的定义 。|定义元素 (`<dfn>`) 表示术语的一个定义。`<dfn>` 元素标记了被定义的术语；术语定义应当在 `<p>`, `<section>`或定义列表 (通常是`<dt>`, `<dd>` 对)中给出。被定义术语的值由下列规则确定：如果 `<dfn>` 元素有一个 title 属性，那么该术语的值就是该属性的值。否则，如果它仅包含一个 `<abbr>` 元素，该元素拥有 title 属性，那么该术语的值就是该属性的值。否则，`<dfn>` 元素的文本内容就是该术语的值。|\n||`<abbr>`|代表省略或缩写，其完整内容在 title 属性中。|允许内容：短语元素|\n||`<data>`|关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。|<data> 元素 将一个指定内容和机器可读的翻译联系在一起。但如果内容是与 time 或者 date 相关的，一定要使用 `<time>`。允许内容：短语元素|\n||`<time>`|代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。|time 标签(`<time>`) 用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。此元素意在以机器可读的格式表示日期和时间。 有安排日程表功能的应用可以利用这一点。允许内容：短语元素，但不能包含time元素|\n||`<code>`|\t代表计算机代码 。|<code> 元素呈现一段计算机代码. 默认情况下, 它以浏览器的默认等宽字体显示。允许元素：短语元素|\n||`<var>`|代表代码中的变量 。|<var> 标签表示变量的名称，或者由用户提供的值。允许元素：短语元素|\n||`<samp>`|代表程序或电脑的输出 。|`<samp>` 元素用于标识计算机程序输出，通常使用浏览器默认的 monotype 字体。允许内容：短语元素|\n||`<kbd>`|代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。|键盘输入元素(`<kbd>`) 用于表示用户输入，它将产生一个行内元素，以浏览器的默认monospace字体显示。允许内容：短语元素|\n||`<sub>,<sup>`|分别代表下标 和上标 。|`<sub>` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。`<sup>` 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。允许内容：短语元素。|\n||`<i>`|代表一段不同性质 的文字，如技术术语、外文短语等。|<i> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。允许内容：短语元素|\n||`<b>`|代表一段需要被关注 的文字。|提醒注意（Bring Attention To）元素（`<b>`）用于吸引读者的注意到该元素的内容上（如果没有另加特别强调）。这个元素过去被认为是粗体（Boldface）元素，并且大多数浏览器仍然将文字显示为粗体。尽管如此，你不应将 `<b>` 元素用于显示粗体文字；替代方案是使用 CSS font-weight 属性来创建粗体文字。允许内容：短语元素|\n||`<u>`|代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。|`<u>` 元素使文本在其内容的基线下的一行呈现下划线。在HTML5中, 此元素表示具有未标注的文本跨度，显示渲染，非文本注释，例如将文本标记为中文文本中的专有名称(一个正确的中文标记), 或 将文本标记为拼写错误。允许内容：短语元素|\n||`<mark>`|代表一段需要被高亮的引用的文字。|可以用来显示搜索引擎的关键词，允许的内容：短语元素|\n||`<ruby>`|代表被ruby 注释 标记的文本，如中文汉字和它的拼音。|<ruby> 元素 被用来展示东亚文字注音或字符注释。允许内容：短语元素|\n||`<rt>`|代表ruby 注释 ，如中文拼音。|Ruby 文本 (<rt>) 元素包含字符的发音，字符在 ruby 注解中出现，它用于描述东亚字符的发音。这个元素始终在 <ruby> 元素中使用。允许内容：短语元素|\n||`<rp>`|代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。|<rp> 元素用于为那些不能使用 <ruby> 元素展示 ruby 注解的浏览器，提供随后的圆括号。允许的内容：短语元素|\n||`<bdi>`|代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。|`<bdi>` 元素 (双向隔离元素) 会隔离可能以不同方向进行格式化的外部文本。当不知道是从什么方向嵌入文本，如来自于数据库的文本（有起数据库的文本方向）的时候，该元素是十分有用的。允许内容：短语元素|\n||`<span>`|代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。|`<span>` 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者Id属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。`<span>` 与 `<div>` 元素很相似，但 `<div>` 是一个 块元素 而 `<span>` 则是 行内元素。**没有默认样式没有默认样式！！！**允许内容：短语元素|\n||`<br>`|代表换行。|`<br>` 元素在文本中生成一个换行（回车）符号。此元素在写诗和地址时很有用，这些地方的换行都非常重要。允许内容：无，这是一个空元素|\n||`<wbr>`|代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。|<wbr> 元素  — 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。允许内容：无，这是一个空元素|\n|编辑|`<ins>`|定义增加到文档的内容。|`<ins>` 元素定义已经被插入文档中的文本。允许内容：透明内容模型|\n||`<del>`|定义从文档移除 的内容。|`<del>`标签表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。`<ins>`标签的作用恰恰于此相反：表示文档中添加的内容。这个标签通常（但不一定要）在文字上显示删除线。允许内容：透明内容模型|\n|嵌入内容|`<img>`|代表一张图片 。|允许内容：无 这是一个空元素 有始无终 父元素：接受嵌入式内容的任意元素|\n||`<iframe>`|代表一个内联的框架 。|内联框架元素 `<iframe>` 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。在HTML 4.01中，文档可能包含头部和正文，或头部和框架集，但不能包含正文和框架集。但是，`<iframe>`可以在正常的文档主体中使用。每个浏览上下文都有自己的会话历史记录和活动文档。包含嵌入内容的浏览上下文称为父浏览上下文。顶级浏览上下文（没有父级）通常是浏览器窗口。允许元素：流式元素、短语元素、嵌入元素、。|\n||`<embed>`|代表一个嵌入 的外部资源，如应用程序或交互内容。|`<embed>`元素将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。允许内容：流式元素、短语元素、嵌入元素|\n||`<object>`|代表一个外部资源 ，如图片、HTML 子文档、插件等。|`<object>` 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。允许内容：流式元素、短语元素、嵌入元素|\n||`<param>`|`<param> `元素(或 HTML Parameter 元素) 定义了 `<object>`的参数|允许内容：空元素 有始无终|\n||`<video>`|代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。|`<video>` 元素 用于在HTML或者XHTML文档中嵌入视频内容。允许内容：流式元素，包含任一 src 属性或是一个或多个 `<source>` 元素，其后紧跟流式元素 或 短语元素 ， 不包括`<video>` 或者 `<audio>` 元素。|\n||`<audio>`|代表一段声音 ，或音频流 。|`<audio>` 元素用于在文档中表示音频内容。 `<audio>` 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者`<source>` 元素来进行描述； 浏览器将会选择最合适的一个来使用。对于不支持`<audio>`元素的浏览器，`<audio>`元素也可以作为浏览器不识别的内容加入到文档中。允许内容：如果元素包含 src 属性：零个或多个 `<track>` 元素，其后紧跟不包含 `<audio>` 或者 `<video>`媒体元素的透明内容。或者：零个或多个 `<source>` 元素，其后紧跟零个或多个 `<track>` 元素，其后紧跟不包含 `<audio>` 或者 `<video>`媒体元素的透明内容。|\n||`<source>`|为 `<video>` 或 `<audio>` 这类媒体元素指定媒体源 。|允许内容：一个 `<picture>` 元素, 且在`<img>`元素之前|\n||`<track> `|为 `<video>` 或 `<audio>` 这类媒体元素指定文本轨道（字幕） 。|`<track>` 元素 被当作媒体元素—`<audio>` 和 `<video>`的子元素来使用。它允许指定计时字幕（或者基于事件的数据），例如自动处理字幕。track 给媒体元素添加的数据的类型在 kind 属性中设置，属性值可以是`subtitles`, `captions`, `descriptions`, `chapters` 或 `metadata`。该元素指向当用户请求额外的数据时浏览器公开的包含定时文本的源文件。一个`media` 元素的任意两个 `track` 子元素不能有相同的 `kind`, `srclang`, 和 `label`属性。允许内容：空，这是一个空元素|\n||`<canvas>`|代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。|`<canvas>`元素可被用来通过脚本（通常是JavaScript）绘制图形。比如,它可以被用来绘制图形,制作图片集合,甚至用来实现动画效果。你可以(也应该)在元素标签内写入可提供替代的的代码内容，这些内容将会在在旧的、不支持`<canvas>`元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现。|\n||`<map>`|与 `<area>` 元素共同定义图像映射 区域。|<map> 属性 与 <area> 属性一起使用来定义一个图像映射(一个可点击的链接区域).允许内容：任何透明元素模型|\n||`<area>`|与 <map> 元素共同定义图像映射 区域。|<area> 元素 在图片上定义一个热点区域，可以关联一个超链接。<area>元素仅在<map>元素内部使用。允许内容：空，这是一个空元素 有始无终|\n||`<svg>`|定义一个嵌入式矢量图 。|如果svg不是根元素，svg 元素可以用于在当前文档（比如说，一个HTML文档）内嵌套一个独立的svg片段。这个独立片段拥有独立的视口和坐标系统。允许内容：任意数量、任意排序的下列元素：动画元素；描述性元素；形状元素；结构化元素；渐变元素；`<a>, <altGlyphDef>, <clipPath>, <color-profile>, <cursor>, <filter>, <font>, <font-face>, <foreignObject>, <image>, <marker>, <mask>, <pattern>, <script>, <style>, <switch>, <text>, <view>`|\n||`<math>`|定义一段数学公式 。|MathML的顶级元素是`<math>`。所有有效的MathML实例必须被包括在 `<math>` 标记中。另外不可以在一个 `<math>` 元素中嵌套第二个` <math>` 元素，但是 `<math>` 元素中可以有任意多的子元素 。|\n|表格|`<table>`|定义多维数据 。|在 CSS 创建之前， HTML `<table>` 元素常常被用于布局页面。 这种用法在 HTML 4之后不被推荐使用，并且 `<table>`元素 不应该 被用于此目的。允许内容：按照这个顺序：一个可选的 `<caption>` 元素；零个或多个的 `<colgroup>` 元素；一个可选的 `<thead>` 元素；一个可选的 `<tfoot>` 元素（tfoot元素出现在tbody或tr元素前后都可以。在HTML4中，它只能出现在这些元素之前）；零个或多个 `<tbody>` 元素；一个或多个 `<tr>` 元素；|\n||`<caption>`|代表表格的标题。|`<caption>` 元素 (or HTML 表格标题元素) 展示一个表格的标题， 它常常作为 `<table>` 的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被CSS样式化，所以，它同样可以出现在任何一个一个相对于表格的做任意位置。允许内容：流式元素|\n||`<colgroup>`|代表表格中一组单列或多列。|表格列组（Column Group `<colgroup>`） 标签用来定义表中的一组列表。若`span`属性为`present`: 那它就是一个空属性。如果属性不是`present`内容为：零或多个`<col>`属性|\n||`<col>`|代表表格中的列。|`<col>` 元素 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于<colgroup>元素内。允许内容：这是一个空元素有始无终|\n||`<tbody>`|代表表格中一块具体数据 （表格主体）。|允许内容：零或多个`<tr>`元素|\n||`<thead>`|代表表格中一块列标签（表头）。|允许内容：零或多个`<tr>`元素|\n||`<tfoot>`|代表表格中一块列摘要（表尾）|允许内容：零或多个`<tr>`元素|\n||`<tr>`|代表表格中的行 。|允许内容：零或多个`<td>`或`<th>`元素|\n||`<td>`|代表表格中的单元格 。|允许内容：流式元素|\n||`<th>`|代表表格中的头部单元格 。|允许内容：流内容（除header、footer、sectioning content或heading content的继承。）|\n|表单|`<form>`|代表一个表单 ，由控件组成。|<form> 元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。可以用 `:valid `和`:invalid` CSS 伪类 来给一个元素指定样式。允许内容：流式元素|\n||`<fieldset>`|代表控件组 。|`fieldset`元素通常用来对表单中的控制元素进行分组(也包括 label 元素)允许内容：一个可选的` <legend> `元素，后面跟流式元素|\n||`<legend>`|代表 `<fieldset>` 控件组的标题。|`<legend>`元素（也称为HTML的域说明元素（or HMTL Legend Field Element））代表一个用于表示它的父元素`<fieldset>`的内容的标题。允许内容：短语元素|\n||`<label>`|代表表单控件的标题。## II.元素|它通常关联一个控件，或者是将控件放置在label元素内，或者是用作其属性。这样的控制称作label元素的labeled control。允许内容：没有后代`label`元素的短语元素。除了标记控制之外，不允许使用其他可标记的元素。|\n||`<button>\t`|代表按钮。|`<button>` 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。 默认情况下，HTML按钮的显示样式接近于 user agent 所在的宿主系统平台（用户操作系统）的按钮， 但你可以使用 CSS 来改变按钮的样貌。允许内容：短语元素|\n||`<select>`|代表下拉框。|`<select>` 元素是一种表单控件，可创建选项菜单。菜单内的选项为`<option>` , 可以由 `<optgroup>` 元素分组。选项可以被用户预先选择。允许内容：0个或多个 `<option>` 或者 `<optgroup>` 元素|\n||`<datalist>`|代表提供给其他控件的一组预定义选项 。|Datalist 元素 (`<datalist>`) 包含了一组<option>元素,这些元素表示其它表单控件可选值。允许内容：要么短语元素 要么 0个或多个 `<option>`元素.|\n||`<optgroup>`|代表一个选项分组。|在一个web表单中, HTML元素` <optgroup> `会创建包含在一个 `<select>` 元素中的一组选项。允许内容：0或多个 `<option>` 元素|\n||`<option>`|代表一个 `<select>` 元素或 `<datalist>` 元素中的一个选项| HTML元素 `<option>`  用于定义在`<select>`,  `<optgroup>` 或`<datalist>` 元素中包含的项。`<option>` 可以在弹出窗口和 html 文档中的其他项目列表中表示菜单项。允许内容：带有最终转义字符（例如 `&eacute;`）的文本|\n||`<textarea>`|代表多行文本框 。|`<textarea>` 元素表示一个多行纯文本编辑控件。 允许内容：文字|\n||`<keygen>`|代表一个密钥对生成器。|尽量不要使用了，该特性已从Web标准中删除。|\n||`<output>`|代表计算值。|`<output>` 标签表示计算或用户操作的结果。允许内容：短语元素|\n||`<progress>`|代表进度条 。|progress (`<progress>`) 元素用来显示一项任务的完成进度.虽然规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式。允许内容：流式元素|\n||`<meter>`|代表滑动条。| `<meter>`元素用来显示已知范围的标量值或者分数值。允许内容：短语元素，但不允许有<meter>元素作为其子元素。|\n|交互元素|`<details>`|代表一个用户可以(点击)获取额外信息或控件的小部件。|`<details>` 元素被用作发现小部件，用户可以从其中检索附加信息。允许内容：`<summary>`后紧跟流式元素|\n||`<summary>`|代表 `<details>` 元素的综述或标题。|<summary> 元素 用作 一个`<details>`元素的一个内容的摘要，标题或图例。如果 `<summary>` 元素在浏览器内不能被正确解析和渲染,，则会展示`<details>`标签内的其他内容。|\n||`<menuitem>`|代表一个用户可以点击的菜单项。|用户可以通过HTML的 `<menuitem>` 标签生成一个弹出式菜单。这包括上下文菜单，以及按钮可能附带的菜单。这个标签可以被显式定义，带有文本标签和可选图标来描述其外观，或者作为一个间接命令，其行为由一个单独的元素定义。命令还可以选择包含复选框或分组共享单选按钮。（`<input type=\"checkbox\">` 和 `<input type=\"radio\">`.)|\n||`<menu>`|代表菜单。|HTML <menu> 元素 呈现了一组用户可执行或激活的命令。这既包含了可能出现在屏幕顶端的列表菜单，也包含了那些隐藏在按钮之下、当点击按钮后显示出来的文本菜单。使用说明:  `<menu>` 和 `<ul>` 元素都呈现了无序列表元素。最主要的区别是 `<ul>` 主要是为了展示选项，而 `<menu>` 则是为了交互。允许内容：如果元素位于列表菜单内：流式元素；或者零个或多个活动的 `<li>`, `<script>`和`<template>`二选一。如果元素位于右键菜单（上下文菜单）：零个或多个事件，任何顺序中，`<menu>`(仅上下文菜单) `<menuitem>`、`<hr>`、`<script>`、`<template>`。|\n\n---\n\n### II.元素内容类型\n\n每一个HTML元素都必须遵循定义了它可以包含哪一类内容的规则。 这些规则被归类为几个常见的元素内容模型（content model）。每个HTML元素都属于0个、1 个或多个内容模型，每个模型都有一些规则使得元素中的内容必须遵循一个HTML规范文档( HTML-conformant document)。\n\n以下是三种类型的内容分类：\n\n主内容类，描述了很多元素共享的内容规范；\n表单相关的内容类，描述了表单相关元素共有的内容规范；\n特殊内容类，描述了仅仅在某些特殊元素上才需要遵守的内容规范，通常这些元素都有特殊的上下文关系。\n\n#### i.元数据内容（Metadata content）\n此类元素 修改文档其余部分的陈述或者行为，建立与其他文档的链接，或者传达其他外带信息。\n属于这一类的元素有：`<base>, <command>, <link>, <meta>, <noscript>, <script>, <style> and <title>.`\n#### ii.流式元素（Flow content）\n此类元素通常包含 文本或植入的内容。此类元素有：` <a>, <abbr>, <address>, <article>, <aside>, <audio>, <b>,<bdo>, <bdi>, <blockquote>, <br>, <button>, <canvas>, <cite>, <code>, <command>, <data>, <datalist>, <del>, <details>, <dfn>, <div>, <dl>, <em>, <embed>, <fieldset>, <figure>, <footer>, <form>, <h1>, <h2>, <h3>, <h4>, <h5>, <h6>, <header>, <hgroup>, <hr>, <i>, <iframe>, <img>, <input>, <ins>, <kbd>, <keygen>, <label>, <main>, <map>, <mark>, <math>, <menu>, <meter>, <nav>, <noscript>, <object>, <ol>, <output>, <p>, <pre>, <progress>, <q>, <ruby>, <s>, <samp>, <script>, <section>, <select>, <small>, <span>, <strong>, <sub>, <sup>, <svg>, <table>, <template>, <textarea>, <time>, <ul>, <var>, <video>, <wbr>` 以及 Text.\n\n属于此类的少数其他元素（仅限于某种特殊情形，这些元素才会属于此类）：\n`<area>`, 仅限于它作为<map>的子节点的情形\n`<link>`, 仅限于itemprop属性存在的情形\n`<meta>`, 仅限于itemprop属性存在的情形\n`<style>`, 仅限于 scoped属性存在的情形\n#### iii.章节元素（Sectioning content）\n隶属于分节内容模型的元素 在当前的大纲中创建一个分节，此分节将定义`<header>`元素、`<footer> `元素和标题元素（heading content）的范围。\n属于此类的元素有： `<article>, <aside>, <nav> and <section>`. \n#### iv.标题元素（Heading content）\n标题内容 定义了分节的标题，而这个分节可能由一个明确的分节内容元素直接标记，也可能由标题本身隐式地定义。\n属于此分类的元素有： `<h1>, <h2>, <h3>, <h4>, <h5>, <h6>` and `<hgroup>`.\n#### v.短语元素（Phrasing content）\n短语元素（Phrasing content） 规定文本和它包含的标记。 一些Phrasing content就构成了段落.\n属于此类的元素有： `<abbr>, <audio>, <b>, <bdo>, <br>, <button>, <canvas>, <cite>, <code>, <command>, <datalist>, <dfn>, <em>, <embed>, <i>, <iframe>, <img>, <input>, <kbd>, <keygen>, <label>, <mark>, <math>, <meter>, <noscript>, <object>, <output>, <progress>, <q>, <ruby>, <samp>, <script>, <select>, <small>, <span>, <strong>, <sub>, <sup>, <svg>, <textarea>, <time>, <var>, <video>, <wbr>` 和 plain text (仅当所包含的内容不完全为空字符的时候).\n一些其他的元素也属于这个分类，但是只有当如下特殊情况时才会实现:\n`<a>`, 当它仅包含 phrasing content 时\n`<area>`, 当它为`<map>` 元素的子元素时\n`<del>`, 当它仅包含 phrasing content 时\n`<ins>`, 当它仅包含 phrasing content 时\n`<link>`, 如果itemprop属性存在的情形\n`<map>`, 当它仅包含 phrasing content 时\n`<meta>`,如果itemprop属性存在的情形\n#### vi.嵌入元素（Embedded content）\nEmbedded content输入另一个资源或者将来自另一种标记语言或命名空间的内容插入到文档中。\n属于此类的元素有：`<audio>, <canvas>, <embed>, <iframe>, <img>, <math>, <object>, <svg>, <video>`.\n#### vii.交互元素（Interactive content）\n交互式内容包含为用户交互而特别设计的元素。 \n属于此类的元素有：`<a>，<button>，<details>，<embed>，<iframe>，<keygen>，<label>，<select>` 和 `<textarea>`。\n仅在特殊情形下才会属于此类的元素有:\n`<audio>`, 若controls属性存在\n`<img>`, 若usemap属性存在\n`<input>`, 若type属性不处于隐藏（hidden）状态\n`<menu>`, 若type属性处于工具栏（toolbar）状态\n`<object>`, 若usemap属性存在\n`<video>`, 若controls属性存在\n#### viii.表单相关内容（Form-associated content）\n表单相关的内容 包含 拥有表单父节点（exposed by a form attribute）的元素，一个表单父节点可以是`<form>`元素，也可以是其id在表单属性中被指定了的元素。（Form-associated content comprises elements that have a form owner, exposed by a form attribute. A form owner is either the containing `<form>` element or the element whose id is specified in the form attribute.）\n`<button>`\n`<fieldset>`\n`<input>`\n`<keygen>`\n`<label>`\n`<meter>`\n`<object>`\n`<output>`\n`<progress>`\n`<select>`\n`<textarea>`\n 此类包含了几个子类：\n**可列举的元素（listed）**\n在 form.elements 和 fieldset.elements IDL collections中列举出的元素. 包括 `<button>，<fieldset>，<input>，<keygen>，<object>，<output>，<select>` 和 `<textarea>`。\n**可标签的元素（labelable）**\n和 `<label>` 相关联的元素。包括 `<button>，<input>，<keygen>，<meter>，<output>，<progress>，<select>` 和 `<textarea>`。\n**可提交的元素（submittable）**\n包括当表单提交时可以用来组成表单数据的元素。 包括 `<button>，<input>，<keygen>，<object>，<select>` 和 `<textarea>`.\n**可重置的元素（resettable）**\n当表单重置时会被重置的元素。包括 `<input>，<keygen>，<output>，<select>` 和 `<textarea>`.\n#### ix.透明内容模型（Transparent content model）\n如果一个元素拥有 transparent content mode， 即使将透明内容更换为子元素，其内容必须由合法的HTML5元素组成。\n例如，`<del>` 和 `<ins>` 是透明的：\n`<p>We hold these truths to be <del><em>sacred &amp; undeniable</em></del> <ins>self-evident</ins>.</p>`\n如果这两个元素被移除，这个程序段依然是合法的。\n`<p>We hold these truths to be <em>sacred &amp; undeniable</em> self-evident.</p>`\n\n### III. 空元素\n**一个空元素（empty element）**可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。\nHTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 `<audio>` 元素嵌套在一个 `<hr>` 元素里。\n在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， `<input type=\"text\"></input>` 的闭标签是无效的 HTML。\n在 HTML 中有以下这些空元素：\n`<area>`\n`<base>`\n`<br>`\n`<col>`\n`<colgroup>` when the span is present\n`<command>`\n`<embed>`\n`<hr>`\n`<img>`\n`<input>`\n`<keygen>`\n`<link>`\n`<meta>`\n`<param>`\n`<source>`\n`<track>`\n`<wbr>`\n**在极少数情况下，空元素被错误地称为“无效元素”(void elements)。**\n<font color=gray>有始无终的诸位，不加闭标签</font>\n\n### IV.可替换元素\nCSS 里，可替换元素（replaced element）的展现不是由CSS来控制的。这些元素是一类 外观渲染独立于CSS的 外部对象。 典型的可替换元素有 `<img>`、 `<object>`、 `<video>` 和 表单元素，如`<textarea>`、 `<input>` 。 某些元素只在一些特殊情况下表现为可替换元素，例如 `<audio>` 和 `<canvas>` 。 通过 CSS content 属性来插入的对象 被称作 匿名可替换元素（anonymous replaced elements）。\n\n**自己决定自己宽高的元素**\n\nCSS在某些情况下会对可替换元素做特殊处理，比如计算外边距和一些auto值。\n\n需要注意的是，一部分（并非全部）可替换元素，本身具有尺寸和基线（baseline），会被像vertical-align之类的一些 CSS 属性用到。\n\n### V.标签的属性\n**HTML标签没有块级元素和内联元素的区别，仅仅仅仅仅仅在CSS里有这种区别**\n`<div>`是块级元素？？？naive！\n`<style>\n  div{\n    display: inline;\n }\n</style>`\n你曾经是个块级元素(默认)，但看看你现在的样子。\n<br>\n**HTML只做一件事情：定义他是什么，而他长什么样子和HTML没关系。**~~这种问题请交给CSS~~","slug":"入门-HTML","published":1,"updated":"2018-03-23T11:37:51.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3v000rt2g3thotxzt1","content":"<h2 id=\"1-什么是HTML\"><a href=\"#1-什么是HTML\" class=\"headerlink\" title=\"1.什么是HTML\"></a>1.什么是HTML</h2><h3 id=\"I-HTML\"><a href=\"#I-HTML\" class=\"headerlink\" title=\"I. HTML\"></a>I. HTML</h3><p>是超文本标记语言（<strong>H</strong>yper<strong>T</strong>ext<strong>M</strong>arkup <strong>L</strong>anguage，简称：<strong>HTML</strong>）是一种用于创建网页的标准标记语言。</p>\n<h3 id=\"II-HTML版本-W3C组织制定规范-：\"><a href=\"#II-HTML版本-W3C组织制定规范-：\" class=\"headerlink\" title=\"II. HTML版本(W3C组织制定规范)：\"></a>II. HTML版本(W3C组织制定规范)：</h3><p>  i. HTML 4.01<br>  ii.XHTML<br>  iii. HTML 5<br>  iv. HTML 5.1</p>\n<h3 id=\"III-规范文档-Specification\"><a href=\"#III-规范文档-Specification\" class=\"headerlink\" title=\"III. 规范文档(Specification)\"></a>III. 规范文档(Specification)</h3><p>  i. 由W3C写文档（Sir Timothy John Berners-Lee）<br>  ii. W3C根据浏览器的实际情况总结文档，并不是凭空想象。</p>\n<h3 id=\"IV-DOCTYPE\"><a href=\"#IV-DOCTYPE\" class=\"headerlink\" title=\"IV. DOCTYPE\"></a>IV. DOCTYPE</h3><p>  i. 用来选择文档类型<br>  ii. DOCTYPE</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本</th>\n<th style=\"text-align:center\">DOCTYPE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">HTML 5及以上</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML&gt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML 4.01 Strict</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN””<a href=\"http://www.w3.org/TR/html4/strict.dtd&quot;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/strict.dtd&quot;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML 4.01 Transitional</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN””<a href=\"http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML 4.01 Frameset</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Frameset//EN””<a href=\"http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.0 Strict</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN””<a href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.0 Transitional</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN””<a href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.0 Frameset</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN””<a href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.1 DTD</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.1//EN” “<a href=\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML Basic 1.1 (quick reference)</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML Basic 1.1//EN””<a href=\"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd&quot;&gt;</a></td>\n</tr>\n</tbody>\n</table>\n<p>   如果不写，就是个GG</p>\n<h2 id=\"2-W3C\"><a href=\"#2-W3C\" class=\"headerlink\" title=\"2.W3C\"></a>2.W3C</h2><p>I. 万维网联盟（World Wide Web Consortium，W3C），又称W3C理事会，是万维网的主要国际标准组织。李爵士创立。<br>II. 该组织试图通过W3C制定的新标准来促进业界成员间的兼容性和协议。不兼容的HTML版本由不同的供应商提供，导致网页显示方式不一致。联盟试图让所有的供应商实施一套由联盟选择的核心原则和组件。<br>III. 总结一下，制定规范的组织。</p>\n<h2 id=\"3-MDN\"><a href=\"#3-MDN\" class=\"headerlink\" title=\"3.MDN\"></a>3.MDN</h2><p>I. MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网路技术开发文档的免费网站。<br>II. 就是查文档的。</p>\n<h2 id=\"4-HTML标签\"><a href=\"#4-HTML标签\" class=\"headerlink\" title=\"4.HTML标签\"></a>4.HTML标签</h2><h3 id=\"I-标签\"><a href=\"#I-标签\" class=\"headerlink\" title=\"I.标签\"></a>I.标签</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">元素</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">根元素</td>\n<td style=\"text-align:center\"><code>&lt;html&gt;</code></td>\n<td style=\"text-align:center\">代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。</td>\n<td style=\"text-align:center\">包含全局属性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">文档元数据</td>\n<td style=\"text-align:center\"><code>&lt;head&gt;</code></td>\n<td style=\"text-align:center\">代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。</td>\n<td style=\"text-align:center\">该元素包含全局属性。可用于<code>&lt;head&gt;</code>元素内的元素有: <code>&lt;title&gt;, &lt;base&gt;, &lt;link&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;noscript&gt;, &lt;command&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;title&gt;</code></td>\n<td style=\"text-align:center\">定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。</td>\n<td style=\"text-align:center\">仅拥有全局属性，允许内容为非空字符或特殊字符（inter-element whitespace）的文本。    一个 <code>&lt;head&gt;</code> 元素只能包含一个 <code>&lt;title&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;base&gt;</code></td>\n<td style=\"text-align:center\">定义页面上相对 URL 的基准 URL。</td>\n<td style=\"text-align:center\">允许空标签，不可以有结束标签。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;link&gt;</code></td>\n<td style=\"text-align:center\">用于链接外部的 CSS 到该文档。</td>\n<td style=\"text-align:center\">这是一个空标签，鉴于他也是空元素，所以也不可有结束标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;meta&gt;</code></td>\n<td style=\"text-align:center\">定义其他 HTML 元素无法描述的元数据。</td>\n<td style=\"text-align:center\">也是个空标签，所以有始不能有终</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;style&gt;</code></td>\n<td style=\"text-align:center\">用于内联 CSS。</td>\n<td style=\"text-align:center\">内容为匹配type属性指定的语言的样式信息。标签始终都不能省略</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">脚本</td>\n<td style=\"text-align:center\"><code>&lt;script&gt;</code></td>\n<td style=\"text-align:center\">定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。</td>\n<td style=\"text-align:center\">内容为动态脚本。包含全局属性而且拥有以下类别：<code>&lt;async&gt;&lt;defer&gt; &lt;integrity&gt;&lt;src&gt;&lt;type&gt;&lt;text&gt;&lt;crossorigin&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;noscript&gt;</code></td>\n<td style=\"text-align:center\">定义当浏览器不支持脚本时显示的替代文字。</td>\n<td style=\"text-align:center\">仅拥有全局元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;template&gt;</code></td>\n<td style=\"text-align:center\">通过 JavaScript 在运行时实例化内容的容器。</td>\n<td style=\"text-align:center\">是一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用JavaScript进行实例化。，加载页面的同时,解析器确实处理 <code>&lt;template&gt;</code>元素的内容，这样做只是确保这些内容是有效的; 然而,元素的内容不会被渲染</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">章节</td>\n<td style=\"text-align:center\"><code>&lt;body&gt;</code></td>\n<td style=\"text-align:center\">代表 HTML 文档的内容。在文档中只能有一个 <body> 元素。</body></td>\n<td style=\"text-align:center\">它必须是 <code>&lt;html&gt;</code> 元素的直接子元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;section&gt;</code></td>\n<td style=\"text-align:center\">定义文档中的一个章节。</td>\n<td style=\"text-align:center\">内容中的一个专题组，一般来说会有包含一个标题（heading）。一般通过是否包含一个标题<code>(&lt;h1&gt;-&lt;h6&gt; element)</code> 作为子节点 来 辨识每一个<code>&lt;section&gt;</code>。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;nav&gt;</code></td>\n<td style=\"text-align:center\">定义只包含导航链接的章节。</td>\n<td style=\"text-align:center\">用于描述一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><article></article></td>\n<td style=\"text-align:center\">定义可以独立于内容其余部分的完整独立内容块。</td>\n<td style=\"text-align:center\">表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。允许元素：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;h1&gt;,&lt;h2&gt;,&lt;h3&gt;,&lt;h4&gt;,&lt;h5&gt;,&lt;h6&gt;</code></td>\n<td style=\"text-align:center\">标题元素实现了六层文档标题，<code>&lt;h1&gt;</code> 是最大的标题，<code>&lt;h6&gt;</code> 是最小的标题。标题元素简要地描述章节的主题。</td>\n<td style=\"text-align:center\">标题顺序从1到6顺序排列，不要为了改变字体大小跳过顺序使用标题，应该用CSS样式改变字体。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;header&gt;</code></td>\n<td style=\"text-align:center\">定义页面或章节的头部。它经常包含 logo、页面标题、搜索表单和导航性的目录。</td>\n<td style=\"text-align:center\">允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;footer&gt;</code></td>\n<td style=\"text-align:center\">定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。</td>\n<td style=\"text-align:center\">允许内容：流式元素，但是不能包含<code>&lt;footer&gt;</code>或者<code>&lt;header&gt;</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;address&gt;</code></td>\n<td style=\"text-align:center\">定义包含联系信息的一个章节。</td>\n<td style=\"text-align:center\">允许内容：流式元素但是不能是内嵌的<code>&lt;address&gt;</code>元素、标题元素、章节元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;main&gt;</code></td>\n<td style=\"text-align:center\">定义文档中主要或重要的内容。</td>\n<td style=\"text-align:center\">允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">组织内容</td>\n<td style=\"text-align:center\"><code>&lt;p&gt;</code></td>\n<td style=\"text-align:center\">定义一个段落。</td>\n<td style=\"text-align:center\">表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，<code>&lt;p&gt;</code>是块级元素。允许元素：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;hr&gt;</code></td>\n<td style=\"text-align:center\">代表章节、文章或其他长内容中段落之间的分隔符。</td>\n<td style=\"text-align:center\">允许内容：无，这是一个空元素。所以有始无终。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;pre&gt;</code></td>\n<td style=\"text-align:center\">代表其内容已经预先排版过，格式应当保留 。</td>\n<td style=\"text-align:center\">允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;blockquote&gt;</code></td>\n<td style=\"text-align:center\">代表引用自其他来源的内容。（块级引用）</td>\n<td style=\"text-align:center\">代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（注 中说明了如何更改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 cite 特性上，若要以文本的形式告知读者引文的出处时，可以通过 <code>&lt;cite&gt;</code> 元素。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;ol&gt;</code></td>\n<td style=\"text-align:center\">定义一个有序列表。</td>\n<td style=\"text-align:center\">表示多个有序列表项，通常渲染为有带编号的列表。允许内容：一个或多个<code>&lt;li&gt;</code>元素。这些<code>&lt;li&gt;</code>元素可以再包含嵌套的<code>&lt;ol&gt;</code>或<code>&lt;ul&gt;</code>元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;ul&gt;</code></td>\n<td style=\"text-align:center\">定义一个无序列表。</td>\n<td style=\"text-align:center\">代表多项的无序列表，即无数值排序项的集合，且它们在列表中的顺序是没有意义的。通常情况下，无序列表项的头部可以是几种形式，如一个点，一个圆形或方形。头部的风格并不是在页面的HTML描述定义, 但在其相关的CSS 可以用 list-style-type 属性。允许内容：一个或多个<code>&lt;li&gt;</code>元素。这些<code>&lt;li&gt;</code>元素可以再包含嵌套的<code>&lt;ol&gt;</code>或<code>&lt;ul&gt;</code>元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;li&gt;</code></td>\n<td style=\"text-align:center\">定义列表中的一个列表项。</td>\n<td style=\"text-align:center\">用于表示列表里的条目。它必须被包含在一个父元素里：一个有顺序的列表(<code>&lt;ol&gt;</code>)，一个无顺序的列表(<code>&lt;ul&gt;</code>)，或者一个菜单 (<code>&lt;menu&gt;</code>)。在菜单或者无顺序的列表里，列表条目通常用点排列显示。在有顺序的列表里，列表条目通常是在左边有按升序排列计数的显示，例如数字或者字母。元素类型：块级 允许内容：流式内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dl&gt;</code></td>\n<td style=\"text-align:center\">HTML <code>&lt;dl&gt;</code>元素 （或 HTML 描述列表元素）是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 。</td>\n<td style=\"text-align:center\">允许内容：一个或者多个<code>&lt;dt&gt;</code>元素。这些<code>&lt;dt&gt;</code>元素可以再包含嵌套的<code>&lt;dd&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dt&gt;</code></td>\n<td style=\"text-align:center\">HTML <code>&lt;dt&gt;</code> 元素 （或 HTML 术语定义元素）用于在一个定义列表中声明一个术语。该元素仅能作为 <code>&lt;dl&gt;</code> 的子元素出现。通常在该元素后面会跟着 <code>&lt;dd&gt;</code> 元素， 然而，多个连续出现的 <code>&lt;dt&gt;</code> 元素都将由出现在它们后面的第一个 <code>&lt;dd&gt;</code> 元素定义。</td>\n<td style=\"text-align:center\">允许的内容：流式内容 但是不能包含 <code>&lt;header&gt;</code> 元素、<code>&lt;footer&gt;</code> 元素或者其他章节、标题内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dd&gt;</code></td>\n<td style=\"text-align:center\">HTML <code>&lt;dd&gt;</code> 元素（HTML 描述元素）用来指明一个描述列表  (<code>&lt;dl&gt;</code>) 元素中一个术语的描述。这个元素只能作为描述列表元素的子元素出现，并且必须跟着一个 <code>&lt;dt&gt;</code> 元素。</td>\n<td style=\"text-align:center\">允许的内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;figure&gt;</code></td>\n<td style=\"text-align:center\">代表一个和文档有关的图例。</td>\n<td style=\"text-align:center\"><code>&lt;figure&gt;</code> 元素代表一段独立的内容, 经常与说明(caption) <code>&lt;figcaption&gt;</code> 配合使用, 并且作为一个独立的引用单元。当它属于主体(main flow)时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。允许的内容：flow content中的<code>&lt;figcaption&gt;</code> 元素; 或者<code>&lt;figcaption&gt;</code> 元素中的flow content ; 或者 flow content.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;figcaption&gt;</code></td>\n<td style=\"text-align:center\">代表一个图例的说明。</td>\n<td style=\"text-align:center\"><code>&lt;figcaption&gt;</code> 元素 是与其相关联的图片的说明/标题，用?于描述其父节点 <code>&lt;figure&gt;</code> 元素里的其他数据。这意味着 <figcaption> 在<figure> 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。允许的内容：流式元素</figure></figcaption></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;div&gt;</code></td>\n<td style=\"text-align:center\">代表一个通用的容器，没有特殊含义。</td>\n<td style=\"text-align:center\"><code>&lt;div&gt;</code>元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求（使用 class 或 id 特性) 或者对具有相同特性的一组元素进行分组 (比如 lang)，它应该在没有任何其它语义元素可用时才使用 (比如 <code>&lt;article&gt;</code> 或 <code>&lt;nav&gt;</code>) 。<strong>没有默认样式!!!</strong>允许的内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">文字形式</td>\n<td style=\"text-align:center\"><code>&lt;a&gt;</code></td>\n<td style=\"text-align:center\">代表一个链接到其他资源的超链接 。</td>\n<td style=\"text-align:center\"><code>&lt;a&gt;</code> 元素  (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。允许内容：透明内容模型、流式元素、短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;em&gt;</code></td>\n<td style=\"text-align:center\">代表强调的文字。</td>\n<td style=\"text-align:center\">着重元素 (<code>&lt;em&gt;</code>) 标记出需要用户着重阅读的内容， <em> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。通常展现为斜体。允许内容：短语元素</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;strong&gt;</code></td>\n<td style=\"text-align:center\">代表特别重要的文字。</td>\n<td style=\"text-align:center\">Strong 元素 (<code>&lt;strong&gt;</code>)表示文本十分重要，一般用粗体显示。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;small&gt;</code></td>\n<td style=\"text-align:center\">代表注释 ，如免责声明、版权声明等，对理解文档不重要。</td>\n<td style=\"text-align:center\"><code>&lt;small&gt;</code>元素將使文本的字体变小一号。(例如从大变成中等，从中等变成小，从小变成超小)。在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;s&gt;</code></td>\n<td style=\"text-align:center\">代表不准确或不相关 的内容。</td>\n<td style=\"text-align:center\"><code>&lt;s&gt;</code> 元素 使用删除线来渲染文本。使用 <s> 元素来表示不再相关，或者不再准确的事情。但是当表示文档编辑时，不提倡使用 <s> ；为此，提倡使用 <code>&lt;del&gt;</code> 和 <code>&lt;ins&gt;</code> 元素。允许的内容：短语元素</s></s></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;cite&gt;</code></td>\n<td style=\"text-align:center\">代表作品标题。</td>\n<td style=\"text-align:center\">HTML引用（Citation）标签 (<cite>) 表示一个作品的引用。它必须包含引用作品的符合简写格式的标题或者URL，它可能是一个根据添加引用元数据的约定的简写形式。允许内容：流式元素、短语元素</cite></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;q&gt;</code></td>\n<td style=\"text-align:center\">代表内联的引用 。</td>\n<td style=\"text-align:center\">引用标签 (<code>&lt;q&gt;</code>)表示一个封闭的并且是短的行内引用的文本. 这个标签是用来引用短的文本，所以请不要引入换行符; 对于长的文本的引用请使用 <code>&lt;blockquote&gt;</code> 替代。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dfn&gt;</code></td>\n<td style=\"text-align:center\">代表一个术语包含在其最近祖先内容中的定义 。</td>\n<td style=\"text-align:center\">定义元素 (<code>&lt;dfn&gt;</code>) 表示术语的一个定义。<code>&lt;dfn&gt;</code> 元素标记了被定义的术语；术语定义应当在 <code>&lt;p&gt;</code>, <code>&lt;section&gt;</code>或定义列表 (通常是<code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code> 对)中给出。被定义术语的值由下列规则确定：如果 <code>&lt;dfn&gt;</code> 元素有一个 title 属性，那么该术语的值就是该属性的值。否则，如果它仅包含一个 <code>&lt;abbr&gt;</code> 元素，该元素拥有 title 属性，那么该术语的值就是该属性的值。否则，<code>&lt;dfn&gt;</code> 元素的文本内容就是该术语的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;abbr&gt;</code></td>\n<td style=\"text-align:center\">代表省略或缩写，其完整内容在 title 属性中。</td>\n<td style=\"text-align:center\">允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;data&gt;</code></td>\n<td style=\"text-align:center\">关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。</td>\n<td style=\"text-align:center\"><data> 元素 将一个指定内容和机器可读的翻译联系在一起。但如果内容是与 time 或者 date 相关的，一定要使用 <code>&lt;time&gt;</code>。允许内容：短语元素</data></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;time&gt;</code></td>\n<td style=\"text-align:center\">代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。</td>\n<td style=\"text-align:center\">time 标签(<code>&lt;time&gt;</code>) 用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。此元素意在以机器可读的格式表示日期和时间。 有安排日程表功能的应用可以利用这一点。允许内容：短语元素，但不能包含time元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;code&gt;</code></td>\n<td style=\"text-align:center\">代表计算机代码 。</td>\n<td style=\"text-align:center\"><code> 元素呈现一段计算机代码. 默认情况下, 它以浏览器的默认等宽字体显示。允许元素：短语元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;var&gt;</code></td>\n<td style=\"text-align:center\">代表代码中的变量 。</td>\n<td style=\"text-align:center\"><var> 标签表示变量的名称，或者由用户提供的值。允许元素：短语元素</var></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;samp&gt;</code></td>\n<td style=\"text-align:center\">代表程序或电脑的输出 。</td>\n<td style=\"text-align:center\"><code>&lt;samp&gt;</code> 元素用于标识计算机程序输出，通常使用浏览器默认的 monotype 字体。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;kbd&gt;</code></td>\n<td style=\"text-align:center\">代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。</td>\n<td style=\"text-align:center\">键盘输入元素(<code>&lt;kbd&gt;</code>) 用于表示用户输入，它将产生一个行内元素，以浏览器的默认monospace字体显示。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;sub&gt;,&lt;sup&gt;</code></td>\n<td style=\"text-align:center\">分别代表下标 和上标 。</td>\n<td style=\"text-align:center\"><code>&lt;sub&gt;</code> 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。<code>&lt;sup&gt;</code> 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。允许内容：短语元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;i&gt;</code></td>\n<td style=\"text-align:center\">代表一段不同性质 的文字，如技术术语、外文短语等。</td>\n<td style=\"text-align:center\"><i> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。允许内容：短语元素</i></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;b&gt;</code></td>\n<td style=\"text-align:center\">代表一段需要被关注 的文字。</td>\n<td style=\"text-align:center\">提醒注意（Bring Attention To）元素（<code>&lt;b&gt;</code>）用于吸引读者的注意到该元素的内容上（如果没有另加特别强调）。这个元素过去被认为是粗体（Boldface）元素，并且大多数浏览器仍然将文字显示为粗体。尽管如此，你不应将 <code>&lt;b&gt;</code> 元素用于显示粗体文字；替代方案是使用 CSS font-weight 属性来创建粗体文字。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;u&gt;</code></td>\n<td style=\"text-align:center\">代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。</td>\n<td style=\"text-align:center\"><code>&lt;u&gt;</code> 元素使文本在其内容的基线下的一行呈现下划线。在HTML5中, 此元素表示具有未标注的文本跨度，显示渲染，非文本注释，例如将文本标记为中文文本中的专有名称(一个正确的中文标记), 或 将文本标记为拼写错误。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;mark&gt;</code></td>\n<td style=\"text-align:center\">代表一段需要被高亮的引用的文字。</td>\n<td style=\"text-align:center\">可以用来显示搜索引擎的关键词，允许的内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;ruby&gt;</code></td>\n<td style=\"text-align:center\">代表被ruby 注释 标记的文本，如中文汉字和它的拼音。</td>\n<td style=\"text-align:center\"><ruby> 元素 被用来展示东亚文字注音或字符注释。允许内容：短语元素</ruby></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;rt&gt;</code></td>\n<td style=\"text-align:center\">代表ruby 注释 ，如中文拼音。</td>\n<td style=\"text-align:center\">Ruby 文本 (<rt>) 元素包含字符的发音，字符在 ruby 注解中出现，它用于描述东亚字符的发音。这个元素始终在 <ruby> 元素中使用。允许内容：短语元素</ruby></rt></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;rp&gt;</code></td>\n<td style=\"text-align:center\">代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。</td>\n<td style=\"text-align:center\"><rp> 元素用于为那些不能使用 <ruby> 元素展示 ruby 注解的浏览器，提供随后的圆括号。允许的内容：短语元素</ruby></rp></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;bdi&gt;</code></td>\n<td style=\"text-align:center\">代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。</td>\n<td style=\"text-align:center\"><code>&lt;bdi&gt;</code> 元素 (双向隔离元素) 会隔离可能以不同方向进行格式化的外部文本。当不知道是从什么方向嵌入文本，如来自于数据库的文本（有起数据库的文本方向）的时候，该元素是十分有用的。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;span&gt;</code></td>\n<td style=\"text-align:center\">代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。</td>\n<td style=\"text-align:center\"><code>&lt;span&gt;</code> 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者Id属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。<code>&lt;span&gt;</code> 与 <code>&lt;div&gt;</code> 元素很相似，但 <code>&lt;div&gt;</code> 是一个 块元素 而 <code>&lt;span&gt;</code> 则是 行内元素。<strong>没有默认样式没有默认样式！！！</strong>允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;br&gt;</code></td>\n<td style=\"text-align:center\">代表换行。</td>\n<td style=\"text-align:center\"><code>&lt;br&gt;</code> 元素在文本中生成一个换行（回车）符号。此元素在写诗和地址时很有用，这些地方的换行都非常重要。允许内容：无，这是一个空元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;wbr&gt;</code></td>\n<td style=\"text-align:center\">代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。</td>\n<td style=\"text-align:center\"><wbr> 元素  — 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。允许内容：无，这是一个空元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">编辑</td>\n<td style=\"text-align:center\"><code>&lt;ins&gt;</code></td>\n<td style=\"text-align:center\">定义增加到文档的内容。</td>\n<td style=\"text-align:center\"><code>&lt;ins&gt;</code> 元素定义已经被插入文档中的文本。允许内容：透明内容模型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;del&gt;</code></td>\n<td style=\"text-align:center\">定义从文档移除 的内容。</td>\n<td style=\"text-align:center\"><code>&lt;del&gt;</code>标签表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。<code>&lt;ins&gt;</code>标签的作用恰恰于此相反：表示文档中添加的内容。这个标签通常（但不一定要）在文字上显示删除线。允许内容：透明内容模型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">嵌入内容</td>\n<td style=\"text-align:center\"><code>&lt;img&gt;</code></td>\n<td style=\"text-align:center\">代表一张图片 。</td>\n<td style=\"text-align:center\">允许内容：无 这是一个空元素 有始无终 父元素：接受嵌入式内容的任意元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;iframe&gt;</code></td>\n<td style=\"text-align:center\">代表一个内联的框架 。</td>\n<td style=\"text-align:center\">内联框架元素 <code>&lt;iframe&gt;</code> 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。在HTML 4.01中，文档可能包含头部和正文，或头部和框架集，但不能包含正文和框架集。但是，<code>&lt;iframe&gt;</code>可以在正常的文档主体中使用。每个浏览上下文都有自己的会话历史记录和活动文档。包含嵌入内容的浏览上下文称为父浏览上下文。顶级浏览上下文（没有父级）通常是浏览器窗口。允许元素：流式元素、短语元素、嵌入元素、。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;embed&gt;</code></td>\n<td style=\"text-align:center\">代表一个嵌入 的外部资源，如应用程序或交互内容。</td>\n<td style=\"text-align:center\"><code>&lt;embed&gt;</code>元素将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。允许内容：流式元素、短语元素、嵌入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;object&gt;</code></td>\n<td style=\"text-align:center\">代表一个外部资源 ，如图片、HTML 子文档、插件等。</td>\n<td style=\"text-align:center\"><code>&lt;object&gt;</code> 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。允许内容：流式元素、短语元素、嵌入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;param&gt;</code></td>\n<td style=\"text-align:center\"><code>&lt;param&gt;</code>元素(或 HTML Parameter 元素) 定义了 <code>&lt;object&gt;</code>的参数</td>\n<td style=\"text-align:center\">允许内容：空元素 有始无终</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;video&gt;</code></td>\n<td style=\"text-align:center\">代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。</td>\n<td style=\"text-align:center\"><code>&lt;video&gt;</code> 元素 用于在HTML或者XHTML文档中嵌入视频内容。允许内容：流式元素，包含任一 src 属性或是一个或多个 <code>&lt;source&gt;</code> 元素，其后紧跟流式元素 或 短语元素 ， 不包括<code>&lt;video&gt;</code> 或者 <code>&lt;audio&gt;</code> 元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;audio&gt;</code></td>\n<td style=\"text-align:center\">代表一段声音 ，或音频流 。</td>\n<td style=\"text-align:center\"><code>&lt;audio&gt;</code> 元素用于在文档中表示音频内容。 <code>&lt;audio&gt;</code> 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者<code>&lt;source&gt;</code> 元素来进行描述； 浏览器将会选择最合适的一个来使用。对于不支持<code>&lt;audio&gt;</code>元素的浏览器，<code>&lt;audio&gt;</code>元素也可以作为浏览器不识别的内容加入到文档中。允许内容：如果元素包含 src 属性：零个或多个 <code>&lt;track&gt;</code> 元素，其后紧跟不包含 <code>&lt;audio&gt;</code> 或者 <code>&lt;video&gt;</code>媒体元素的透明内容。或者：零个或多个 <code>&lt;source&gt;</code> 元素，其后紧跟零个或多个 <code>&lt;track&gt;</code> 元素，其后紧跟不包含 <code>&lt;audio&gt;</code> 或者 <code>&lt;video&gt;</code>媒体元素的透明内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;source&gt;</code></td>\n<td style=\"text-align:center\">为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定媒体源 。</td>\n<td style=\"text-align:center\">允许内容：一个 <code>&lt;picture&gt;</code> 元素, 且在<code>&lt;img&gt;</code>元素之前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;track&gt;</code></td>\n<td style=\"text-align:center\">为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定文本轨道（字幕） 。</td>\n<td style=\"text-align:center\"><code>&lt;track&gt;</code> 元素 被当作媒体元素—<code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code>的子元素来使用。它允许指定计时字幕（或者基于事件的数据），例如自动处理字幕。track 给媒体元素添加的数据的类型在 kind 属性中设置，属性值可以是<code>subtitles</code>, <code>captions</code>, <code>descriptions</code>, <code>chapters</code> 或 <code>metadata</code>。该元素指向当用户请求额外的数据时浏览器公开的包含定时文本的源文件。一个<code>media</code> 元素的任意两个 <code>track</code> 子元素不能有相同的 <code>kind</code>, <code>srclang</code>, 和 <code>label</code>属性。允许内容：空，这是一个空元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;canvas&gt;</code></td>\n<td style=\"text-align:center\">代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。</td>\n<td style=\"text-align:center\"><code>&lt;canvas&gt;</code>元素可被用来通过脚本（通常是JavaScript）绘制图形。比如,它可以被用来绘制图形,制作图片集合,甚至用来实现动画效果。你可以(也应该)在元素标签内写入可提供替代的的代码内容，这些内容将会在在旧的、不支持<code>&lt;canvas&gt;</code>元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;map&gt;</code></td>\n<td style=\"text-align:center\">与 <code>&lt;area&gt;</code> 元素共同定义图像映射 区域。</td>\n<td style=\"text-align:center\"><map> 属性 与 <area> 属性一起使用来定义一个图像映射(一个可点击的链接区域).允许内容：任何透明元素模型</map></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;area&gt;</code></td>\n<td style=\"text-align:center\">与 <map> 元素共同定义图像映射 区域。</map></td>\n<td style=\"text-align:center\"><area> 元素 在图片上定义一个热点区域，可以关联一个超链接。<area>元素仅在<map>元素内部使用。允许内容：空，这是一个空元素 有始无终</map></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;svg&gt;</code></td>\n<td style=\"text-align:center\">定义一个嵌入式矢量图 。</td>\n<td style=\"text-align:center\">如果svg不是根元素，svg 元素可以用于在当前文档（比如说，一个HTML文档）内嵌套一个独立的svg片段。这个独立片段拥有独立的视口和坐标系统。允许内容：任意数量、任意排序的下列元素：动画元素；描述性元素；形状元素；结构化元素；渐变元素；<code>&lt;a&gt;, &lt;altGlyphDef&gt;, &lt;clipPath&gt;, &lt;color-profile&gt;, &lt;cursor&gt;, &lt;filter&gt;, &lt;font&gt;, &lt;font-face&gt;, &lt;foreignObject&gt;, &lt;image&gt;, &lt;marker&gt;, &lt;mask&gt;, &lt;pattern&gt;, &lt;script&gt;, &lt;style&gt;, &lt;switch&gt;, &lt;text&gt;, &lt;view&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;math&gt;</code></td>\n<td style=\"text-align:center\">定义一段数学公式 。</td>\n<td style=\"text-align:center\">MathML的顶级元素是<code>&lt;math&gt;</code>。所有有效的MathML实例必须被包括在 <code>&lt;math&gt;</code> 标记中。另外不可以在一个 <code>&lt;math&gt;</code> 元素中嵌套第二个<code>&lt;math&gt;</code> 元素，但是 <code>&lt;math&gt;</code> 元素中可以有任意多的子元素 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表格</td>\n<td style=\"text-align:center\"><code>&lt;table&gt;</code></td>\n<td style=\"text-align:center\">定义多维数据 。</td>\n<td style=\"text-align:center\">在 CSS 创建之前， HTML <code>&lt;table&gt;</code> 元素常常被用于布局页面。 这种用法在 HTML 4之后不被推荐使用，并且 <code>&lt;table&gt;</code>元素 不应该 被用于此目的。允许内容：按照这个顺序：一个可选的 <code>&lt;caption&gt;</code> 元素；零个或多个的 <code>&lt;colgroup&gt;</code> 元素；一个可选的 <code>&lt;thead&gt;</code> 元素；一个可选的 <code>&lt;tfoot&gt;</code> 元素（tfoot元素出现在tbody或tr元素前后都可以。在HTML4中，它只能出现在这些元素之前）；零个或多个 <code>&lt;tbody&gt;</code> 元素；一个或多个 <code>&lt;tr&gt;</code> 元素；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;caption&gt;</code></td>\n<td style=\"text-align:center\">代表表格的标题。</td>\n<td style=\"text-align:center\"><code>&lt;caption&gt;</code> 元素 (or HTML 表格标题元素) 展示一个表格的标题， 它常常作为 <code>&lt;table&gt;</code> 的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被CSS样式化，所以，它同样可以出现在任何一个一个相对于表格的做任意位置。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;colgroup&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一组单列或多列。</td>\n<td style=\"text-align:center\">表格列组（Column Group <code>&lt;colgroup&gt;</code>） 标签用来定义表中的一组列表。若<code>span</code>属性为<code>present</code>: 那它就是一个空属性。如果属性不是<code>present</code>内容为：零或多个<code>&lt;col&gt;</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;col&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的列。</td>\n<td style=\"text-align:center\"><code>&lt;col&gt;</code> 元素 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于<colgroup>元素内。允许内容：这是一个空元素有始无终</colgroup></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;tbody&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一块具体数据 （表格主体）。</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;tr&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;thead&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一块列标签（表头）。</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;tr&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;tfoot&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一块列摘要（表尾）</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;tr&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;tr&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的行 。</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;td&gt;</code>或<code>&lt;th&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;td&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的单元格 。</td>\n<td style=\"text-align:center\">允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;th&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的头部单元格 。</td>\n<td style=\"text-align:center\">允许内容：流内容（除header、footer、sectioning content或heading content的继承。）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表单</td>\n<td style=\"text-align:center\"><code>&lt;form&gt;</code></td>\n<td style=\"text-align:center\">代表一个表单 ，由控件组成。</td>\n<td style=\"text-align:center\"><form> 元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。可以用 <code>:valid</code>和<code>:invalid</code> CSS 伪类 来给一个元素指定样式。允许内容：流式元素</form></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;fieldset&gt;</code></td>\n<td style=\"text-align:center\">代表控件组 。</td>\n<td style=\"text-align:center\"><code>fieldset</code>元素通常用来对表单中的控制元素进行分组(也包括 label 元素)允许内容：一个可选的<code>&lt;legend&gt;</code>元素，后面跟流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;legend&gt;</code></td>\n<td style=\"text-align:center\">代表 <code>&lt;fieldset&gt;</code> 控件组的标题。</td>\n<td style=\"text-align:center\"><code>&lt;legend&gt;</code>元素（也称为HTML的域说明元素（or HMTL Legend Field Element））代表一个用于表示它的父元素<code>&lt;fieldset&gt;</code>的内容的标题。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;label&gt;</code></td>\n<td style=\"text-align:center\">代表表单控件的标题。## II.元素</td>\n<td style=\"text-align:center\">它通常关联一个控件，或者是将控件放置在label元素内，或者是用作其属性。这样的控制称作label元素的labeled control。允许内容：没有后代<code>label</code>元素的短语元素。除了标记控制之外，不允许使用其他可标记的元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;button&gt;</code></td>\n<td style=\"text-align:center\">代表按钮。</td>\n<td style=\"text-align:center\"><code>&lt;button&gt;</code> 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。 默认情况下，HTML按钮的显示样式接近于 user agent 所在的宿主系统平台（用户操作系统）的按钮， 但你可以使用 CSS 来改变按钮的样貌。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;select&gt;</code></td>\n<td style=\"text-align:center\">代表下拉框。</td>\n<td style=\"text-align:center\"><code>&lt;select&gt;</code> 元素是一种表单控件，可创建选项菜单。菜单内的选项为<code>&lt;option&gt;</code> , 可以由 <code>&lt;optgroup&gt;</code> 元素分组。选项可以被用户预先选择。允许内容：0个或多个 <code>&lt;option&gt;</code> 或者 <code>&lt;optgroup&gt;</code> 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;datalist&gt;</code></td>\n<td style=\"text-align:center\">代表提供给其他控件的一组预定义选项 。</td>\n<td style=\"text-align:center\">Datalist 元素 (<code>&lt;datalist&gt;</code>) 包含了一组<option>元素,这些元素表示其它表单控件可选值。允许内容：要么短语元素 要么 0个或多个 <code>&lt;option&gt;</code>元素.</option></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;optgroup&gt;</code></td>\n<td style=\"text-align:center\">代表一个选项分组。</td>\n<td style=\"text-align:center\">在一个web表单中, HTML元素<code>&lt;optgroup&gt;</code>会创建包含在一个 <code>&lt;select&gt;</code> 元素中的一组选项。允许内容：0或多个 <code>&lt;option&gt;</code> 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;option&gt;</code></td>\n<td style=\"text-align:center\">代表一个 <code>&lt;select&gt;</code> 元素或 <code>&lt;datalist&gt;</code> 元素中的一个选项</td>\n<td style=\"text-align:center\">HTML元素 <code>&lt;option&gt;</code>  用于定义在<code>&lt;select&gt;</code>,  <code>&lt;optgroup&gt;</code> 或<code>&lt;datalist&gt;</code> 元素中包含的项。<code>&lt;option&gt;</code> 可以在弹出窗口和 html 文档中的其他项目列表中表示菜单项。允许内容：带有最终转义字符（例如 <code>&amp;eacute;</code>）的文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;textarea&gt;</code></td>\n<td style=\"text-align:center\">代表多行文本框 。</td>\n<td style=\"text-align:center\"><code>&lt;textarea&gt;</code> 元素表示一个多行纯文本编辑控件。 允许内容：文字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;keygen&gt;</code></td>\n<td style=\"text-align:center\">代表一个密钥对生成器。</td>\n<td style=\"text-align:center\">尽量不要使用了，该特性已从Web标准中删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;output&gt;</code></td>\n<td style=\"text-align:center\">代表计算值。</td>\n<td style=\"text-align:center\"><code>&lt;output&gt;</code> 标签表示计算或用户操作的结果。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;progress&gt;</code></td>\n<td style=\"text-align:center\">代表进度条 。</td>\n<td style=\"text-align:center\">progress (<code>&lt;progress&gt;</code>) 元素用来显示一项任务的完成进度.虽然规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;meter&gt;</code></td>\n<td style=\"text-align:center\">代表滑动条。</td>\n<td style=\"text-align:center\"><code>&lt;meter&gt;</code>元素用来显示已知范围的标量值或者分数值。允许内容：短语元素，但不允许有<meter>元素作为其子元素。</meter></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交互元素</td>\n<td style=\"text-align:center\"><code>&lt;details&gt;</code></td>\n<td style=\"text-align:center\">代表一个用户可以(点击)获取额外信息或控件的小部件。</td>\n<td style=\"text-align:center\"><code>&lt;details&gt;</code> 元素被用作发现小部件，用户可以从其中检索附加信息。允许内容：<code>&lt;summary&gt;</code>后紧跟流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;summary&gt;</code></td>\n<td style=\"text-align:center\">代表 <code>&lt;details&gt;</code> 元素的综述或标题。</td>\n<td style=\"text-align:center\"><summary> 元素 用作 一个<code>&lt;details&gt;</code>元素的一个内容的摘要，标题或图例。如果 <code>&lt;summary&gt;</code> 元素在浏览器内不能被正确解析和渲染,，则会展示<code>&lt;details&gt;</code>标签内的其他内容。</summary></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;menuitem&gt;</code></td>\n<td style=\"text-align:center\">代表一个用户可以点击的菜单项。</td>\n<td style=\"text-align:center\">用户可以通过HTML的 <code>&lt;menuitem&gt;</code> 标签生成一个弹出式菜单。这包括上下文菜单，以及按钮可能附带的菜单。这个标签可以被显式定义，带有文本标签和可选图标来描述其外观，或者作为一个间接命令，其行为由一个单独的元素定义。命令还可以选择包含复选框或分组共享单选按钮。（<code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code>.)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;menu&gt;</code></td>\n<td style=\"text-align:center\">代表菜单。</td>\n<td style=\"text-align:center\">HTML <menu> 元素 呈现了一组用户可执行或激活的命令。这既包含了可能出现在屏幕顶端的列表菜单，也包含了那些隐藏在按钮之下、当点击按钮后显示出来的文本菜单。使用说明:  <code>&lt;menu&gt;</code> 和 <code>&lt;ul&gt;</code> 元素都呈现了无序列表元素。最主要的区别是 <code>&lt;ul&gt;</code> 主要是为了展示选项，而 <code>&lt;menu&gt;</code> 则是为了交互。允许内容：如果元素位于列表菜单内：流式元素；或者零个或多个活动的 <code>&lt;li&gt;</code>, <code>&lt;script&gt;</code>和<code>&lt;template&gt;</code>二选一。如果元素位于右键菜单（上下文菜单）：零个或多个事件，任何顺序中，<code>&lt;menu&gt;</code>(仅上下文菜单) <code>&lt;menuitem&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;template&gt;</code>。</menu></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"II-元素内容类型\"><a href=\"#II-元素内容类型\" class=\"headerlink\" title=\"II.元素内容类型\"></a>II.元素内容类型</h3><p>每一个HTML元素都必须遵循定义了它可以包含哪一类内容的规则。 这些规则被归类为几个常见的元素内容模型（content model）。每个HTML元素都属于0个、1 个或多个内容模型，每个模型都有一些规则使得元素中的内容必须遵循一个HTML规范文档( HTML-conformant document)。</p>\n<p>以下是三种类型的内容分类：</p>\n<p>主内容类，描述了很多元素共享的内容规范；<br>表单相关的内容类，描述了表单相关元素共有的内容规范；<br>特殊内容类，描述了仅仅在某些特殊元素上才需要遵守的内容规范，通常这些元素都有特殊的上下文关系。</p>\n<h4 id=\"i-元数据内容（Metadata-content）\"><a href=\"#i-元数据内容（Metadata-content）\" class=\"headerlink\" title=\"i.元数据内容（Metadata content）\"></a>i.元数据内容（Metadata content）</h4><p>此类元素 修改文档其余部分的陈述或者行为，建立与其他文档的链接，或者传达其他外带信息。<br>属于这一类的元素有：<code>&lt;base&gt;, &lt;command&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;noscript&gt;, &lt;script&gt;, &lt;style&gt; and &lt;title&gt;.</code></p>\n<h4 id=\"ii-流式元素（Flow-content）\"><a href=\"#ii-流式元素（Flow-content）\" class=\"headerlink\" title=\"ii.流式元素（Flow content）\"></a>ii.流式元素（Flow content）</h4><p>此类元素通常包含 文本或植入的内容。此类元素有：<code>&lt;a&gt;, &lt;abbr&gt;, &lt;address&gt;, &lt;article&gt;, &lt;aside&gt;, &lt;audio&gt;, &lt;b&gt;,&lt;bdo&gt;, &lt;bdi&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;button&gt;, &lt;canvas&gt;, &lt;cite&gt;, &lt;code&gt;, &lt;command&gt;, &lt;data&gt;, &lt;datalist&gt;, &lt;del&gt;, &lt;details&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;dl&gt;, &lt;em&gt;, &lt;embed&gt;, &lt;fieldset&gt;, &lt;figure&gt;, &lt;footer&gt;, &lt;form&gt;, &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;, &lt;header&gt;, &lt;hgroup&gt;, &lt;hr&gt;, &lt;i&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input&gt;, &lt;ins&gt;, &lt;kbd&gt;, &lt;keygen&gt;, &lt;label&gt;, &lt;main&gt;, &lt;map&gt;, &lt;mark&gt;, &lt;math&gt;, &lt;menu&gt;, &lt;meter&gt;, &lt;nav&gt;, &lt;noscript&gt;, &lt;object&gt;, &lt;ol&gt;, &lt;output&gt;, &lt;p&gt;, &lt;pre&gt;, &lt;progress&gt;, &lt;q&gt;, &lt;ruby&gt;, &lt;s&gt;, &lt;samp&gt;, &lt;script&gt;, &lt;section&gt;, &lt;select&gt;, &lt;small&gt;, &lt;span&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;svg&gt;, &lt;table&gt;, &lt;template&gt;, &lt;textarea&gt;, &lt;time&gt;, &lt;ul&gt;, &lt;var&gt;, &lt;video&gt;, &lt;wbr&gt;</code> 以及 Text.</p>\n<p>属于此类的少数其他元素（仅限于某种特殊情形，这些元素才会属于此类）：<br><code>&lt;area&gt;</code>, 仅限于它作为<map>的子节点的情形<br><code>&lt;link&gt;</code>, 仅限于itemprop属性存在的情形<br><code>&lt;meta&gt;</code>, 仅限于itemprop属性存在的情形<br><code>&lt;style&gt;</code>, 仅限于 scoped属性存在的情形</map></p>\n<h4 id=\"iii-章节元素（Sectioning-content）\"><a href=\"#iii-章节元素（Sectioning-content）\" class=\"headerlink\" title=\"iii.章节元素（Sectioning content）\"></a>iii.章节元素（Sectioning content）</h4><p>隶属于分节内容模型的元素 在当前的大纲中创建一个分节，此分节将定义<code>&lt;header&gt;</code>元素、<code>&lt;footer&gt;</code>元素和标题元素（heading content）的范围。<br>属于此类的元素有： <code>&lt;article&gt;, &lt;aside&gt;, &lt;nav&gt; and &lt;section&gt;</code>. </p>\n<h4 id=\"iv-标题元素（Heading-content）\"><a href=\"#iv-标题元素（Heading-content）\" class=\"headerlink\" title=\"iv.标题元素（Heading content）\"></a>iv.标题元素（Heading content）</h4><p>标题内容 定义了分节的标题，而这个分节可能由一个明确的分节内容元素直接标记，也可能由标题本身隐式地定义。<br>属于此分类的元素有： <code>&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;</code> and <code>&lt;hgroup&gt;</code>.</p>\n<h4 id=\"v-短语元素（Phrasing-content）\"><a href=\"#v-短语元素（Phrasing-content）\" class=\"headerlink\" title=\"v.短语元素（Phrasing content）\"></a>v.短语元素（Phrasing content）</h4><p>短语元素（Phrasing content） 规定文本和它包含的标记。 一些Phrasing content就构成了段落.<br>属于此类的元素有： <code>&lt;abbr&gt;, &lt;audio&gt;, &lt;b&gt;, &lt;bdo&gt;, &lt;br&gt;, &lt;button&gt;, &lt;canvas&gt;, &lt;cite&gt;, &lt;code&gt;, &lt;command&gt;, &lt;datalist&gt;, &lt;dfn&gt;, &lt;em&gt;, &lt;embed&gt;, &lt;i&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input&gt;, &lt;kbd&gt;, &lt;keygen&gt;, &lt;label&gt;, &lt;mark&gt;, &lt;math&gt;, &lt;meter&gt;, &lt;noscript&gt;, &lt;object&gt;, &lt;output&gt;, &lt;progress&gt;, &lt;q&gt;, &lt;ruby&gt;, &lt;samp&gt;, &lt;script&gt;, &lt;select&gt;, &lt;small&gt;, &lt;span&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;svg&gt;, &lt;textarea&gt;, &lt;time&gt;, &lt;var&gt;, &lt;video&gt;, &lt;wbr&gt;</code> 和 plain text (仅当所包含的内容不完全为空字符的时候).<br>一些其他的元素也属于这个分类，但是只有当如下特殊情况时才会实现:<br><code>&lt;a&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;area&gt;</code>, 当它为<code>&lt;map&gt;</code> 元素的子元素时<br><code>&lt;del&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;ins&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;link&gt;</code>, 如果itemprop属性存在的情形<br><code>&lt;map&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;meta&gt;</code>,如果itemprop属性存在的情形</p>\n<h4 id=\"vi-嵌入元素（Embedded-content）\"><a href=\"#vi-嵌入元素（Embedded-content）\" class=\"headerlink\" title=\"vi.嵌入元素（Embedded content）\"></a>vi.嵌入元素（Embedded content）</h4><p>Embedded content输入另一个资源或者将来自另一种标记语言或命名空间的内容插入到文档中。<br>属于此类的元素有：<code>&lt;audio&gt;, &lt;canvas&gt;, &lt;embed&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;math&gt;, &lt;object&gt;, &lt;svg&gt;, &lt;video&gt;</code>.</p>\n<h4 id=\"vii-交互元素（Interactive-content）\"><a href=\"#vii-交互元素（Interactive-content）\" class=\"headerlink\" title=\"vii.交互元素（Interactive content）\"></a>vii.交互元素（Interactive content）</h4><p>交互式内容包含为用户交互而特别设计的元素。<br>属于此类的元素有：<code>&lt;a&gt;，&lt;button&gt;，&lt;details&gt;，&lt;embed&gt;，&lt;iframe&gt;，&lt;keygen&gt;，&lt;label&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>。<br>仅在特殊情形下才会属于此类的元素有:<br><code>&lt;audio&gt;</code>, 若controls属性存在<br><code>&lt;img&gt;</code>, 若usemap属性存在<br><code>&lt;input&gt;</code>, 若type属性不处于隐藏（hidden）状态<br><code>&lt;menu&gt;</code>, 若type属性处于工具栏（toolbar）状态<br><code>&lt;object&gt;</code>, 若usemap属性存在<br><code>&lt;video&gt;</code>, 若controls属性存在</p>\n<h4 id=\"viii-表单相关内容（Form-associated-content）\"><a href=\"#viii-表单相关内容（Form-associated-content）\" class=\"headerlink\" title=\"viii.表单相关内容（Form-associated content）\"></a>viii.表单相关内容（Form-associated content）</h4><p>表单相关的内容 包含 拥有表单父节点（exposed by a form attribute）的元素，一个表单父节点可以是<code>&lt;form&gt;</code>元素，也可以是其id在表单属性中被指定了的元素。（Form-associated content comprises elements that have a form owner, exposed by a form attribute. A form owner is either the containing <code>&lt;form&gt;</code> element or the element whose id is specified in the form attribute.）<br><code>&lt;button&gt;</code><br><code>&lt;fieldset&gt;</code><br><code>&lt;input&gt;</code><br><code>&lt;keygen&gt;</code><br><code>&lt;label&gt;</code><br><code>&lt;meter&gt;</code><br><code>&lt;object&gt;</code><br><code>&lt;output&gt;</code><br><code>&lt;progress&gt;</code><br><code>&lt;select&gt;</code><br><code>&lt;textarea&gt;</code><br> 此类包含了几个子类：<br><strong>可列举的元素（listed）</strong><br>在 form.elements 和 fieldset.elements IDL collections中列举出的元素. 包括 <code>&lt;button&gt;，&lt;fieldset&gt;，&lt;input&gt;，&lt;keygen&gt;，&lt;object&gt;，&lt;output&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>。<br><strong>可标签的元素（labelable）</strong><br>和 <code>&lt;label&gt;</code> 相关联的元素。包括 <code>&lt;button&gt;，&lt;input&gt;，&lt;keygen&gt;，&lt;meter&gt;，&lt;output&gt;，&lt;progress&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>。<br><strong>可提交的元素（submittable）</strong><br>包括当表单提交时可以用来组成表单数据的元素。 包括 <code>&lt;button&gt;，&lt;input&gt;，&lt;keygen&gt;，&lt;object&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>.<br><strong>可重置的元素（resettable）</strong><br>当表单重置时会被重置的元素。包括 <code>&lt;input&gt;，&lt;keygen&gt;，&lt;output&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>.</p>\n<h4 id=\"ix-透明内容模型（Transparent-content-model）\"><a href=\"#ix-透明内容模型（Transparent-content-model）\" class=\"headerlink\" title=\"ix.透明内容模型（Transparent content model）\"></a>ix.透明内容模型（Transparent content model）</h4><p>如果一个元素拥有 transparent content mode， 即使将透明内容更换为子元素，其内容必须由合法的HTML5元素组成。<br>例如，<code>&lt;del&gt;</code> 和 <code>&lt;ins&gt;</code> 是透明的：<br><code>&lt;p&gt;We hold these truths to be &lt;del&gt;&lt;em&gt;sacred &amp;amp; undeniable&lt;/em&gt;&lt;/del&gt; &lt;ins&gt;self-evident&lt;/ins&gt;.&lt;/p&gt;</code><br>如果这两个元素被移除，这个程序段依然是合法的。<br><code>&lt;p&gt;We hold these truths to be &lt;em&gt;sacred &amp;amp; undeniable&lt;/em&gt; self-evident.&lt;/p&gt;</code></p>\n<h3 id=\"III-空元素\"><a href=\"#III-空元素\" class=\"headerlink\" title=\"III. 空元素\"></a>III. 空元素</h3><p><strong>一个空元素（empty element）</strong>可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。<br>HTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 <code>&lt;audio&gt;</code> 元素嵌套在一个 <code>&lt;hr&gt;</code> 元素里。<br>在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code> 的闭标签是无效的 HTML。<br>在 HTML 中有以下这些空元素：<br><code>&lt;area&gt;</code><br><code>&lt;base&gt;</code><br><code>&lt;br&gt;</code><br><code>&lt;col&gt;</code><br><code>&lt;colgroup&gt;</code> when the span is present<br><code>&lt;command&gt;</code><br><code>&lt;embed&gt;</code><br><code>&lt;hr&gt;</code><br><code>&lt;img&gt;</code><br><code>&lt;input&gt;</code><br><code>&lt;keygen&gt;</code><br><code>&lt;link&gt;</code><br><code>&lt;meta&gt;</code><br><code>&lt;param&gt;</code><br><code>&lt;source&gt;</code><br><code>&lt;track&gt;</code><br><code>&lt;wbr&gt;</code><br><strong>在极少数情况下，空元素被错误地称为“无效元素”(void elements)。</strong></p>\n<font color=\"gray\">有始无终的诸位，不加闭标签</font>\n\n<h3 id=\"IV-可替换元素\"><a href=\"#IV-可替换元素\" class=\"headerlink\" title=\"IV.可替换元素\"></a>IV.可替换元素</h3><p>CSS 里，可替换元素（replaced element）的展现不是由CSS来控制的。这些元素是一类 外观渲染独立于CSS的 外部对象。 典型的可替换元素有 <code>&lt;img&gt;</code>、 <code>&lt;object&gt;</code>、 <code>&lt;video&gt;</code> 和 表单元素，如<code>&lt;textarea&gt;</code>、 <code>&lt;input&gt;</code> 。 某些元素只在一些特殊情况下表现为可替换元素，例如 <code>&lt;audio&gt;</code> 和 <code>&lt;canvas&gt;</code> 。 通过 CSS content 属性来插入的对象 被称作 匿名可替换元素（anonymous replaced elements）。</p>\n<p><strong>自己决定自己宽高的元素</strong></p>\n<p>CSS在某些情况下会对可替换元素做特殊处理，比如计算外边距和一些auto值。</p>\n<p>需要注意的是，一部分（并非全部）可替换元素，本身具有尺寸和基线（baseline），会被像vertical-align之类的一些 CSS 属性用到。</p>\n<h3 id=\"V-标签的属性\"><a href=\"#V-标签的属性\" class=\"headerlink\" title=\"V.标签的属性\"></a>V.标签的属性</h3><p><strong>HTML标签没有块级元素和内联元素的区别，仅仅仅仅仅仅在CSS里有这种区别</strong><br><code>&lt;div&gt;</code>是块级元素？？？naive！<br><code>&lt;style&gt;\n  div{\n    display: inline;\n }\n&lt;/style&gt;</code><br>你曾经是个块级元素(默认)，但看看你现在的样子。<br><br><br><strong>HTML只做一件事情：定义他是什么，而他长什么样子和HTML没关系。</strong><del>这种问题请交给CSS</del></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-什么是HTML\"><a href=\"#1-什么是HTML\" class=\"headerlink\" title=\"1.什么是HTML\"></a>1.什么是HTML</h2><h3 id=\"I-HTML\"><a href=\"#I-HTML\" class=\"headerlink\" title=\"I. HTML\"></a>I. HTML</h3><p>是超文本标记语言（<strong>H</strong>yper<strong>T</strong>ext<strong>M</strong>arkup <strong>L</strong>anguage，简称：<strong>HTML</strong>）是一种用于创建网页的标准标记语言。</p>\n<h3 id=\"II-HTML版本-W3C组织制定规范-：\"><a href=\"#II-HTML版本-W3C组织制定规范-：\" class=\"headerlink\" title=\"II. HTML版本(W3C组织制定规范)：\"></a>II. HTML版本(W3C组织制定规范)：</h3><p>  i. HTML 4.01<br>  ii.XHTML<br>  iii. HTML 5<br>  iv. HTML 5.1</p>\n<h3 id=\"III-规范文档-Specification\"><a href=\"#III-规范文档-Specification\" class=\"headerlink\" title=\"III. 规范文档(Specification)\"></a>III. 规范文档(Specification)</h3><p>  i. 由W3C写文档（Sir Timothy John Berners-Lee）<br>  ii. W3C根据浏览器的实际情况总结文档，并不是凭空想象。</p>\n<h3 id=\"IV-DOCTYPE\"><a href=\"#IV-DOCTYPE\" class=\"headerlink\" title=\"IV. DOCTYPE\"></a>IV. DOCTYPE</h3><p>  i. 用来选择文档类型<br>  ii. DOCTYPE</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">版本</th>\n<th style=\"text-align:center\">DOCTYPE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">HTML 5及以上</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML&gt;</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML 4.01 Strict</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN””<a href=\"http://www.w3.org/TR/html4/strict.dtd&quot;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/strict.dtd&quot;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML 4.01 Transitional</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Transitional//EN””<a href=\"http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">HTML 4.01 Frameset</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01 Frameset//EN””<a href=\"http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/html4/frameset.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.0 Strict</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Strict//EN””<a href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.0 Transitional</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Transitional//EN””<a href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.0 Frameset</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.0 Frameset//EN””<a href=\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML 1.1 DTD</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML 1.1//EN” “<a href=\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd&quot;&gt;</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">XHTML Basic 1.1 (quick reference)</td>\n<td style=\"text-align:center\">&lt;!DOCTYPE html PUBLIC “-//W3C//DTD XHTML Basic 1.1//EN””<a href=\"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd&quot;&gt;\" target=\"_blank\" rel=\"noopener\">http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd&quot;&gt;</a></td>\n</tr>\n</tbody>\n</table>\n<p>   如果不写，就是个GG</p>\n<h2 id=\"2-W3C\"><a href=\"#2-W3C\" class=\"headerlink\" title=\"2.W3C\"></a>2.W3C</h2><p>I. 万维网联盟（World Wide Web Consortium，W3C），又称W3C理事会，是万维网的主要国际标准组织。李爵士创立。<br>II. 该组织试图通过W3C制定的新标准来促进业界成员间的兼容性和协议。不兼容的HTML版本由不同的供应商提供，导致网页显示方式不一致。联盟试图让所有的供应商实施一套由联盟选择的核心原则和组件。<br>III. 总结一下，制定规范的组织。</p>\n<h2 id=\"3-MDN\"><a href=\"#3-MDN\" class=\"headerlink\" title=\"3.MDN\"></a>3.MDN</h2><p>I. MDN Web Docs（旧称Mozilla Developer Network、Mozilla Developer Center，简称MDN）是一个汇集众多Mozilla基金会产品和网路技术开发文档的免费网站。<br>II. 就是查文档的。</p>\n<h2 id=\"4-HTML标签\"><a href=\"#4-HTML标签\" class=\"headerlink\" title=\"4.HTML标签\"></a>4.HTML标签</h2><h3 id=\"I-标签\"><a href=\"#I-标签\" class=\"headerlink\" title=\"I.标签\"></a>I.标签</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">元素</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">根元素</td>\n<td style=\"text-align:center\"><code>&lt;html&gt;</code></td>\n<td style=\"text-align:center\">代表 HTML 或 XHTML 文档的根。其他所有元素必须是这个元素的子节点。</td>\n<td style=\"text-align:center\">包含全局属性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">文档元数据</td>\n<td style=\"text-align:center\"><code>&lt;head&gt;</code></td>\n<td style=\"text-align:center\">代表关于文档元数据的一个集合，包括脚本或样式表的链接或内容。</td>\n<td style=\"text-align:center\">该元素包含全局属性。可用于<code>&lt;head&gt;</code>元素内的元素有: <code>&lt;title&gt;, &lt;base&gt;, &lt;link&gt;, &lt;style&gt;, &lt;meta&gt;, &lt;script&gt;, &lt;noscript&gt;, &lt;command&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;title&gt;</code></td>\n<td style=\"text-align:center\">定义文档的标题，将显示在浏览器的标题栏或标签页上。该元素只能包含文本，包含的标签不会被解释。</td>\n<td style=\"text-align:center\">仅拥有全局属性，允许内容为非空字符或特殊字符（inter-element whitespace）的文本。    一个 <code>&lt;head&gt;</code> 元素只能包含一个 <code>&lt;title&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;base&gt;</code></td>\n<td style=\"text-align:center\">定义页面上相对 URL 的基准 URL。</td>\n<td style=\"text-align:center\">允许空标签，不可以有结束标签。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;link&gt;</code></td>\n<td style=\"text-align:center\">用于链接外部的 CSS 到该文档。</td>\n<td style=\"text-align:center\">这是一个空标签，鉴于他也是空元素，所以也不可有结束标签</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;meta&gt;</code></td>\n<td style=\"text-align:center\">定义其他 HTML 元素无法描述的元数据。</td>\n<td style=\"text-align:center\">也是个空标签，所以有始不能有终</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;style&gt;</code></td>\n<td style=\"text-align:center\">用于内联 CSS。</td>\n<td style=\"text-align:center\">内容为匹配type属性指定的语言的样式信息。标签始终都不能省略</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">脚本</td>\n<td style=\"text-align:center\"><code>&lt;script&gt;</code></td>\n<td style=\"text-align:center\">定义一个内联脚本或链接到外部脚本。脚本语言是 JavaScript。</td>\n<td style=\"text-align:center\">内容为动态脚本。包含全局属性而且拥有以下类别：<code>&lt;async&gt;&lt;defer&gt; &lt;integrity&gt;&lt;src&gt;&lt;type&gt;&lt;text&gt;&lt;crossorigin&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;noscript&gt;</code></td>\n<td style=\"text-align:center\">定义当浏览器不支持脚本时显示的替代文字。</td>\n<td style=\"text-align:center\">仅拥有全局元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;template&gt;</code></td>\n<td style=\"text-align:center\">通过 JavaScript 在运行时实例化内容的容器。</td>\n<td style=\"text-align:center\">是一种用于保存客户端内容的机制，该内容在页面加载时不被渲染，但可以在运行时使用JavaScript进行实例化。，加载页面的同时,解析器确实处理 <code>&lt;template&gt;</code>元素的内容，这样做只是确保这些内容是有效的; 然而,元素的内容不会被渲染</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">章节</td>\n<td style=\"text-align:center\"><code>&lt;body&gt;</code></td>\n<td style=\"text-align:center\">代表 HTML 文档的内容。在文档中只能有一个 <body> 元素。</body></td>\n<td style=\"text-align:center\">它必须是 <code>&lt;html&gt;</code> 元素的直接子元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;section&gt;</code></td>\n<td style=\"text-align:center\">定义文档中的一个章节。</td>\n<td style=\"text-align:center\">内容中的一个专题组，一般来说会有包含一个标题（heading）。一般通过是否包含一个标题<code>(&lt;h1&gt;-&lt;h6&gt; element)</code> 作为子节点 来 辨识每一个<code>&lt;section&gt;</code>。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;nav&gt;</code></td>\n<td style=\"text-align:center\">定义只包含导航链接的章节。</td>\n<td style=\"text-align:center\">用于描述一个含有多个超链接的区域，这个区域包含转到其他页面，或者页面内部其他部分的链接列表。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><article></article></td>\n<td style=\"text-align:center\">定义可以独立于内容其余部分的完整独立内容块。</td>\n<td style=\"text-align:center\">表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。允许元素：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;h1&gt;,&lt;h2&gt;,&lt;h3&gt;,&lt;h4&gt;,&lt;h5&gt;,&lt;h6&gt;</code></td>\n<td style=\"text-align:center\">标题元素实现了六层文档标题，<code>&lt;h1&gt;</code> 是最大的标题，<code>&lt;h6&gt;</code> 是最小的标题。标题元素简要地描述章节的主题。</td>\n<td style=\"text-align:center\">标题顺序从1到6顺序排列，不要为了改变字体大小跳过顺序使用标题，应该用CSS样式改变字体。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;header&gt;</code></td>\n<td style=\"text-align:center\">定义页面或章节的头部。它经常包含 logo、页面标题、搜索表单和导航性的目录。</td>\n<td style=\"text-align:center\">允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;footer&gt;</code></td>\n<td style=\"text-align:center\">定义页面或章节的尾部。它经常包含版权信息、法律信息链接和反馈建议用的地址。</td>\n<td style=\"text-align:center\">允许内容：流式元素，但是不能包含<code>&lt;footer&gt;</code>或者<code>&lt;header&gt;</code>。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;address&gt;</code></td>\n<td style=\"text-align:center\">定义包含联系信息的一个章节。</td>\n<td style=\"text-align:center\">允许内容：流式元素但是不能是内嵌的<code>&lt;address&gt;</code>元素、标题元素、章节元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;main&gt;</code></td>\n<td style=\"text-align:center\">定义文档中主要或重要的内容。</td>\n<td style=\"text-align:center\">允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">组织内容</td>\n<td style=\"text-align:center\"><code>&lt;p&gt;</code></td>\n<td style=\"text-align:center\">定义一个段落。</td>\n<td style=\"text-align:center\">表示文本的一个段落。该元素通常表现为一整块与相邻文本分离的文本，或以垂直的空白隔离或以首行缩进。另外，<code>&lt;p&gt;</code>是块级元素。允许元素：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;hr&gt;</code></td>\n<td style=\"text-align:center\">代表章节、文章或其他长内容中段落之间的分隔符。</td>\n<td style=\"text-align:center\">允许内容：无，这是一个空元素。所以有始无终。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;pre&gt;</code></td>\n<td style=\"text-align:center\">代表其内容已经预先排版过，格式应当保留 。</td>\n<td style=\"text-align:center\">允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;blockquote&gt;</code></td>\n<td style=\"text-align:center\">代表引用自其他来源的内容。（块级引用）</td>\n<td style=\"text-align:center\">代表其中的文字是引用内容。通常在渲染时，这部分的内容会有一定的缩进（注 中说明了如何更改）。若引文来源于网络，则可以将原内容的出处 URL 地址设置到 cite 特性上，若要以文本的形式告知读者引文的出处时，可以通过 <code>&lt;cite&gt;</code> 元素。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;ol&gt;</code></td>\n<td style=\"text-align:center\">定义一个有序列表。</td>\n<td style=\"text-align:center\">表示多个有序列表项，通常渲染为有带编号的列表。允许内容：一个或多个<code>&lt;li&gt;</code>元素。这些<code>&lt;li&gt;</code>元素可以再包含嵌套的<code>&lt;ol&gt;</code>或<code>&lt;ul&gt;</code>元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;ul&gt;</code></td>\n<td style=\"text-align:center\">定义一个无序列表。</td>\n<td style=\"text-align:center\">代表多项的无序列表，即无数值排序项的集合，且它们在列表中的顺序是没有意义的。通常情况下，无序列表项的头部可以是几种形式，如一个点，一个圆形或方形。头部的风格并不是在页面的HTML描述定义, 但在其相关的CSS 可以用 list-style-type 属性。允许内容：一个或多个<code>&lt;li&gt;</code>元素。这些<code>&lt;li&gt;</code>元素可以再包含嵌套的<code>&lt;ol&gt;</code>或<code>&lt;ul&gt;</code>元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;li&gt;</code></td>\n<td style=\"text-align:center\">定义列表中的一个列表项。</td>\n<td style=\"text-align:center\">用于表示列表里的条目。它必须被包含在一个父元素里：一个有顺序的列表(<code>&lt;ol&gt;</code>)，一个无顺序的列表(<code>&lt;ul&gt;</code>)，或者一个菜单 (<code>&lt;menu&gt;</code>)。在菜单或者无顺序的列表里，列表条目通常用点排列显示。在有顺序的列表里，列表条目通常是在左边有按升序排列计数的显示，例如数字或者字母。元素类型：块级 允许内容：流式内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dl&gt;</code></td>\n<td style=\"text-align:center\">HTML <code>&lt;dl&gt;</code>元素 （或 HTML 描述列表元素）是一个包含术语定义以及描述的列表，通常用于展示词汇表或者元数据 。</td>\n<td style=\"text-align:center\">允许内容：一个或者多个<code>&lt;dt&gt;</code>元素。这些<code>&lt;dt&gt;</code>元素可以再包含嵌套的<code>&lt;dd&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dt&gt;</code></td>\n<td style=\"text-align:center\">HTML <code>&lt;dt&gt;</code> 元素 （或 HTML 术语定义元素）用于在一个定义列表中声明一个术语。该元素仅能作为 <code>&lt;dl&gt;</code> 的子元素出现。通常在该元素后面会跟着 <code>&lt;dd&gt;</code> 元素， 然而，多个连续出现的 <code>&lt;dt&gt;</code> 元素都将由出现在它们后面的第一个 <code>&lt;dd&gt;</code> 元素定义。</td>\n<td style=\"text-align:center\">允许的内容：流式内容 但是不能包含 <code>&lt;header&gt;</code> 元素、<code>&lt;footer&gt;</code> 元素或者其他章节、标题内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dd&gt;</code></td>\n<td style=\"text-align:center\">HTML <code>&lt;dd&gt;</code> 元素（HTML 描述元素）用来指明一个描述列表  (<code>&lt;dl&gt;</code>) 元素中一个术语的描述。这个元素只能作为描述列表元素的子元素出现，并且必须跟着一个 <code>&lt;dt&gt;</code> 元素。</td>\n<td style=\"text-align:center\">允许的内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;figure&gt;</code></td>\n<td style=\"text-align:center\">代表一个和文档有关的图例。</td>\n<td style=\"text-align:center\"><code>&lt;figure&gt;</code> 元素代表一段独立的内容, 经常与说明(caption) <code>&lt;figcaption&gt;</code> 配合使用, 并且作为一个独立的引用单元。当它属于主体(main flow)时，它的位置独立于主体。这个标签经常是在主文中引用的图片，插图，表格，代码段等等，当这部分转移到附录中或者其他页面时不会影响到主体。允许的内容：flow content中的<code>&lt;figcaption&gt;</code> 元素; 或者<code>&lt;figcaption&gt;</code> 元素中的flow content ; 或者 flow content.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;figcaption&gt;</code></td>\n<td style=\"text-align:center\">代表一个图例的说明。</td>\n<td style=\"text-align:center\"><code>&lt;figcaption&gt;</code> 元素 是与其相关联的图片的说明/标题，用?于描述其父节点 <code>&lt;figure&gt;</code> 元素里的其他数据。这意味着 <figcaption> 在<figure> 块里是第一个或最后一个。同时 HTML Figcaption 元素是可选的；如果没有该元素，这个父节点的图片只是会没有说明/标题。允许的内容：流式元素</figure></figcaption></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;div&gt;</code></td>\n<td style=\"text-align:center\">代表一个通用的容器，没有特殊含义。</td>\n<td style=\"text-align:center\"><code>&lt;div&gt;</code>元素 (或 HTML 文档分区元素) 是一个通用型的流内容容器，它在语义上不代表任何特定类型的内容，它可以被用来对其它元素进行分组，一般用于样式化相关的需求（使用 class 或 id 特性) 或者对具有相同特性的一组元素进行分组 (比如 lang)，它应该在没有任何其它语义元素可用时才使用 (比如 <code>&lt;article&gt;</code> 或 <code>&lt;nav&gt;</code>) 。<strong>没有默认样式!!!</strong>允许的内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">文字形式</td>\n<td style=\"text-align:center\"><code>&lt;a&gt;</code></td>\n<td style=\"text-align:center\">代表一个链接到其他资源的超链接 。</td>\n<td style=\"text-align:center\"><code>&lt;a&gt;</code> 元素  (或锚元素) 可以创建一个到其他网页、文件、同一页面内的位置、电子邮件地址或任何其他URL的超链接。允许内容：透明内容模型、流式元素、短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;em&gt;</code></td>\n<td style=\"text-align:center\">代表强调的文字。</td>\n<td style=\"text-align:center\">着重元素 (<code>&lt;em&gt;</code>) 标记出需要用户着重阅读的内容， <em> 元素是可以嵌套的，嵌套层次越深，则其包含的内容被认定为越需要着重阅读。通常展现为斜体。允许内容：短语元素</em></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;strong&gt;</code></td>\n<td style=\"text-align:center\">代表特别重要的文字。</td>\n<td style=\"text-align:center\">Strong 元素 (<code>&lt;strong&gt;</code>)表示文本十分重要，一般用粗体显示。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;small&gt;</code></td>\n<td style=\"text-align:center\">代表注释 ，如免责声明、版权声明等，对理解文档不重要。</td>\n<td style=\"text-align:center\"><code>&lt;small&gt;</code>元素將使文本的字体变小一号。(例如从大变成中等，从中等变成小，从小变成超小)。在HTML5中，除了它的样式含义，这个元素被重新定义为表示边注释和附属细则，包括版权和法律文本。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;s&gt;</code></td>\n<td style=\"text-align:center\">代表不准确或不相关 的内容。</td>\n<td style=\"text-align:center\"><code>&lt;s&gt;</code> 元素 使用删除线来渲染文本。使用 <s> 元素来表示不再相关，或者不再准确的事情。但是当表示文档编辑时，不提倡使用 <s> ；为此，提倡使用 <code>&lt;del&gt;</code> 和 <code>&lt;ins&gt;</code> 元素。允许的内容：短语元素</s></s></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;cite&gt;</code></td>\n<td style=\"text-align:center\">代表作品标题。</td>\n<td style=\"text-align:center\">HTML引用（Citation）标签 (<cite>) 表示一个作品的引用。它必须包含引用作品的符合简写格式的标题或者URL，它可能是一个根据添加引用元数据的约定的简写形式。允许内容：流式元素、短语元素</cite></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;q&gt;</code></td>\n<td style=\"text-align:center\">代表内联的引用 。</td>\n<td style=\"text-align:center\">引用标签 (<code>&lt;q&gt;</code>)表示一个封闭的并且是短的行内引用的文本. 这个标签是用来引用短的文本，所以请不要引入换行符; 对于长的文本的引用请使用 <code>&lt;blockquote&gt;</code> 替代。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;dfn&gt;</code></td>\n<td style=\"text-align:center\">代表一个术语包含在其最近祖先内容中的定义 。</td>\n<td style=\"text-align:center\">定义元素 (<code>&lt;dfn&gt;</code>) 表示术语的一个定义。<code>&lt;dfn&gt;</code> 元素标记了被定义的术语；术语定义应当在 <code>&lt;p&gt;</code>, <code>&lt;section&gt;</code>或定义列表 (通常是<code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code> 对)中给出。被定义术语的值由下列规则确定：如果 <code>&lt;dfn&gt;</code> 元素有一个 title 属性，那么该术语的值就是该属性的值。否则，如果它仅包含一个 <code>&lt;abbr&gt;</code> 元素，该元素拥有 title 属性，那么该术语的值就是该属性的值。否则，<code>&lt;dfn&gt;</code> 元素的文本内容就是该术语的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;abbr&gt;</code></td>\n<td style=\"text-align:center\">代表省略或缩写，其完整内容在 title 属性中。</td>\n<td style=\"text-align:center\">允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;data&gt;</code></td>\n<td style=\"text-align:center\">关联一个内容的机器可读的等价形式 （该元素只在 WHATWG 版本的 HTML 标准中，不在 W3C 版本的 HTML5 标准中）。</td>\n<td style=\"text-align:center\"><data> 元素 将一个指定内容和机器可读的翻译联系在一起。但如果内容是与 time 或者 date 相关的，一定要使用 <code>&lt;time&gt;</code>。允许内容：短语元素</data></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;time&gt;</code></td>\n<td style=\"text-align:center\">代表日期 和时间 值；机器可读的等价形式通过 datetime 属性指定。</td>\n<td style=\"text-align:center\">time 标签(<code>&lt;time&gt;</code>) 用来表示24小时制时间或者公历日期，若表示日期则也可包含时间和时区。此元素意在以机器可读的格式表示日期和时间。 有安排日程表功能的应用可以利用这一点。允许内容：短语元素，但不能包含time元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;code&gt;</code></td>\n<td style=\"text-align:center\">代表计算机代码 。</td>\n<td style=\"text-align:center\"><code> 元素呈现一段计算机代码. 默认情况下, 它以浏览器的默认等宽字体显示。允许元素：短语元素</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;var&gt;</code></td>\n<td style=\"text-align:center\">代表代码中的变量 。</td>\n<td style=\"text-align:center\"><var> 标签表示变量的名称，或者由用户提供的值。允许元素：短语元素</var></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;samp&gt;</code></td>\n<td style=\"text-align:center\">代表程序或电脑的输出 。</td>\n<td style=\"text-align:center\"><code>&lt;samp&gt;</code> 元素用于标识计算机程序输出，通常使用浏览器默认的 monotype 字体。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;kbd&gt;</code></td>\n<td style=\"text-align:center\">代表用户输入 ，一般从键盘输出，但也可以代表其他输入，如语音输入。</td>\n<td style=\"text-align:center\">键盘输入元素(<code>&lt;kbd&gt;</code>) 用于表示用户输入，它将产生一个行内元素，以浏览器的默认monospace字体显示。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;sub&gt;,&lt;sup&gt;</code></td>\n<td style=\"text-align:center\">分别代表下标 和上标 。</td>\n<td style=\"text-align:center\"><code>&lt;sub&gt;</code> 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更低并且更小。<code>&lt;sup&gt;</code> 元素定义了一个文本区域，出于排版的原因，与主要的文本相比，应该展示得更高并且更小。允许内容：短语元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;i&gt;</code></td>\n<td style=\"text-align:center\">代表一段不同性质 的文字，如技术术语、外文短语等。</td>\n<td style=\"text-align:center\"><i> 用于表现因某些原因需要区分普通文本的一系列文本。例如技术术语、外文短语或是小说中人物的思想活动等，它的内容通常以斜体显示。允许内容：短语元素</i></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;b&gt;</code></td>\n<td style=\"text-align:center\">代表一段需要被关注 的文字。</td>\n<td style=\"text-align:center\">提醒注意（Bring Attention To）元素（<code>&lt;b&gt;</code>）用于吸引读者的注意到该元素的内容上（如果没有另加特别强调）。这个元素过去被认为是粗体（Boldface）元素，并且大多数浏览器仍然将文字显示为粗体。尽管如此，你不应将 <code>&lt;b&gt;</code> 元素用于显示粗体文字；替代方案是使用 CSS font-weight 属性来创建粗体文字。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;u&gt;</code></td>\n<td style=\"text-align:center\">代表一段需要下划线呈现的文本注释，如标记出拼写错误的文字等。</td>\n<td style=\"text-align:center\"><code>&lt;u&gt;</code> 元素使文本在其内容的基线下的一行呈现下划线。在HTML5中, 此元素表示具有未标注的文本跨度，显示渲染，非文本注释，例如将文本标记为中文文本中的专有名称(一个正确的中文标记), 或 将文本标记为拼写错误。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;mark&gt;</code></td>\n<td style=\"text-align:center\">代表一段需要被高亮的引用的文字。</td>\n<td style=\"text-align:center\">可以用来显示搜索引擎的关键词，允许的内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;ruby&gt;</code></td>\n<td style=\"text-align:center\">代表被ruby 注释 标记的文本，如中文汉字和它的拼音。</td>\n<td style=\"text-align:center\"><ruby> 元素 被用来展示东亚文字注音或字符注释。允许内容：短语元素</ruby></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;rt&gt;</code></td>\n<td style=\"text-align:center\">代表ruby 注释 ，如中文拼音。</td>\n<td style=\"text-align:center\">Ruby 文本 (<rt>) 元素包含字符的发音，字符在 ruby 注解中出现，它用于描述东亚字符的发音。这个元素始终在 <ruby> 元素中使用。允许内容：短语元素</ruby></rt></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;rp&gt;</code></td>\n<td style=\"text-align:center\">代表 ruby 注释两边的额外插入文本 ，用于在不支持 ruby 注释显示的浏览器中提供友好的注释显示。</td>\n<td style=\"text-align:center\"><rp> 元素用于为那些不能使用 <ruby> 元素展示 ruby 注解的浏览器，提供随后的圆括号。允许的内容：短语元素</ruby></rp></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;bdi&gt;</code></td>\n<td style=\"text-align:center\">代表需要脱离 父元素文本方向的一段文本。它允许嵌入一段不同或未知文本方向格式的文本。</td>\n<td style=\"text-align:center\"><code>&lt;bdi&gt;</code> 元素 (双向隔离元素) 会隔离可能以不同方向进行格式化的外部文本。当不知道是从什么方向嵌入文本，如来自于数据库的文本（有起数据库的文本方向）的时候，该元素是十分有用的。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;span&gt;</code></td>\n<td style=\"text-align:center\">代表一段没有特殊含义的文本，当其他语义元素都不适合文本时候可以使用该元素。</td>\n<td style=\"text-align:center\"><code>&lt;span&gt;</code> 元素是短语内容的通用行内容器，并没有任何特殊语义。可以使用它来编组元素以达到某种样式意图（通过使用类或者Id属性），或者这些元素有着共同的属性，比如lang。应该在没有其他合适的语义元素时才使用它。<code>&lt;span&gt;</code> 与 <code>&lt;div&gt;</code> 元素很相似，但 <code>&lt;div&gt;</code> 是一个 块元素 而 <code>&lt;span&gt;</code> 则是 行内元素。<strong>没有默认样式没有默认样式！！！</strong>允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;br&gt;</code></td>\n<td style=\"text-align:center\">代表换行。</td>\n<td style=\"text-align:center\"><code>&lt;br&gt;</code> 元素在文本中生成一个换行（回车）符号。此元素在写诗和地址时很有用，这些地方的换行都非常重要。允许内容：无，这是一个空元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;wbr&gt;</code></td>\n<td style=\"text-align:center\">代表建议换行 (Word Break Opportunity) ，当文本太长需要换行时将会在此处添加换行符。</td>\n<td style=\"text-align:center\"><wbr> 元素  — 一个文本中的位置，其中浏览器可以选择来换行，虽然它的换行规则可能不会在这里换行。允许内容：无，这是一个空元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">编辑</td>\n<td style=\"text-align:center\"><code>&lt;ins&gt;</code></td>\n<td style=\"text-align:center\">定义增加到文档的内容。</td>\n<td style=\"text-align:center\"><code>&lt;ins&gt;</code> 元素定义已经被插入文档中的文本。允许内容：透明内容模型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;del&gt;</code></td>\n<td style=\"text-align:center\">定义从文档移除 的内容。</td>\n<td style=\"text-align:center\"><code>&lt;del&gt;</code>标签表示一些被从文档中删除的文字内容。比如可以在需要显示修改记录或者源代码差异的情况使用这个标签。<code>&lt;ins&gt;</code>标签的作用恰恰于此相反：表示文档中添加的内容。这个标签通常（但不一定要）在文字上显示删除线。允许内容：透明内容模型</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">嵌入内容</td>\n<td style=\"text-align:center\"><code>&lt;img&gt;</code></td>\n<td style=\"text-align:center\">代表一张图片 。</td>\n<td style=\"text-align:center\">允许内容：无 这是一个空元素 有始无终 父元素：接受嵌入式内容的任意元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;iframe&gt;</code></td>\n<td style=\"text-align:center\">代表一个内联的框架 。</td>\n<td style=\"text-align:center\">内联框架元素 <code>&lt;iframe&gt;</code> 表示嵌套的浏览上下文，有效地将另一个HTML页面嵌入到当前页面中。在HTML 4.01中，文档可能包含头部和正文，或头部和框架集，但不能包含正文和框架集。但是，<code>&lt;iframe&gt;</code>可以在正常的文档主体中使用。每个浏览上下文都有自己的会话历史记录和活动文档。包含嵌入内容的浏览上下文称为父浏览上下文。顶级浏览上下文（没有父级）通常是浏览器窗口。允许元素：流式元素、短语元素、嵌入元素、。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;embed&gt;</code></td>\n<td style=\"text-align:center\">代表一个嵌入 的外部资源，如应用程序或交互内容。</td>\n<td style=\"text-align:center\"><code>&lt;embed&gt;</code>元素将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。允许内容：流式元素、短语元素、嵌入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;object&gt;</code></td>\n<td style=\"text-align:center\">代表一个外部资源 ，如图片、HTML 子文档、插件等。</td>\n<td style=\"text-align:center\"><code>&lt;object&gt;</code> 元素（或者称作 HTML 嵌入对象元素）表示引入一个外部资源，这个资源可能是一张图片，一个嵌入的浏览上下文，亦或是一个插件所使用的资源。允许内容：流式元素、短语元素、嵌入元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;param&gt;</code></td>\n<td style=\"text-align:center\"><code>&lt;param&gt;</code>元素(或 HTML Parameter 元素) 定义了 <code>&lt;object&gt;</code>的参数</td>\n<td style=\"text-align:center\">允许内容：空元素 有始无终</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;video&gt;</code></td>\n<td style=\"text-align:center\">代表一段视频 及其视频文件和字幕，并提供了播放视频的用户界面。</td>\n<td style=\"text-align:center\"><code>&lt;video&gt;</code> 元素 用于在HTML或者XHTML文档中嵌入视频内容。允许内容：流式元素，包含任一 src 属性或是一个或多个 <code>&lt;source&gt;</code> 元素，其后紧跟流式元素 或 短语元素 ， 不包括<code>&lt;video&gt;</code> 或者 <code>&lt;audio&gt;</code> 元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;audio&gt;</code></td>\n<td style=\"text-align:center\">代表一段声音 ，或音频流 。</td>\n<td style=\"text-align:center\"><code>&lt;audio&gt;</code> 元素用于在文档中表示音频内容。 <code>&lt;audio&gt;</code> 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者<code>&lt;source&gt;</code> 元素来进行描述； 浏览器将会选择最合适的一个来使用。对于不支持<code>&lt;audio&gt;</code>元素的浏览器，<code>&lt;audio&gt;</code>元素也可以作为浏览器不识别的内容加入到文档中。允许内容：如果元素包含 src 属性：零个或多个 <code>&lt;track&gt;</code> 元素，其后紧跟不包含 <code>&lt;audio&gt;</code> 或者 <code>&lt;video&gt;</code>媒体元素的透明内容。或者：零个或多个 <code>&lt;source&gt;</code> 元素，其后紧跟零个或多个 <code>&lt;track&gt;</code> 元素，其后紧跟不包含 <code>&lt;audio&gt;</code> 或者 <code>&lt;video&gt;</code>媒体元素的透明内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;source&gt;</code></td>\n<td style=\"text-align:center\">为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定媒体源 。</td>\n<td style=\"text-align:center\">允许内容：一个 <code>&lt;picture&gt;</code> 元素, 且在<code>&lt;img&gt;</code>元素之前</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;track&gt;</code></td>\n<td style=\"text-align:center\">为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定文本轨道（字幕） 。</td>\n<td style=\"text-align:center\"><code>&lt;track&gt;</code> 元素 被当作媒体元素—<code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code>的子元素来使用。它允许指定计时字幕（或者基于事件的数据），例如自动处理字幕。track 给媒体元素添加的数据的类型在 kind 属性中设置，属性值可以是<code>subtitles</code>, <code>captions</code>, <code>descriptions</code>, <code>chapters</code> 或 <code>metadata</code>。该元素指向当用户请求额外的数据时浏览器公开的包含定时文本的源文件。一个<code>media</code> 元素的任意两个 <code>track</code> 子元素不能有相同的 <code>kind</code>, <code>srclang</code>, 和 <code>label</code>属性。允许内容：空，这是一个空元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;canvas&gt;</code></td>\n<td style=\"text-align:center\">代表位图区域 ，可以通过脚本在它上面实时呈现图形，如图表、游戏绘图等。</td>\n<td style=\"text-align:center\"><code>&lt;canvas&gt;</code>元素可被用来通过脚本（通常是JavaScript）绘制图形。比如,它可以被用来绘制图形,制作图片集合,甚至用来实现动画效果。你可以(也应该)在元素标签内写入可提供替代的的代码内容，这些内容将会在在旧的、不支持<code>&lt;canvas&gt;</code>元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;map&gt;</code></td>\n<td style=\"text-align:center\">与 <code>&lt;area&gt;</code> 元素共同定义图像映射 区域。</td>\n<td style=\"text-align:center\"><map> 属性 与 <area> 属性一起使用来定义一个图像映射(一个可点击的链接区域).允许内容：任何透明元素模型</map></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;area&gt;</code></td>\n<td style=\"text-align:center\">与 <map> 元素共同定义图像映射 区域。</map></td>\n<td style=\"text-align:center\"><area> 元素 在图片上定义一个热点区域，可以关联一个超链接。<area>元素仅在<map>元素内部使用。允许内容：空，这是一个空元素 有始无终</map></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;svg&gt;</code></td>\n<td style=\"text-align:center\">定义一个嵌入式矢量图 。</td>\n<td style=\"text-align:center\">如果svg不是根元素，svg 元素可以用于在当前文档（比如说，一个HTML文档）内嵌套一个独立的svg片段。这个独立片段拥有独立的视口和坐标系统。允许内容：任意数量、任意排序的下列元素：动画元素；描述性元素；形状元素；结构化元素；渐变元素；<code>&lt;a&gt;, &lt;altGlyphDef&gt;, &lt;clipPath&gt;, &lt;color-profile&gt;, &lt;cursor&gt;, &lt;filter&gt;, &lt;font&gt;, &lt;font-face&gt;, &lt;foreignObject&gt;, &lt;image&gt;, &lt;marker&gt;, &lt;mask&gt;, &lt;pattern&gt;, &lt;script&gt;, &lt;style&gt;, &lt;switch&gt;, &lt;text&gt;, &lt;view&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;math&gt;</code></td>\n<td style=\"text-align:center\">定义一段数学公式 。</td>\n<td style=\"text-align:center\">MathML的顶级元素是<code>&lt;math&gt;</code>。所有有效的MathML实例必须被包括在 <code>&lt;math&gt;</code> 标记中。另外不可以在一个 <code>&lt;math&gt;</code> 元素中嵌套第二个<code>&lt;math&gt;</code> 元素，但是 <code>&lt;math&gt;</code> 元素中可以有任意多的子元素 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表格</td>\n<td style=\"text-align:center\"><code>&lt;table&gt;</code></td>\n<td style=\"text-align:center\">定义多维数据 。</td>\n<td style=\"text-align:center\">在 CSS 创建之前， HTML <code>&lt;table&gt;</code> 元素常常被用于布局页面。 这种用法在 HTML 4之后不被推荐使用，并且 <code>&lt;table&gt;</code>元素 不应该 被用于此目的。允许内容：按照这个顺序：一个可选的 <code>&lt;caption&gt;</code> 元素；零个或多个的 <code>&lt;colgroup&gt;</code> 元素；一个可选的 <code>&lt;thead&gt;</code> 元素；一个可选的 <code>&lt;tfoot&gt;</code> 元素（tfoot元素出现在tbody或tr元素前后都可以。在HTML4中，它只能出现在这些元素之前）；零个或多个 <code>&lt;tbody&gt;</code> 元素；一个或多个 <code>&lt;tr&gt;</code> 元素；</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;caption&gt;</code></td>\n<td style=\"text-align:center\">代表表格的标题。</td>\n<td style=\"text-align:center\"><code>&lt;caption&gt;</code> 元素 (or HTML 表格标题元素) 展示一个表格的标题， 它常常作为 <code>&lt;table&gt;</code> 的第一个子元素出现，同时显示在表格内容的最前面，但是，它同样可以被CSS样式化，所以，它同样可以出现在任何一个一个相对于表格的做任意位置。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;colgroup&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一组单列或多列。</td>\n<td style=\"text-align:center\">表格列组（Column Group <code>&lt;colgroup&gt;</code>） 标签用来定义表中的一组列表。若<code>span</code>属性为<code>present</code>: 那它就是一个空属性。如果属性不是<code>present</code>内容为：零或多个<code>&lt;col&gt;</code>属性</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;col&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的列。</td>\n<td style=\"text-align:center\"><code>&lt;col&gt;</code> 元素 定义表格中的列，并用于定义所有公共单元格上的公共语义。它通常位于<colgroup>元素内。允许内容：这是一个空元素有始无终</colgroup></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;tbody&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一块具体数据 （表格主体）。</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;tr&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;thead&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一块列标签（表头）。</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;tr&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;tfoot&gt;</code></td>\n<td style=\"text-align:center\">代表表格中一块列摘要（表尾）</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;tr&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;tr&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的行 。</td>\n<td style=\"text-align:center\">允许内容：零或多个<code>&lt;td&gt;</code>或<code>&lt;th&gt;</code>元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;td&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的单元格 。</td>\n<td style=\"text-align:center\">允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;th&gt;</code></td>\n<td style=\"text-align:center\">代表表格中的头部单元格 。</td>\n<td style=\"text-align:center\">允许内容：流内容（除header、footer、sectioning content或heading content的继承。）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">表单</td>\n<td style=\"text-align:center\"><code>&lt;form&gt;</code></td>\n<td style=\"text-align:center\">代表一个表单 ，由控件组成。</td>\n<td style=\"text-align:center\"><form> 元素 表示了文档中的一个区域，这个区域包含有交互控制元件，用来向web服务器提交信息。可以用 <code>:valid</code>和<code>:invalid</code> CSS 伪类 来给一个元素指定样式。允许内容：流式元素</form></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;fieldset&gt;</code></td>\n<td style=\"text-align:center\">代表控件组 。</td>\n<td style=\"text-align:center\"><code>fieldset</code>元素通常用来对表单中的控制元素进行分组(也包括 label 元素)允许内容：一个可选的<code>&lt;legend&gt;</code>元素，后面跟流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;legend&gt;</code></td>\n<td style=\"text-align:center\">代表 <code>&lt;fieldset&gt;</code> 控件组的标题。</td>\n<td style=\"text-align:center\"><code>&lt;legend&gt;</code>元素（也称为HTML的域说明元素（or HMTL Legend Field Element））代表一个用于表示它的父元素<code>&lt;fieldset&gt;</code>的内容的标题。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;label&gt;</code></td>\n<td style=\"text-align:center\">代表表单控件的标题。## II.元素</td>\n<td style=\"text-align:center\">它通常关联一个控件，或者是将控件放置在label元素内，或者是用作其属性。这样的控制称作label元素的labeled control。允许内容：没有后代<code>label</code>元素的短语元素。除了标记控制之外，不允许使用其他可标记的元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;button&gt;</code></td>\n<td style=\"text-align:center\">代表按钮。</td>\n<td style=\"text-align:center\"><code>&lt;button&gt;</code> 元素表示一个可点击的按钮，可以用在表单或文档其它需要使用简单标准按钮的地方。 默认情况下，HTML按钮的显示样式接近于 user agent 所在的宿主系统平台（用户操作系统）的按钮， 但你可以使用 CSS 来改变按钮的样貌。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;select&gt;</code></td>\n<td style=\"text-align:center\">代表下拉框。</td>\n<td style=\"text-align:center\"><code>&lt;select&gt;</code> 元素是一种表单控件，可创建选项菜单。菜单内的选项为<code>&lt;option&gt;</code> , 可以由 <code>&lt;optgroup&gt;</code> 元素分组。选项可以被用户预先选择。允许内容：0个或多个 <code>&lt;option&gt;</code> 或者 <code>&lt;optgroup&gt;</code> 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;datalist&gt;</code></td>\n<td style=\"text-align:center\">代表提供给其他控件的一组预定义选项 。</td>\n<td style=\"text-align:center\">Datalist 元素 (<code>&lt;datalist&gt;</code>) 包含了一组<option>元素,这些元素表示其它表单控件可选值。允许内容：要么短语元素 要么 0个或多个 <code>&lt;option&gt;</code>元素.</option></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;optgroup&gt;</code></td>\n<td style=\"text-align:center\">代表一个选项分组。</td>\n<td style=\"text-align:center\">在一个web表单中, HTML元素<code>&lt;optgroup&gt;</code>会创建包含在一个 <code>&lt;select&gt;</code> 元素中的一组选项。允许内容：0或多个 <code>&lt;option&gt;</code> 元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;option&gt;</code></td>\n<td style=\"text-align:center\">代表一个 <code>&lt;select&gt;</code> 元素或 <code>&lt;datalist&gt;</code> 元素中的一个选项</td>\n<td style=\"text-align:center\">HTML元素 <code>&lt;option&gt;</code>  用于定义在<code>&lt;select&gt;</code>,  <code>&lt;optgroup&gt;</code> 或<code>&lt;datalist&gt;</code> 元素中包含的项。<code>&lt;option&gt;</code> 可以在弹出窗口和 html 文档中的其他项目列表中表示菜单项。允许内容：带有最终转义字符（例如 <code>&amp;eacute;</code>）的文本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;textarea&gt;</code></td>\n<td style=\"text-align:center\">代表多行文本框 。</td>\n<td style=\"text-align:center\"><code>&lt;textarea&gt;</code> 元素表示一个多行纯文本编辑控件。 允许内容：文字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;keygen&gt;</code></td>\n<td style=\"text-align:center\">代表一个密钥对生成器。</td>\n<td style=\"text-align:center\">尽量不要使用了，该特性已从Web标准中删除。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;output&gt;</code></td>\n<td style=\"text-align:center\">代表计算值。</td>\n<td style=\"text-align:center\"><code>&lt;output&gt;</code> 标签表示计算或用户操作的结果。允许内容：短语元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;progress&gt;</code></td>\n<td style=\"text-align:center\">代表进度条 。</td>\n<td style=\"text-align:center\">progress (<code>&lt;progress&gt;</code>) 元素用来显示一项任务的完成进度.虽然规范中没有规定该元素具体如何显示,浏览器开发商可以自己决定,但通常情况下,该元素都显示为一个进度条形式。允许内容：流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;meter&gt;</code></td>\n<td style=\"text-align:center\">代表滑动条。</td>\n<td style=\"text-align:center\"><code>&lt;meter&gt;</code>元素用来显示已知范围的标量值或者分数值。允许内容：短语元素，但不允许有<meter>元素作为其子元素。</meter></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">交互元素</td>\n<td style=\"text-align:center\"><code>&lt;details&gt;</code></td>\n<td style=\"text-align:center\">代表一个用户可以(点击)获取额外信息或控件的小部件。</td>\n<td style=\"text-align:center\"><code>&lt;details&gt;</code> 元素被用作发现小部件，用户可以从其中检索附加信息。允许内容：<code>&lt;summary&gt;</code>后紧跟流式元素</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;summary&gt;</code></td>\n<td style=\"text-align:center\">代表 <code>&lt;details&gt;</code> 元素的综述或标题。</td>\n<td style=\"text-align:center\"><summary> 元素 用作 一个<code>&lt;details&gt;</code>元素的一个内容的摘要，标题或图例。如果 <code>&lt;summary&gt;</code> 元素在浏览器内不能被正确解析和渲染,，则会展示<code>&lt;details&gt;</code>标签内的其他内容。</summary></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;menuitem&gt;</code></td>\n<td style=\"text-align:center\">代表一个用户可以点击的菜单项。</td>\n<td style=\"text-align:center\">用户可以通过HTML的 <code>&lt;menuitem&gt;</code> 标签生成一个弹出式菜单。这包括上下文菜单，以及按钮可能附带的菜单。这个标签可以被显式定义，带有文本标签和可选图标来描述其外观，或者作为一个间接命令，其行为由一个单独的元素定义。命令还可以选择包含复选框或分组共享单选按钮。（<code>&lt;input type=&quot;checkbox&quot;&gt;</code> 和 <code>&lt;input type=&quot;radio&quot;&gt;</code>.)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"><code>&lt;menu&gt;</code></td>\n<td style=\"text-align:center\">代表菜单。</td>\n<td style=\"text-align:center\">HTML <menu> 元素 呈现了一组用户可执行或激活的命令。这既包含了可能出现在屏幕顶端的列表菜单，也包含了那些隐藏在按钮之下、当点击按钮后显示出来的文本菜单。使用说明:  <code>&lt;menu&gt;</code> 和 <code>&lt;ul&gt;</code> 元素都呈现了无序列表元素。最主要的区别是 <code>&lt;ul&gt;</code> 主要是为了展示选项，而 <code>&lt;menu&gt;</code> 则是为了交互。允许内容：如果元素位于列表菜单内：流式元素；或者零个或多个活动的 <code>&lt;li&gt;</code>, <code>&lt;script&gt;</code>和<code>&lt;template&gt;</code>二选一。如果元素位于右键菜单（上下文菜单）：零个或多个事件，任何顺序中，<code>&lt;menu&gt;</code>(仅上下文菜单) <code>&lt;menuitem&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;template&gt;</code>。</menu></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 id=\"II-元素内容类型\"><a href=\"#II-元素内容类型\" class=\"headerlink\" title=\"II.元素内容类型\"></a>II.元素内容类型</h3><p>每一个HTML元素都必须遵循定义了它可以包含哪一类内容的规则。 这些规则被归类为几个常见的元素内容模型（content model）。每个HTML元素都属于0个、1 个或多个内容模型，每个模型都有一些规则使得元素中的内容必须遵循一个HTML规范文档( HTML-conformant document)。</p>\n<p>以下是三种类型的内容分类：</p>\n<p>主内容类，描述了很多元素共享的内容规范；<br>表单相关的内容类，描述了表单相关元素共有的内容规范；<br>特殊内容类，描述了仅仅在某些特殊元素上才需要遵守的内容规范，通常这些元素都有特殊的上下文关系。</p>\n<h4 id=\"i-元数据内容（Metadata-content）\"><a href=\"#i-元数据内容（Metadata-content）\" class=\"headerlink\" title=\"i.元数据内容（Metadata content）\"></a>i.元数据内容（Metadata content）</h4><p>此类元素 修改文档其余部分的陈述或者行为，建立与其他文档的链接，或者传达其他外带信息。<br>属于这一类的元素有：<code>&lt;base&gt;, &lt;command&gt;, &lt;link&gt;, &lt;meta&gt;, &lt;noscript&gt;, &lt;script&gt;, &lt;style&gt; and &lt;title&gt;.</code></p>\n<h4 id=\"ii-流式元素（Flow-content）\"><a href=\"#ii-流式元素（Flow-content）\" class=\"headerlink\" title=\"ii.流式元素（Flow content）\"></a>ii.流式元素（Flow content）</h4><p>此类元素通常包含 文本或植入的内容。此类元素有：<code>&lt;a&gt;, &lt;abbr&gt;, &lt;address&gt;, &lt;article&gt;, &lt;aside&gt;, &lt;audio&gt;, &lt;b&gt;,&lt;bdo&gt;, &lt;bdi&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;button&gt;, &lt;canvas&gt;, &lt;cite&gt;, &lt;code&gt;, &lt;command&gt;, &lt;data&gt;, &lt;datalist&gt;, &lt;del&gt;, &lt;details&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;dl&gt;, &lt;em&gt;, &lt;embed&gt;, &lt;fieldset&gt;, &lt;figure&gt;, &lt;footer&gt;, &lt;form&gt;, &lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;, &lt;header&gt;, &lt;hgroup&gt;, &lt;hr&gt;, &lt;i&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input&gt;, &lt;ins&gt;, &lt;kbd&gt;, &lt;keygen&gt;, &lt;label&gt;, &lt;main&gt;, &lt;map&gt;, &lt;mark&gt;, &lt;math&gt;, &lt;menu&gt;, &lt;meter&gt;, &lt;nav&gt;, &lt;noscript&gt;, &lt;object&gt;, &lt;ol&gt;, &lt;output&gt;, &lt;p&gt;, &lt;pre&gt;, &lt;progress&gt;, &lt;q&gt;, &lt;ruby&gt;, &lt;s&gt;, &lt;samp&gt;, &lt;script&gt;, &lt;section&gt;, &lt;select&gt;, &lt;small&gt;, &lt;span&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;svg&gt;, &lt;table&gt;, &lt;template&gt;, &lt;textarea&gt;, &lt;time&gt;, &lt;ul&gt;, &lt;var&gt;, &lt;video&gt;, &lt;wbr&gt;</code> 以及 Text.</p>\n<p>属于此类的少数其他元素（仅限于某种特殊情形，这些元素才会属于此类）：<br><code>&lt;area&gt;</code>, 仅限于它作为<map>的子节点的情形<br><code>&lt;link&gt;</code>, 仅限于itemprop属性存在的情形<br><code>&lt;meta&gt;</code>, 仅限于itemprop属性存在的情形<br><code>&lt;style&gt;</code>, 仅限于 scoped属性存在的情形</map></p>\n<h4 id=\"iii-章节元素（Sectioning-content）\"><a href=\"#iii-章节元素（Sectioning-content）\" class=\"headerlink\" title=\"iii.章节元素（Sectioning content）\"></a>iii.章节元素（Sectioning content）</h4><p>隶属于分节内容模型的元素 在当前的大纲中创建一个分节，此分节将定义<code>&lt;header&gt;</code>元素、<code>&lt;footer&gt;</code>元素和标题元素（heading content）的范围。<br>属于此类的元素有： <code>&lt;article&gt;, &lt;aside&gt;, &lt;nav&gt; and &lt;section&gt;</code>. </p>\n<h4 id=\"iv-标题元素（Heading-content）\"><a href=\"#iv-标题元素（Heading-content）\" class=\"headerlink\" title=\"iv.标题元素（Heading content）\"></a>iv.标题元素（Heading content）</h4><p>标题内容 定义了分节的标题，而这个分节可能由一个明确的分节内容元素直接标记，也可能由标题本身隐式地定义。<br>属于此分类的元素有： <code>&lt;h1&gt;, &lt;h2&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;h5&gt;, &lt;h6&gt;</code> and <code>&lt;hgroup&gt;</code>.</p>\n<h4 id=\"v-短语元素（Phrasing-content）\"><a href=\"#v-短语元素（Phrasing-content）\" class=\"headerlink\" title=\"v.短语元素（Phrasing content）\"></a>v.短语元素（Phrasing content）</h4><p>短语元素（Phrasing content） 规定文本和它包含的标记。 一些Phrasing content就构成了段落.<br>属于此类的元素有： <code>&lt;abbr&gt;, &lt;audio&gt;, &lt;b&gt;, &lt;bdo&gt;, &lt;br&gt;, &lt;button&gt;, &lt;canvas&gt;, &lt;cite&gt;, &lt;code&gt;, &lt;command&gt;, &lt;datalist&gt;, &lt;dfn&gt;, &lt;em&gt;, &lt;embed&gt;, &lt;i&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input&gt;, &lt;kbd&gt;, &lt;keygen&gt;, &lt;label&gt;, &lt;mark&gt;, &lt;math&gt;, &lt;meter&gt;, &lt;noscript&gt;, &lt;object&gt;, &lt;output&gt;, &lt;progress&gt;, &lt;q&gt;, &lt;ruby&gt;, &lt;samp&gt;, &lt;script&gt;, &lt;select&gt;, &lt;small&gt;, &lt;span&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;svg&gt;, &lt;textarea&gt;, &lt;time&gt;, &lt;var&gt;, &lt;video&gt;, &lt;wbr&gt;</code> 和 plain text (仅当所包含的内容不完全为空字符的时候).<br>一些其他的元素也属于这个分类，但是只有当如下特殊情况时才会实现:<br><code>&lt;a&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;area&gt;</code>, 当它为<code>&lt;map&gt;</code> 元素的子元素时<br><code>&lt;del&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;ins&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;link&gt;</code>, 如果itemprop属性存在的情形<br><code>&lt;map&gt;</code>, 当它仅包含 phrasing content 时<br><code>&lt;meta&gt;</code>,如果itemprop属性存在的情形</p>\n<h4 id=\"vi-嵌入元素（Embedded-content）\"><a href=\"#vi-嵌入元素（Embedded-content）\" class=\"headerlink\" title=\"vi.嵌入元素（Embedded content）\"></a>vi.嵌入元素（Embedded content）</h4><p>Embedded content输入另一个资源或者将来自另一种标记语言或命名空间的内容插入到文档中。<br>属于此类的元素有：<code>&lt;audio&gt;, &lt;canvas&gt;, &lt;embed&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;math&gt;, &lt;object&gt;, &lt;svg&gt;, &lt;video&gt;</code>.</p>\n<h4 id=\"vii-交互元素（Interactive-content）\"><a href=\"#vii-交互元素（Interactive-content）\" class=\"headerlink\" title=\"vii.交互元素（Interactive content）\"></a>vii.交互元素（Interactive content）</h4><p>交互式内容包含为用户交互而特别设计的元素。<br>属于此类的元素有：<code>&lt;a&gt;，&lt;button&gt;，&lt;details&gt;，&lt;embed&gt;，&lt;iframe&gt;，&lt;keygen&gt;，&lt;label&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>。<br>仅在特殊情形下才会属于此类的元素有:<br><code>&lt;audio&gt;</code>, 若controls属性存在<br><code>&lt;img&gt;</code>, 若usemap属性存在<br><code>&lt;input&gt;</code>, 若type属性不处于隐藏（hidden）状态<br><code>&lt;menu&gt;</code>, 若type属性处于工具栏（toolbar）状态<br><code>&lt;object&gt;</code>, 若usemap属性存在<br><code>&lt;video&gt;</code>, 若controls属性存在</p>\n<h4 id=\"viii-表单相关内容（Form-associated-content）\"><a href=\"#viii-表单相关内容（Form-associated-content）\" class=\"headerlink\" title=\"viii.表单相关内容（Form-associated content）\"></a>viii.表单相关内容（Form-associated content）</h4><p>表单相关的内容 包含 拥有表单父节点（exposed by a form attribute）的元素，一个表单父节点可以是<code>&lt;form&gt;</code>元素，也可以是其id在表单属性中被指定了的元素。（Form-associated content comprises elements that have a form owner, exposed by a form attribute. A form owner is either the containing <code>&lt;form&gt;</code> element or the element whose id is specified in the form attribute.）<br><code>&lt;button&gt;</code><br><code>&lt;fieldset&gt;</code><br><code>&lt;input&gt;</code><br><code>&lt;keygen&gt;</code><br><code>&lt;label&gt;</code><br><code>&lt;meter&gt;</code><br><code>&lt;object&gt;</code><br><code>&lt;output&gt;</code><br><code>&lt;progress&gt;</code><br><code>&lt;select&gt;</code><br><code>&lt;textarea&gt;</code><br> 此类包含了几个子类：<br><strong>可列举的元素（listed）</strong><br>在 form.elements 和 fieldset.elements IDL collections中列举出的元素. 包括 <code>&lt;button&gt;，&lt;fieldset&gt;，&lt;input&gt;，&lt;keygen&gt;，&lt;object&gt;，&lt;output&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>。<br><strong>可标签的元素（labelable）</strong><br>和 <code>&lt;label&gt;</code> 相关联的元素。包括 <code>&lt;button&gt;，&lt;input&gt;，&lt;keygen&gt;，&lt;meter&gt;，&lt;output&gt;，&lt;progress&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>。<br><strong>可提交的元素（submittable）</strong><br>包括当表单提交时可以用来组成表单数据的元素。 包括 <code>&lt;button&gt;，&lt;input&gt;，&lt;keygen&gt;，&lt;object&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>.<br><strong>可重置的元素（resettable）</strong><br>当表单重置时会被重置的元素。包括 <code>&lt;input&gt;，&lt;keygen&gt;，&lt;output&gt;，&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>.</p>\n<h4 id=\"ix-透明内容模型（Transparent-content-model）\"><a href=\"#ix-透明内容模型（Transparent-content-model）\" class=\"headerlink\" title=\"ix.透明内容模型（Transparent content model）\"></a>ix.透明内容模型（Transparent content model）</h4><p>如果一个元素拥有 transparent content mode， 即使将透明内容更换为子元素，其内容必须由合法的HTML5元素组成。<br>例如，<code>&lt;del&gt;</code> 和 <code>&lt;ins&gt;</code> 是透明的：<br><code>&lt;p&gt;We hold these truths to be &lt;del&gt;&lt;em&gt;sacred &amp;amp; undeniable&lt;/em&gt;&lt;/del&gt; &lt;ins&gt;self-evident&lt;/ins&gt;.&lt;/p&gt;</code><br>如果这两个元素被移除，这个程序段依然是合法的。<br><code>&lt;p&gt;We hold these truths to be &lt;em&gt;sacred &amp;amp; undeniable&lt;/em&gt; self-evident.&lt;/p&gt;</code></p>\n<h3 id=\"III-空元素\"><a href=\"#III-空元素\" class=\"headerlink\" title=\"III. 空元素\"></a>III. 空元素</h3><p><strong>一个空元素（empty element）</strong>可能是 HTML，SVG，或者 MathML 里的一个不可能存在子节点（例如内嵌的元素或者元素内的文本）的element。<br>HTML，SVG 和 MathML 的规范都详细定义了每个元素能包含的具体内容（define very precisely what each element can contain）。许多组合是没有任何语义含义的，比如一个 <code>&lt;audio&gt;</code> 元素嵌套在一个 <code>&lt;hr&gt;</code> 元素里。<br>在 HTML 中，通常在一个空元素上使用一个闭标签是无效的。例如， <code>&lt;input type=&quot;text&quot;&gt;&lt;/input&gt;</code> 的闭标签是无效的 HTML。<br>在 HTML 中有以下这些空元素：<br><code>&lt;area&gt;</code><br><code>&lt;base&gt;</code><br><code>&lt;br&gt;</code><br><code>&lt;col&gt;</code><br><code>&lt;colgroup&gt;</code> when the span is present<br><code>&lt;command&gt;</code><br><code>&lt;embed&gt;</code><br><code>&lt;hr&gt;</code><br><code>&lt;img&gt;</code><br><code>&lt;input&gt;</code><br><code>&lt;keygen&gt;</code><br><code>&lt;link&gt;</code><br><code>&lt;meta&gt;</code><br><code>&lt;param&gt;</code><br><code>&lt;source&gt;</code><br><code>&lt;track&gt;</code><br><code>&lt;wbr&gt;</code><br><strong>在极少数情况下，空元素被错误地称为“无效元素”(void elements)。</strong></p>\n<font color=\"gray\">有始无终的诸位，不加闭标签</font>\n\n<h3 id=\"IV-可替换元素\"><a href=\"#IV-可替换元素\" class=\"headerlink\" title=\"IV.可替换元素\"></a>IV.可替换元素</h3><p>CSS 里，可替换元素（replaced element）的展现不是由CSS来控制的。这些元素是一类 外观渲染独立于CSS的 外部对象。 典型的可替换元素有 <code>&lt;img&gt;</code>、 <code>&lt;object&gt;</code>、 <code>&lt;video&gt;</code> 和 表单元素，如<code>&lt;textarea&gt;</code>、 <code>&lt;input&gt;</code> 。 某些元素只在一些特殊情况下表现为可替换元素，例如 <code>&lt;audio&gt;</code> 和 <code>&lt;canvas&gt;</code> 。 通过 CSS content 属性来插入的对象 被称作 匿名可替换元素（anonymous replaced elements）。</p>\n<p><strong>自己决定自己宽高的元素</strong></p>\n<p>CSS在某些情况下会对可替换元素做特殊处理，比如计算外边距和一些auto值。</p>\n<p>需要注意的是，一部分（并非全部）可替换元素，本身具有尺寸和基线（baseline），会被像vertical-align之类的一些 CSS 属性用到。</p>\n<h3 id=\"V-标签的属性\"><a href=\"#V-标签的属性\" class=\"headerlink\" title=\"V.标签的属性\"></a>V.标签的属性</h3><p><strong>HTML标签没有块级元素和内联元素的区别，仅仅仅仅仅仅在CSS里有这种区别</strong><br><code>&lt;div&gt;</code>是块级元素？？？naive！<br><code>&lt;style&gt;\n  div{\n    display: inline;\n }\n&lt;/style&gt;</code><br>你曾经是个块级元素(默认)，但看看你现在的样子。<br><br><br><strong>HTML只做一件事情：定义他是什么，而他长什么样子和HTML没关系。</strong><del>这种问题请交给CSS</del></p>\n"},{"title":"入门-HTTP","date":"2018-03-19T12:11:03.000Z","_content":"## 1.何为HTTP（HyperText Transfer Protocol）\nI. 是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。\nII.HTTP的发展是由蒂姆·伯纳斯-李(Sir Timothy John Berners-Lee)于1989年在欧洲核子研究组织（CERN）所发起。\n## 2.什么？上面太多不想看？好吧：\n **a.HTTP**\n 是一种规定客户端(浏览器)如何发出请求，服务器如何响应请求的协议\n **b.服务器端口**\n \n |端口|用途|\n |:----:|:----:|\n |21|FTP服务|\n |443|HTTPS服务（提供加密和安全端口传输）|\n |1080|代理服务器端口（SS的时候它是不是很眼熟？）|\n |3306|MySQL的默认端口|\n |80|HTTP服务的默认端口|\n \n **c.URI（Uniform Resource Identifier）**\n   统一资源标识符：用于标识某一互联网资源名称的字符串。（包括下面两位）\n **d.URL（Uniform Resource Locator）**\n   统一资源定位符（就是我们所说的网址）\n **e.URN（Uniform Resource Name）**\n   统一资源名称（可以把它理解成名字）\n **f.DNS（Domain Name System）**\n   域名系统：输入域名;输出IP。（输入baidu.com，电信~~运营商~~告诉你IP）\n\n---\n## 3.请求与响应\n<font color=gray size=2>前言：环境Deepin15.5（debian）\n终端运行`sudo apt-get install curl`安装curl命令（已安装请忽略前言）</font>\n\nCurl命令：利用URL语法在命令行方式下工作的开源文件传输工具。\n`curl xxx.com`=读取xxx.com网页信息\n\n|参数|全称|作用|\n|:---:|:---:|:---:|\n|-s|--silent|静默模式（不显示进度和错误）|\n|-S|--show-error|显示错误|\n|-h|--help|帮助|\n|-H|--header|自定义头部信息传递给服务器|\n|-x|--proxy|在指定端口上使用HTTP代理（后面跟host）|\n|-X|--request|后面跟动作指定命令|\n|-d|--data|HTTP POST方式传输数据 `--data 'data=xxx'`|\n|-D|--dump-header <文件名>|把header信息写入该文件|\n|-v|--verbose|显示更多信息|\n|-V|--version|显示版本信息|\n|-I|--head|仅显示请求头部信息|\n\n突出一个大小写很重要\n\n\n#### I.请求\n  **a.在终端运行**\n  `curl -s -v -H \"Protoss: Oracle\" -- \"https://www.baidu.com\"`\n  **b.得到Get请求**\n\t`> GET / HTTP/1.1`\n\t`> Host: www.baidu.com`\n\t`> User-Agent: curl/7.59.0`\n\t`> Accept: */*`\n\t`> Protoss: Oracle`\n\t`> `\n  **c.那么如何使用POST请求？**\n    `curl -X POST -s -v -H \"Protoss: Oracle\" -- \"https://www.baidu.com\"`\n  **d.得到POST请求内容**\n\t`> POST / HTTP/1.1`\n\t`> Host: www.baidu.com`\n\t`> User-Agent: curl/7.59.0`\n\t`> Accept: */*`\n\t`> Protoss: Oracle`\n\t`> `\n  **e.总结请求格式**\n    `1 动词 路径 协议/版本`\n    `2 Key1: value1`\n    `2 Key2: value2`\n    `2 Key3: value3`\n    `2 Content-Type: application/x-www-form-urlencoded`\n    `2 Host: www.baidu.com`\n    `2 User-Agent: curl/7.54.0`\n    `3 （第三部分永远都是一个回车,表达了请求头的结束和请求正文的开始）`\n    `4 要上传的数据`\n<font color=gray size=2>1.请求最多包含**四**部分，最少包含**三**部分\n2.第**一**部分中动词有：**GET POST PUT PATCH DELETE** HEAD OPTIONS 等\n3.路径包括「查询参数」，但不包括「锚点」，没写路径的话，默认为/\n4.第**二**部分中Content-Type标注了第**四**部分的格式</font>\n\n#### II.响应\n<font color=gray size=2>前言：Get和Post的响应实例过长...请参照请求代码自行尝试。</font>\n\n  **a.响应格式**\n\t`1 协议/版本号 状态码 状态解释`\n\t`2 Key1: value1`\n\t`2 Key2: value2`\n\t`2 Content-Length: 17931`\n\t`2 Content-Type: text/html`\n\t`3`\n\t`4 要下载的内容`\n    注：<font color=gray size=2>第二部分中的Content-Type 标注了第 4 部分的格式且遵循MIME(多用途互联网邮件扩展)</font>\n  **b.HTTP状态码**\n  浏览器给服务器发请求有格式，服务器发现问题返回给浏览器用状态码呈现。\n    \n|状态码|意义|\n|:----:|:----:|\n|1xx|**不常用**|\n|2xx|**表示成功**|\n|201|**Created**请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。|\n|202|**Accepted**服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。|\n|203|**Non-Authoritative Information**服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。|\n|204|**No Content**服务器成功处理了请求，没有返回任何内容。|\n|205|**Reset Content**服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。|\n|3xx|**溜了呀，这没你要的**|\n|301|**Moved Permanently**被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。|\n|302|**Found**要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。|\n|303|**See Other**对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。|\n|305|**Use Proxy**被请求的资源必须通过指定的代理才能被访问。|\n|4xx|**你（客户端）背锅**|\n|403|**Forbidden**服务器已经理解请求，但是拒绝执行它。|\n|404|**Not Found**请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。|\n|5xx|**我（服务器）背锅**|\n|503|**Service Unavailable**由于临时的服务器维护或者过载，服务器当前无法处理请求。|\n\n## 4.如何使用Google Chrome发送请求与查看响应\n#### I.发送请求\n  a.F12打开开发者工具点击Network选项卡\n  b.地址栏键入网址打开\n  c.点击查看request，点击**View source**可以查看请求的前三部分\n  d.如果有第四部分请求，则可以在 FormData 或 Payload 里面可以看到。（右键表头标签打开Method标签可查看Post Or Get）\n#### II.查看响应\n  a.F12打开开发者工具点击Network选项卡\n  b.地址栏键入网址打开\n  c.选中第一个响应\n  d.查看Response Headers，点击**view source**可以查看响应的前两部分\n  e.查看Response或Preview，可以查看响应的第四部分","source":"_posts/入门-HTTP.md","raw":"---\ntitle: '入门-HTTP'\ndate: 2018-03-19 20:11:03\ntags:\n---\n## 1.何为HTTP（HyperText Transfer Protocol）\nI. 是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。\nII.HTTP的发展是由蒂姆·伯纳斯-李(Sir Timothy John Berners-Lee)于1989年在欧洲核子研究组织（CERN）所发起。\n## 2.什么？上面太多不想看？好吧：\n **a.HTTP**\n 是一种规定客户端(浏览器)如何发出请求，服务器如何响应请求的协议\n **b.服务器端口**\n \n |端口|用途|\n |:----:|:----:|\n |21|FTP服务|\n |443|HTTPS服务（提供加密和安全端口传输）|\n |1080|代理服务器端口（SS的时候它是不是很眼熟？）|\n |3306|MySQL的默认端口|\n |80|HTTP服务的默认端口|\n \n **c.URI（Uniform Resource Identifier）**\n   统一资源标识符：用于标识某一互联网资源名称的字符串。（包括下面两位）\n **d.URL（Uniform Resource Locator）**\n   统一资源定位符（就是我们所说的网址）\n **e.URN（Uniform Resource Name）**\n   统一资源名称（可以把它理解成名字）\n **f.DNS（Domain Name System）**\n   域名系统：输入域名;输出IP。（输入baidu.com，电信~~运营商~~告诉你IP）\n\n---\n## 3.请求与响应\n<font color=gray size=2>前言：环境Deepin15.5（debian）\n终端运行`sudo apt-get install curl`安装curl命令（已安装请忽略前言）</font>\n\nCurl命令：利用URL语法在命令行方式下工作的开源文件传输工具。\n`curl xxx.com`=读取xxx.com网页信息\n\n|参数|全称|作用|\n|:---:|:---:|:---:|\n|-s|--silent|静默模式（不显示进度和错误）|\n|-S|--show-error|显示错误|\n|-h|--help|帮助|\n|-H|--header|自定义头部信息传递给服务器|\n|-x|--proxy|在指定端口上使用HTTP代理（后面跟host）|\n|-X|--request|后面跟动作指定命令|\n|-d|--data|HTTP POST方式传输数据 `--data 'data=xxx'`|\n|-D|--dump-header <文件名>|把header信息写入该文件|\n|-v|--verbose|显示更多信息|\n|-V|--version|显示版本信息|\n|-I|--head|仅显示请求头部信息|\n\n突出一个大小写很重要\n\n\n#### I.请求\n  **a.在终端运行**\n  `curl -s -v -H \"Protoss: Oracle\" -- \"https://www.baidu.com\"`\n  **b.得到Get请求**\n\t`> GET / HTTP/1.1`\n\t`> Host: www.baidu.com`\n\t`> User-Agent: curl/7.59.0`\n\t`> Accept: */*`\n\t`> Protoss: Oracle`\n\t`> `\n  **c.那么如何使用POST请求？**\n    `curl -X POST -s -v -H \"Protoss: Oracle\" -- \"https://www.baidu.com\"`\n  **d.得到POST请求内容**\n\t`> POST / HTTP/1.1`\n\t`> Host: www.baidu.com`\n\t`> User-Agent: curl/7.59.0`\n\t`> Accept: */*`\n\t`> Protoss: Oracle`\n\t`> `\n  **e.总结请求格式**\n    `1 动词 路径 协议/版本`\n    `2 Key1: value1`\n    `2 Key2: value2`\n    `2 Key3: value3`\n    `2 Content-Type: application/x-www-form-urlencoded`\n    `2 Host: www.baidu.com`\n    `2 User-Agent: curl/7.54.0`\n    `3 （第三部分永远都是一个回车,表达了请求头的结束和请求正文的开始）`\n    `4 要上传的数据`\n<font color=gray size=2>1.请求最多包含**四**部分，最少包含**三**部分\n2.第**一**部分中动词有：**GET POST PUT PATCH DELETE** HEAD OPTIONS 等\n3.路径包括「查询参数」，但不包括「锚点」，没写路径的话，默认为/\n4.第**二**部分中Content-Type标注了第**四**部分的格式</font>\n\n#### II.响应\n<font color=gray size=2>前言：Get和Post的响应实例过长...请参照请求代码自行尝试。</font>\n\n  **a.响应格式**\n\t`1 协议/版本号 状态码 状态解释`\n\t`2 Key1: value1`\n\t`2 Key2: value2`\n\t`2 Content-Length: 17931`\n\t`2 Content-Type: text/html`\n\t`3`\n\t`4 要下载的内容`\n    注：<font color=gray size=2>第二部分中的Content-Type 标注了第 4 部分的格式且遵循MIME(多用途互联网邮件扩展)</font>\n  **b.HTTP状态码**\n  浏览器给服务器发请求有格式，服务器发现问题返回给浏览器用状态码呈现。\n    \n|状态码|意义|\n|:----:|:----:|\n|1xx|**不常用**|\n|2xx|**表示成功**|\n|201|**Created**请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。|\n|202|**Accepted**服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。|\n|203|**Non-Authoritative Information**服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。|\n|204|**No Content**服务器成功处理了请求，没有返回任何内容。|\n|205|**Reset Content**服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。|\n|3xx|**溜了呀，这没你要的**|\n|301|**Moved Permanently**被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。|\n|302|**Found**要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。|\n|303|**See Other**对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。|\n|305|**Use Proxy**被请求的资源必须通过指定的代理才能被访问。|\n|4xx|**你（客户端）背锅**|\n|403|**Forbidden**服务器已经理解请求，但是拒绝执行它。|\n|404|**Not Found**请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。|\n|5xx|**我（服务器）背锅**|\n|503|**Service Unavailable**由于临时的服务器维护或者过载，服务器当前无法处理请求。|\n\n## 4.如何使用Google Chrome发送请求与查看响应\n#### I.发送请求\n  a.F12打开开发者工具点击Network选项卡\n  b.地址栏键入网址打开\n  c.点击查看request，点击**View source**可以查看请求的前三部分\n  d.如果有第四部分请求，则可以在 FormData 或 Payload 里面可以看到。（右键表头标签打开Method标签可查看Post Or Get）\n#### II.查看响应\n  a.F12打开开发者工具点击Network选项卡\n  b.地址栏键入网址打开\n  c.选中第一个响应\n  d.查看Response Headers，点击**view source**可以查看响应的前两部分\n  e.查看Response或Preview，可以查看响应的第四部分","slug":"入门-HTTP","published":1,"updated":"2018-03-23T11:15:04.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3w000tt2g3mr0roj53","content":"<h2 id=\"1-何为HTTP（HyperText-Transfer-Protocol）\"><a href=\"#1-何为HTTP（HyperText-Transfer-Protocol）\" class=\"headerlink\" title=\"1.何为HTTP（HyperText Transfer Protocol）\"></a>1.何为HTTP（HyperText Transfer Protocol）</h2><p>I. 是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。<br>II.HTTP的发展是由蒂姆·伯纳斯-李(Sir Timothy John Berners-Lee)于1989年在欧洲核子研究组织（CERN）所发起。</p>\n<h2 id=\"2-什么？上面太多不想看？好吧：\"><a href=\"#2-什么？上面太多不想看？好吧：\" class=\"headerlink\" title=\"2.什么？上面太多不想看？好吧：\"></a>2.什么？上面太多不想看？好吧：</h2><p> <strong>a.HTTP</strong><br> 是一种规定客户端(浏览器)如何发出请求，服务器如何响应请求的协议<br> <strong>b.服务器端口</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">端口</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">FTP服务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">443</td>\n<td style=\"text-align:center\">HTTPS服务（提供加密和安全端口传输）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080</td>\n<td style=\"text-align:center\">代理服务器端口（SS的时候它是不是很眼熟？）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3306</td>\n<td style=\"text-align:center\">MySQL的默认端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">HTTP服务的默认端口</td>\n</tr>\n</tbody>\n</table>\n<p> <strong>c.URI（Uniform Resource Identifier）</strong><br>   统一资源标识符：用于标识某一互联网资源名称的字符串。（包括下面两位）<br> <strong>d.URL（Uniform Resource Locator）</strong><br>   统一资源定位符（就是我们所说的网址）<br> <strong>e.URN（Uniform Resource Name）</strong><br>   统一资源名称（可以把它理解成名字）<br> <strong>f.DNS（Domain Name System）</strong><br>   域名系统：输入域名;输出IP。（输入baidu.com，电信<del>运营商</del>告诉你IP）</p>\n<hr>\n<h2 id=\"3-请求与响应\"><a href=\"#3-请求与响应\" class=\"headerlink\" title=\"3.请求与响应\"></a>3.请求与响应</h2><font color=\"gray\" size=\"2\">前言：环境Deepin15.5（debian）<br>终端运行<code>sudo apt-get install curl</code>安装curl命令（已安装请忽略前言）</font>\n\n<p>Curl命令：利用URL语法在命令行方式下工作的开源文件传输工具。<br><code>curl xxx.com</code>=读取xxx.com网页信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">全称</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">–silent</td>\n<td style=\"text-align:center\">静默模式（不显示进度和错误）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-S</td>\n<td style=\"text-align:center\">–show-error</td>\n<td style=\"text-align:center\">显示错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-h</td>\n<td style=\"text-align:center\">–help</td>\n<td style=\"text-align:center\">帮助</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-H</td>\n<td style=\"text-align:center\">–header</td>\n<td style=\"text-align:center\">自定义头部信息传递给服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-x</td>\n<td style=\"text-align:center\">–proxy</td>\n<td style=\"text-align:center\">在指定端口上使用HTTP代理（后面跟host）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-X</td>\n<td style=\"text-align:center\">–request</td>\n<td style=\"text-align:center\">后面跟动作指定命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">–data</td>\n<td style=\"text-align:center\">HTTP POST方式传输数据 <code>--data &#39;data=xxx&#39;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-D</td>\n<td style=\"text-align:center\">–dump-header &lt;文件名&gt;</td>\n<td style=\"text-align:center\">把header信息写入该文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:center\">–verbose</td>\n<td style=\"text-align:center\">显示更多信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-V</td>\n<td style=\"text-align:center\">–version</td>\n<td style=\"text-align:center\">显示版本信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-I</td>\n<td style=\"text-align:center\">–head</td>\n<td style=\"text-align:center\">仅显示请求头部信息</td>\n</tr>\n</tbody>\n</table>\n<p>突出一个大小写很重要</p>\n<h4 id=\"I-请求\"><a href=\"#I-请求\" class=\"headerlink\" title=\"I.请求\"></a>I.请求</h4><p>  <strong>a.在终端运行</strong><br>  <code>curl -s -v -H &quot;Protoss: Oracle&quot; -- &quot;https://www.baidu.com&quot;</code><br>  <strong>b.得到Get请求</strong><br>    <code>&gt; GET / HTTP/1.1</code><br>    <code>&gt; Host: www.baidu.com</code><br>    <code>&gt; User-Agent: curl/7.59.0</code><br>    <code>&gt; Accept: */*</code><br>    <code>&gt; Protoss: Oracle</code><br>    <code>&gt;</code><br>  <strong>c.那么如何使用POST请求？</strong><br>    <code>curl -X POST -s -v -H &quot;Protoss: Oracle&quot; -- &quot;https://www.baidu.com&quot;</code><br>  <strong>d.得到POST请求内容</strong><br>    <code>&gt; POST / HTTP/1.1</code><br>    <code>&gt; Host: www.baidu.com</code><br>    <code>&gt; User-Agent: curl/7.59.0</code><br>    <code>&gt; Accept: */*</code><br>    <code>&gt; Protoss: Oracle</code><br>    <code>&gt;</code><br>  <strong>e.总结请求格式</strong><br>    <code>1 动词 路径 协议/版本</code><br>    <code>2 Key1: value1</code><br>    <code>2 Key2: value2</code><br>    <code>2 Key3: value3</code><br>    <code>2 Content-Type: application/x-www-form-urlencoded</code><br>    <code>2 Host: www.baidu.com</code><br>    <code>2 User-Agent: curl/7.54.0</code><br>    <code>3 （第三部分永远都是一个回车,表达了请求头的结束和请求正文的开始）</code><br>    <code>4 要上传的数据</code></p>\n<font color=\"gray\" size=\"2\">1.请求最多包含<strong>四</strong>部分，最少包含<strong>三</strong>部分<br>2.第<strong>一</strong>部分中动词有：<strong>GET POST PUT PATCH DELETE</strong> HEAD OPTIONS 等<br>3.路径包括「查询参数」，但不包括「锚点」，没写路径的话，默认为/<br>4.第<strong>二</strong>部分中Content-Type标注了第<strong>四</strong>部分的格式</font>\n\n<h4 id=\"II-响应\"><a href=\"#II-响应\" class=\"headerlink\" title=\"II.响应\"></a>II.响应</h4><font color=\"gray\" size=\"2\">前言：Get和Post的响应实例过长…请参照请求代码自行尝试。</font>\n\n<p>  <strong>a.响应格式</strong><br>    <code>1 协议/版本号 状态码 状态解释</code><br>    <code>2 Key1: value1</code><br>    <code>2 Key2: value2</code><br>    <code>2 Content-Length: 17931</code><br>    <code>2 Content-Type: text/html</code><br>    <code>3</code><br>    <code>4 要下载的内容</code><br>    注：<font color=\"gray\" size=\"2\">第二部分中的Content-Type 标注了第 4 部分的格式且遵循MIME(多用途互联网邮件扩展)</font><br>  <strong>b.HTTP状态码</strong><br>  浏览器给服务器发请求有格式，服务器发现问题返回给浏览器用状态码呈现。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1xx</td>\n<td style=\"text-align:center\"><strong>不常用</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2xx</td>\n<td style=\"text-align:center\"><strong>表示成功</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201</td>\n<td style=\"text-align:center\"><strong>Created</strong>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">202</td>\n<td style=\"text-align:center\"><strong>Accepted</strong>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">203</td>\n<td style=\"text-align:center\"><strong>Non-Authoritative Information</strong>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">204</td>\n<td style=\"text-align:center\"><strong>No Content</strong>服务器成功处理了请求，没有返回任何内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">205</td>\n<td style=\"text-align:center\"><strong>Reset Content</strong>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3xx</td>\n<td style=\"text-align:center\"><strong>溜了呀，这没你要的</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">301</td>\n<td style=\"text-align:center\"><strong>Moved Permanently</strong>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">302</td>\n<td style=\"text-align:center\"><strong>Found</strong>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">303</td>\n<td style=\"text-align:center\"><strong>See Other</strong>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">305</td>\n<td style=\"text-align:center\"><strong>Use Proxy</strong>被请求的资源必须通过指定的代理才能被访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4xx</td>\n<td style=\"text-align:center\"><strong>你（客户端）背锅</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">403</td>\n<td style=\"text-align:center\"><strong>Forbidden</strong>服务器已经理解请求，但是拒绝执行它。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">404</td>\n<td style=\"text-align:center\"><strong>Not Found</strong>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5xx</td>\n<td style=\"text-align:center\"><strong>我（服务器）背锅</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">503</td>\n<td style=\"text-align:center\"><strong>Service Unavailable</strong>由于临时的服务器维护或者过载，服务器当前无法处理请求。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4-如何使用Google-Chrome发送请求与查看响应\"><a href=\"#4-如何使用Google-Chrome发送请求与查看响应\" class=\"headerlink\" title=\"4.如何使用Google Chrome发送请求与查看响应\"></a>4.如何使用Google Chrome发送请求与查看响应</h2><h4 id=\"I-发送请求\"><a href=\"#I-发送请求\" class=\"headerlink\" title=\"I.发送请求\"></a>I.发送请求</h4><p>  a.F12打开开发者工具点击Network选项卡<br>  b.地址栏键入网址打开<br>  c.点击查看request，点击<strong>View source</strong>可以查看请求的前三部分<br>  d.如果有第四部分请求，则可以在 FormData 或 Payload 里面可以看到。（右键表头标签打开Method标签可查看Post Or Get）</p>\n<h4 id=\"II-查看响应\"><a href=\"#II-查看响应\" class=\"headerlink\" title=\"II.查看响应\"></a>II.查看响应</h4><p>  a.F12打开开发者工具点击Network选项卡<br>  b.地址栏键入网址打开<br>  c.选中第一个响应<br>  d.查看Response Headers，点击<strong>view source</strong>可以查看响应的前两部分<br>  e.查看Response或Preview，可以查看响应的第四部分</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-何为HTTP（HyperText-Transfer-Protocol）\"><a href=\"#1-何为HTTP（HyperText-Transfer-Protocol）\" class=\"headerlink\" title=\"1.何为HTTP（HyperText Transfer Protocol）\"></a>1.何为HTTP（HyperText Transfer Protocol）</h2><p>I. 是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础。<br>II.HTTP的发展是由蒂姆·伯纳斯-李(Sir Timothy John Berners-Lee)于1989年在欧洲核子研究组织（CERN）所发起。</p>\n<h2 id=\"2-什么？上面太多不想看？好吧：\"><a href=\"#2-什么？上面太多不想看？好吧：\" class=\"headerlink\" title=\"2.什么？上面太多不想看？好吧：\"></a>2.什么？上面太多不想看？好吧：</h2><p> <strong>a.HTTP</strong><br> 是一种规定客户端(浏览器)如何发出请求，服务器如何响应请求的协议<br> <strong>b.服务器端口</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">端口</th>\n<th style=\"text-align:center\">用途</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">21</td>\n<td style=\"text-align:center\">FTP服务</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">443</td>\n<td style=\"text-align:center\">HTTPS服务（提供加密和安全端口传输）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">1080</td>\n<td style=\"text-align:center\">代理服务器端口（SS的时候它是不是很眼熟？）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3306</td>\n<td style=\"text-align:center\">MySQL的默认端口</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">80</td>\n<td style=\"text-align:center\">HTTP服务的默认端口</td>\n</tr>\n</tbody>\n</table>\n<p> <strong>c.URI（Uniform Resource Identifier）</strong><br>   统一资源标识符：用于标识某一互联网资源名称的字符串。（包括下面两位）<br> <strong>d.URL（Uniform Resource Locator）</strong><br>   统一资源定位符（就是我们所说的网址）<br> <strong>e.URN（Uniform Resource Name）</strong><br>   统一资源名称（可以把它理解成名字）<br> <strong>f.DNS（Domain Name System）</strong><br>   域名系统：输入域名;输出IP。（输入baidu.com，电信<del>运营商</del>告诉你IP）</p>\n<hr>\n<h2 id=\"3-请求与响应\"><a href=\"#3-请求与响应\" class=\"headerlink\" title=\"3.请求与响应\"></a>3.请求与响应</h2><font color=\"gray\" size=\"2\">前言：环境Deepin15.5（debian）<br>终端运行<code>sudo apt-get install curl</code>安装curl命令（已安装请忽略前言）</font>\n\n<p>Curl命令：利用URL语法在命令行方式下工作的开源文件传输工具。<br><code>curl xxx.com</code>=读取xxx.com网页信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">全称</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-s</td>\n<td style=\"text-align:center\">–silent</td>\n<td style=\"text-align:center\">静默模式（不显示进度和错误）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-S</td>\n<td style=\"text-align:center\">–show-error</td>\n<td style=\"text-align:center\">显示错误</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-h</td>\n<td style=\"text-align:center\">–help</td>\n<td style=\"text-align:center\">帮助</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-H</td>\n<td style=\"text-align:center\">–header</td>\n<td style=\"text-align:center\">自定义头部信息传递给服务器</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-x</td>\n<td style=\"text-align:center\">–proxy</td>\n<td style=\"text-align:center\">在指定端口上使用HTTP代理（后面跟host）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-X</td>\n<td style=\"text-align:center\">–request</td>\n<td style=\"text-align:center\">后面跟动作指定命令</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">–data</td>\n<td style=\"text-align:center\">HTTP POST方式传输数据 <code>--data &#39;data=xxx&#39;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-D</td>\n<td style=\"text-align:center\">–dump-header &lt;文件名&gt;</td>\n<td style=\"text-align:center\">把header信息写入该文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-v</td>\n<td style=\"text-align:center\">–verbose</td>\n<td style=\"text-align:center\">显示更多信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-V</td>\n<td style=\"text-align:center\">–version</td>\n<td style=\"text-align:center\">显示版本信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-I</td>\n<td style=\"text-align:center\">–head</td>\n<td style=\"text-align:center\">仅显示请求头部信息</td>\n</tr>\n</tbody>\n</table>\n<p>突出一个大小写很重要</p>\n<h4 id=\"I-请求\"><a href=\"#I-请求\" class=\"headerlink\" title=\"I.请求\"></a>I.请求</h4><p>  <strong>a.在终端运行</strong><br>  <code>curl -s -v -H &quot;Protoss: Oracle&quot; -- &quot;https://www.baidu.com&quot;</code><br>  <strong>b.得到Get请求</strong><br>    <code>&gt; GET / HTTP/1.1</code><br>    <code>&gt; Host: www.baidu.com</code><br>    <code>&gt; User-Agent: curl/7.59.0</code><br>    <code>&gt; Accept: */*</code><br>    <code>&gt; Protoss: Oracle</code><br>    <code>&gt;</code><br>  <strong>c.那么如何使用POST请求？</strong><br>    <code>curl -X POST -s -v -H &quot;Protoss: Oracle&quot; -- &quot;https://www.baidu.com&quot;</code><br>  <strong>d.得到POST请求内容</strong><br>    <code>&gt; POST / HTTP/1.1</code><br>    <code>&gt; Host: www.baidu.com</code><br>    <code>&gt; User-Agent: curl/7.59.0</code><br>    <code>&gt; Accept: */*</code><br>    <code>&gt; Protoss: Oracle</code><br>    <code>&gt;</code><br>  <strong>e.总结请求格式</strong><br>    <code>1 动词 路径 协议/版本</code><br>    <code>2 Key1: value1</code><br>    <code>2 Key2: value2</code><br>    <code>2 Key3: value3</code><br>    <code>2 Content-Type: application/x-www-form-urlencoded</code><br>    <code>2 Host: www.baidu.com</code><br>    <code>2 User-Agent: curl/7.54.0</code><br>    <code>3 （第三部分永远都是一个回车,表达了请求头的结束和请求正文的开始）</code><br>    <code>4 要上传的数据</code></p>\n<font color=\"gray\" size=\"2\">1.请求最多包含<strong>四</strong>部分，最少包含<strong>三</strong>部分<br>2.第<strong>一</strong>部分中动词有：<strong>GET POST PUT PATCH DELETE</strong> HEAD OPTIONS 等<br>3.路径包括「查询参数」，但不包括「锚点」，没写路径的话，默认为/<br>4.第<strong>二</strong>部分中Content-Type标注了第<strong>四</strong>部分的格式</font>\n\n<h4 id=\"II-响应\"><a href=\"#II-响应\" class=\"headerlink\" title=\"II.响应\"></a>II.响应</h4><font color=\"gray\" size=\"2\">前言：Get和Post的响应实例过长…请参照请求代码自行尝试。</font>\n\n<p>  <strong>a.响应格式</strong><br>    <code>1 协议/版本号 状态码 状态解释</code><br>    <code>2 Key1: value1</code><br>    <code>2 Key2: value2</code><br>    <code>2 Content-Length: 17931</code><br>    <code>2 Content-Type: text/html</code><br>    <code>3</code><br>    <code>4 要下载的内容</code><br>    注：<font color=\"gray\" size=\"2\">第二部分中的Content-Type 标注了第 4 部分的格式且遵循MIME(多用途互联网邮件扩展)</font><br>  <strong>b.HTTP状态码</strong><br>  浏览器给服务器发请求有格式，服务器发现问题返回给浏览器用状态码呈现。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">状态码</th>\n<th style=\"text-align:center\">意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1xx</td>\n<td style=\"text-align:center\"><strong>不常用</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2xx</td>\n<td style=\"text-align:center\"><strong>表示成功</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">201</td>\n<td style=\"text-align:center\"><strong>Created</strong>请求已经被实现，而且有一个新的资源已经依据请求的需要而创建，且其URI已经随Location头信息返回。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">202</td>\n<td style=\"text-align:center\"><strong>Accepted</strong>服务器已接受请求，但尚未处理。最终该请求可能会也可能不会被执行，并且可能在处理发生时被禁止。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">203</td>\n<td style=\"text-align:center\"><strong>Non-Authoritative Information</strong>服务器是一个转换代理服务器（transforming proxy，例如网络加速器），以200 OK状态码为起源，但回应了原始响应的修改版本。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">204</td>\n<td style=\"text-align:center\"><strong>No Content</strong>服务器成功处理了请求，没有返回任何内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">205</td>\n<td style=\"text-align:center\"><strong>Reset Content</strong>服务器成功处理了请求，但没有返回任何内容。与204响应不同，此响应要求请求者重置文档视图。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3xx</td>\n<td style=\"text-align:center\"><strong>溜了呀，这没你要的</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">301</td>\n<td style=\"text-align:center\"><strong>Moved Permanently</strong>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">302</td>\n<td style=\"text-align:center\"><strong>Found</strong>要求客户端执行临时重定向（原始描述短语为“Moved Temporarily”）。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">303</td>\n<td style=\"text-align:center\"><strong>See Other</strong>对应当前请求的响应可以在另一个URI上被找到，当响应于POST（或PUT / DELETE）接收到响应时，客户端应该假定服务器已经收到数据，并且应该使用单独的GET消息发出重定向。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">305</td>\n<td style=\"text-align:center\"><strong>Use Proxy</strong>被请求的资源必须通过指定的代理才能被访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4xx</td>\n<td style=\"text-align:center\"><strong>你（客户端）背锅</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">403</td>\n<td style=\"text-align:center\"><strong>Forbidden</strong>服务器已经理解请求，但是拒绝执行它。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">404</td>\n<td style=\"text-align:center\"><strong>Not Found</strong>请求失败，请求所希望得到的资源未被在服务器上发现，但允许用户的后续请求。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5xx</td>\n<td style=\"text-align:center\"><strong>我（服务器）背锅</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">503</td>\n<td style=\"text-align:center\"><strong>Service Unavailable</strong>由于临时的服务器维护或者过载，服务器当前无法处理请求。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"4-如何使用Google-Chrome发送请求与查看响应\"><a href=\"#4-如何使用Google-Chrome发送请求与查看响应\" class=\"headerlink\" title=\"4.如何使用Google Chrome发送请求与查看响应\"></a>4.如何使用Google Chrome发送请求与查看响应</h2><h4 id=\"I-发送请求\"><a href=\"#I-发送请求\" class=\"headerlink\" title=\"I.发送请求\"></a>I.发送请求</h4><p>  a.F12打开开发者工具点击Network选项卡<br>  b.地址栏键入网址打开<br>  c.点击查看request，点击<strong>View source</strong>可以查看请求的前三部分<br>  d.如果有第四部分请求，则可以在 FormData 或 Payload 里面可以看到。（右键表头标签打开Method标签可查看Post Or Get）</p>\n<h4 id=\"II-查看响应\"><a href=\"#II-查看响应\" class=\"headerlink\" title=\"II.查看响应\"></a>II.查看响应</h4><p>  a.F12打开开发者工具点击Network选项卡<br>  b.地址栏键入网址打开<br>  c.选中第一个响应<br>  d.查看Response Headers，点击<strong>view source</strong>可以查看响应的前两部分<br>  e.查看Response或Preview，可以查看响应的第四部分</p>\n"},{"title":"入门-JavaScript","date":"2018-04-02T14:50:06.000Z","_content":"Uncaught SyntextError: Unexpected tokken ]\n没有被处理的语法错误： 不可预知的字符串 ]\nwhich means：浏览器觉得这里不应该有一个中括号。\n\n```\nmainXXX.onkeypress = function(random){\n console.log('我发现你输入了一个键')\n}\n```\n\nlocalStorage\n\n```\nlocalStorage.setItem('uuu', JSON.stringify(hash))//每次变化就存下来\n```\n\n存在浏览器的storage里面\n`var hashInLocalStorage = JSON.parse(localStorage.getItem('uuu') || '')`\n取出localStorage中uuu对应的hash\n\ninline元素中间有回车本应该有个空隙\nJavaScript生成的inline元素是没有空隙的\n就会紧紧贴在一起\n\nvh是指的视口高度（屏幕大小）`viewport height`\n盖住当前元素（做到自适应）`background-size: cover;`\n\n网站根目录`/favicon.ico`\n访问网站的`logo`\n有时候网站没在这里放icon，那只能用到`http://favicon.byi.pw/?url=相应网址`\n\n`元素名.previousSibling`\n获取元素名上一个元素\n\n`.onerror`\n发生错误以后执行","source":"_posts/入门-JavaScript.md","raw":"---\ntitle: 入门-JavaScript\ndate: 2018-04-02 22:50:06\ntags:\n---\nUncaught SyntextError: Unexpected tokken ]\n没有被处理的语法错误： 不可预知的字符串 ]\nwhich means：浏览器觉得这里不应该有一个中括号。\n\n```\nmainXXX.onkeypress = function(random){\n console.log('我发现你输入了一个键')\n}\n```\n\nlocalStorage\n\n```\nlocalStorage.setItem('uuu', JSON.stringify(hash))//每次变化就存下来\n```\n\n存在浏览器的storage里面\n`var hashInLocalStorage = JSON.parse(localStorage.getItem('uuu') || '')`\n取出localStorage中uuu对应的hash\n\ninline元素中间有回车本应该有个空隙\nJavaScript生成的inline元素是没有空隙的\n就会紧紧贴在一起\n\nvh是指的视口高度（屏幕大小）`viewport height`\n盖住当前元素（做到自适应）`background-size: cover;`\n\n网站根目录`/favicon.ico`\n访问网站的`logo`\n有时候网站没在这里放icon，那只能用到`http://favicon.byi.pw/?url=相应网址`\n\n`元素名.previousSibling`\n获取元素名上一个元素\n\n`.onerror`\n发生错误以后执行","slug":"入门-JavaScript","published":1,"updated":"2018-04-26T16:07:57.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3y000vt2g3h42osl3l","content":"<p>Uncaught SyntextError: Unexpected tokken ]<br>没有被处理的语法错误： 不可预知的字符串 ]<br>which means：浏览器觉得这里不应该有一个中括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainXXX.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">random</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'我发现你输入了一个键'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>localStorage</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">'uuu'</span>, <span class=\"built_in\">JSON</span>.stringify(hash))<span class=\"comment\">//每次变化就存下来</span></span><br></pre></td></tr></table></figure>\n<p>存在浏览器的storage里面<br><code>var hashInLocalStorage = JSON.parse(localStorage.getItem(&#39;uuu&#39;) || &#39;&#39;)</code><br>取出localStorage中uuu对应的hash</p>\n<p>inline元素中间有回车本应该有个空隙<br>JavaScript生成的inline元素是没有空隙的<br>就会紧紧贴在一起</p>\n<p>vh是指的视口高度（屏幕大小）<code>viewport height</code><br>盖住当前元素（做到自适应）<code>background-size: cover;</code></p>\n<p>网站根目录<code>/favicon.ico</code><br>访问网站的<code>logo</code><br>有时候网站没在这里放icon，那只能用到<code>http://favicon.byi.pw/?url=相应网址</code></p>\n<p><code>元素名.previousSibling</code><br>获取元素名上一个元素</p>\n<p><code>.onerror</code><br>发生错误以后执行</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Uncaught SyntextError: Unexpected tokken ]<br>没有被处理的语法错误： 不可预知的字符串 ]<br>which means：浏览器觉得这里不应该有一个中括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mainXXX.onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">random</span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'我发现你输入了一个键'</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>localStorage</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localStorage.setItem(<span class=\"string\">'uuu'</span>, <span class=\"built_in\">JSON</span>.stringify(hash))<span class=\"comment\">//每次变化就存下来</span></span><br></pre></td></tr></table></figure>\n<p>存在浏览器的storage里面<br><code>var hashInLocalStorage = JSON.parse(localStorage.getItem(&#39;uuu&#39;) || &#39;&#39;)</code><br>取出localStorage中uuu对应的hash</p>\n<p>inline元素中间有回车本应该有个空隙<br>JavaScript生成的inline元素是没有空隙的<br>就会紧紧贴在一起</p>\n<p>vh是指的视口高度（屏幕大小）<code>viewport height</code><br>盖住当前元素（做到自适应）<code>background-size: cover;</code></p>\n<p>网站根目录<code>/favicon.ico</code><br>访问网站的<code>logo</code><br>有时候网站没在这里放icon，那只能用到<code>http://favicon.byi.pw/?url=相应网址</code></p>\n<p><code>元素名.previousSibling</code><br>获取元素名上一个元素</p>\n<p><code>.onerror</code><br>发生错误以后执行</p>\n"},{"title":"命令行使用","date":"2018-03-16T18:07:03.000Z","_content":"### 一. 命令行\n<font color=gray>命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。\n~~图形界面的爷爷。~~\n在了解后，可以用命令行完成任何图形界面下可以完成事情。</font>\n\n---\n### 二. 常用命令\n######<font color=gray>有些常用的关于文件操作的命令</font>\n\n|缩写|全拼|作用|备注|\n|:-------:|:-------:|:-------:|:-------:|\n|touch|还是touch|创建文件|不存在就摸不到，所以摸一下|\n|mkdir|make directory|创建目录(路径)|什么都不加是在当前目录创建路径，要在目标位置创建请标明-p目标路径|\n|echo|echo|创建文件|echo \"添加进去的东西\" > 文件名.后缀。中间的>换成>!则是覆盖|\n|mv|move|移动|mv 文件名 文件名则可以重命名该文件|\n|cp|copy|复制|现在清楚为什么CAD的copy命令默认快捷键是CP而不是CO了吧|\n|rm|remove|删除|-f强行删文件 -r删目录 -rf强删目录|\n|pwd|Print Working Directory|显示当前目录|拿来看绝对路径的|\n|cd|change directory|改变目录|很常用|\n|-r||目录相关|和目录相关加-r|\n|-f||强制相关|需要强行的加-f|\n|in -s||建立软链|in -s 真实文件 链接|\n|cat||查看文件内容|配置git生成SSH公钥的时候用过|\n**还有命令不认识怎么办？——explainshell.com欢迎您\n不知道这个操作怎么完成怎么办？——Plz Google it.**\n***文章太长不想看？——tldr(too long didnt read)***\n①打开命令行键入`npm install -g tldr`报错就在开头加`sudo`\n②安装完成后`tldr 你要查的快捷键`回车，显示该命令如何操作。\n③愉快的使用命令行吧。\n\n---\n### 三. 自定义命令行\n####~/.bashrc文件的自动运行\n该的作用是在启动Git Bash之前执行命令（可以理解为开机自动启动）\n例：\n```touch ~/.bashrc```创建文件\n`start ~/.bashrc`开启文件or`echo \"echo 'Here I am.'\" >> ~/.bashrc`命令行编辑文件加入Here I am.内容。\n重启Git Bash看到我们输入的Here I am.\n\n####alias命令设置快捷键\n在~/.bashrc文件里添加\n`alias 缩写='命令'`\n例如：`alias ga=‘git add’`\n保存退出后运行`source ~/.bashrc`输入ga就可以自动添加文件到git暂存区了。","source":"_posts/命令行使用.md","raw":"---\ntitle: 命令行使用\ndate: 2018-03-17 02:07:03\ntags: 命令行相关\n---\n### 一. 命令行\n<font color=gray>命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。\n~~图形界面的爷爷。~~\n在了解后，可以用命令行完成任何图形界面下可以完成事情。</font>\n\n---\n### 二. 常用命令\n######<font color=gray>有些常用的关于文件操作的命令</font>\n\n|缩写|全拼|作用|备注|\n|:-------:|:-------:|:-------:|:-------:|\n|touch|还是touch|创建文件|不存在就摸不到，所以摸一下|\n|mkdir|make directory|创建目录(路径)|什么都不加是在当前目录创建路径，要在目标位置创建请标明-p目标路径|\n|echo|echo|创建文件|echo \"添加进去的东西\" > 文件名.后缀。中间的>换成>!则是覆盖|\n|mv|move|移动|mv 文件名 文件名则可以重命名该文件|\n|cp|copy|复制|现在清楚为什么CAD的copy命令默认快捷键是CP而不是CO了吧|\n|rm|remove|删除|-f强行删文件 -r删目录 -rf强删目录|\n|pwd|Print Working Directory|显示当前目录|拿来看绝对路径的|\n|cd|change directory|改变目录|很常用|\n|-r||目录相关|和目录相关加-r|\n|-f||强制相关|需要强行的加-f|\n|in -s||建立软链|in -s 真实文件 链接|\n|cat||查看文件内容|配置git生成SSH公钥的时候用过|\n**还有命令不认识怎么办？——explainshell.com欢迎您\n不知道这个操作怎么完成怎么办？——Plz Google it.**\n***文章太长不想看？——tldr(too long didnt read)***\n①打开命令行键入`npm install -g tldr`报错就在开头加`sudo`\n②安装完成后`tldr 你要查的快捷键`回车，显示该命令如何操作。\n③愉快的使用命令行吧。\n\n---\n### 三. 自定义命令行\n####~/.bashrc文件的自动运行\n该的作用是在启动Git Bash之前执行命令（可以理解为开机自动启动）\n例：\n```touch ~/.bashrc```创建文件\n`start ~/.bashrc`开启文件or`echo \"echo 'Here I am.'\" >> ~/.bashrc`命令行编辑文件加入Here I am.内容。\n重启Git Bash看到我们输入的Here I am.\n\n####alias命令设置快捷键\n在~/.bashrc文件里添加\n`alias 缩写='命令'`\n例如：`alias ga=‘git add’`\n保存退出后运行`source ~/.bashrc`输入ga就可以自动添加文件到git暂存区了。","slug":"命令行使用","published":1,"updated":"2018-03-17T12:52:59.577Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp3z000xt2g3u2nbtyof","content":"<h3 id=\"一-命令行\"><a href=\"#一-命令行\" class=\"headerlink\" title=\"一. 命令行\"></a>一. 命令行</h3><font color=\"gray\">命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。<br><del>图形界面的爷爷。</del><br>在了解后，可以用命令行完成任何图形界面下可以完成事情。</font>\n\n<hr>\n<h3 id=\"二-常用命令\"><a href=\"#二-常用命令\" class=\"headerlink\" title=\"二. 常用命令\"></a>二. 常用命令</h3><p>######<font color=\"gray\">有些常用的关于文件操作的命令</font></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">缩写</th>\n<th style=\"text-align:center\">全拼</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">touch</td>\n<td style=\"text-align:center\">还是touch</td>\n<td style=\"text-align:center\">创建文件</td>\n<td style=\"text-align:center\">不存在就摸不到，所以摸一下</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mkdir</td>\n<td style=\"text-align:center\">make directory</td>\n<td style=\"text-align:center\">创建目录(路径)</td>\n<td style=\"text-align:center\">什么都不加是在当前目录创建路径，要在目标位置创建请标明-p目标路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">echo</td>\n<td style=\"text-align:center\">echo</td>\n<td style=\"text-align:center\">创建文件</td>\n<td style=\"text-align:center\">echo “添加进去的东西” &gt; 文件名.后缀。中间的&gt;换成&gt;!则是覆盖</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mv</td>\n<td style=\"text-align:center\">move</td>\n<td style=\"text-align:center\">移动</td>\n<td style=\"text-align:center\">mv 文件名 文件名则可以重命名该文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cp</td>\n<td style=\"text-align:center\">copy</td>\n<td style=\"text-align:center\">复制</td>\n<td style=\"text-align:center\">现在清楚为什么CAD的copy命令默认快捷键是CP而不是CO了吧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rm</td>\n<td style=\"text-align:center\">remove</td>\n<td style=\"text-align:center\">删除</td>\n<td style=\"text-align:center\">-f强行删文件 -r删目录 -rf强删目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pwd</td>\n<td style=\"text-align:center\">Print Working Directory</td>\n<td style=\"text-align:center\">显示当前目录</td>\n<td style=\"text-align:center\">拿来看绝对路径的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cd</td>\n<td style=\"text-align:center\">change directory</td>\n<td style=\"text-align:center\">改变目录</td>\n<td style=\"text-align:center\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">目录相关</td>\n<td style=\"text-align:center\">和目录相关加-r</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">强制相关</td>\n<td style=\"text-align:center\">需要强行的加-f</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in -s</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">建立软链</td>\n<td style=\"text-align:center\">in -s 真实文件 链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cat</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">查看文件内容</td>\n<td style=\"text-align:center\">配置git生成SSH公钥的时候用过</td>\n</tr>\n</tbody>\n</table>\n<p><strong>还有命令不认识怎么办？——explainshell.com欢迎您<br>不知道这个操作怎么完成怎么办？——Plz Google it.</strong><br><strong><em>文章太长不想看？——tldr(too long didnt read)</em></strong><br>①打开命令行键入<code>npm install -g tldr</code>报错就在开头加<code>sudo</code><br>②安装完成后<code>tldr 你要查的快捷键</code>回车，显示该命令如何操作。<br>③愉快的使用命令行吧。</p>\n<hr>\n<h3 id=\"三-自定义命令行\"><a href=\"#三-自定义命令行\" class=\"headerlink\" title=\"三. 自定义命令行\"></a>三. 自定义命令行</h3><p>####~/.bashrc文件的自动运行<br>该的作用是在启动Git Bash之前执行命令（可以理解为开机自动启动）<br>例：<br><code>touch ~/.bashrc</code>创建文件<br><code>start ~/.bashrc</code>开启文件or<code>echo &quot;echo &#39;Here I am.&#39;&quot; &gt;&gt; ~/.bashrc</code>命令行编辑文件加入Here I am.内容。<br>重启Git Bash看到我们输入的Here I am.</p>\n<p>####alias命令设置快捷键<br>在~/.bashrc文件里添加<br><code>alias 缩写=&#39;命令&#39;</code><br>例如：<code>alias ga=‘git add’</code><br>保存退出后运行<code>source ~/.bashrc</code>输入ga就可以自动添加文件到git暂存区了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一-命令行\"><a href=\"#一-命令行\" class=\"headerlink\" title=\"一. 命令行\"></a>一. 命令行</h3><font color=\"gray\">命令提示符是在操作系统中，提示进行命令输入的一种工作提示符。<br><del>图形界面的爷爷。</del><br>在了解后，可以用命令行完成任何图形界面下可以完成事情。</font>\n\n<hr>\n<h3 id=\"二-常用命令\"><a href=\"#二-常用命令\" class=\"headerlink\" title=\"二. 常用命令\"></a>二. 常用命令</h3><p>######<font color=\"gray\">有些常用的关于文件操作的命令</font></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">缩写</th>\n<th style=\"text-align:center\">全拼</th>\n<th style=\"text-align:center\">作用</th>\n<th style=\"text-align:center\">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">touch</td>\n<td style=\"text-align:center\">还是touch</td>\n<td style=\"text-align:center\">创建文件</td>\n<td style=\"text-align:center\">不存在就摸不到，所以摸一下</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mkdir</td>\n<td style=\"text-align:center\">make directory</td>\n<td style=\"text-align:center\">创建目录(路径)</td>\n<td style=\"text-align:center\">什么都不加是在当前目录创建路径，要在目标位置创建请标明-p目标路径</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">echo</td>\n<td style=\"text-align:center\">echo</td>\n<td style=\"text-align:center\">创建文件</td>\n<td style=\"text-align:center\">echo “添加进去的东西” &gt; 文件名.后缀。中间的&gt;换成&gt;!则是覆盖</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">mv</td>\n<td style=\"text-align:center\">move</td>\n<td style=\"text-align:center\">移动</td>\n<td style=\"text-align:center\">mv 文件名 文件名则可以重命名该文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cp</td>\n<td style=\"text-align:center\">copy</td>\n<td style=\"text-align:center\">复制</td>\n<td style=\"text-align:center\">现在清楚为什么CAD的copy命令默认快捷键是CP而不是CO了吧</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rm</td>\n<td style=\"text-align:center\">remove</td>\n<td style=\"text-align:center\">删除</td>\n<td style=\"text-align:center\">-f强行删文件 -r删目录 -rf强删目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">pwd</td>\n<td style=\"text-align:center\">Print Working Directory</td>\n<td style=\"text-align:center\">显示当前目录</td>\n<td style=\"text-align:center\">拿来看绝对路径的</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cd</td>\n<td style=\"text-align:center\">change directory</td>\n<td style=\"text-align:center\">改变目录</td>\n<td style=\"text-align:center\">很常用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">目录相关</td>\n<td style=\"text-align:center\">和目录相关加-r</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">强制相关</td>\n<td style=\"text-align:center\">需要强行的加-f</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">in -s</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">建立软链</td>\n<td style=\"text-align:center\">in -s 真实文件 链接</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">cat</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">查看文件内容</td>\n<td style=\"text-align:center\">配置git生成SSH公钥的时候用过</td>\n</tr>\n</tbody>\n</table>\n<p><strong>还有命令不认识怎么办？——explainshell.com欢迎您<br>不知道这个操作怎么完成怎么办？——Plz Google it.</strong><br><strong><em>文章太长不想看？——tldr(too long didnt read)</em></strong><br>①打开命令行键入<code>npm install -g tldr</code>报错就在开头加<code>sudo</code><br>②安装完成后<code>tldr 你要查的快捷键</code>回车，显示该命令如何操作。<br>③愉快的使用命令行吧。</p>\n<hr>\n<h3 id=\"三-自定义命令行\"><a href=\"#三-自定义命令行\" class=\"headerlink\" title=\"三. 自定义命令行\"></a>三. 自定义命令行</h3><p>####~/.bashrc文件的自动运行<br>该的作用是在启动Git Bash之前执行命令（可以理解为开机自动启动）<br>例：<br><code>touch ~/.bashrc</code>创建文件<br><code>start ~/.bashrc</code>开启文件or<code>echo &quot;echo &#39;Here I am.&#39;&quot; &gt;&gt; ~/.bashrc</code>命令行编辑文件加入Here I am.内容。<br>重启Git Bash看到我们输入的Here I am.</p>\n<p>####alias命令设置快捷键<br>在~/.bashrc文件里添加<br><code>alias 缩写=&#39;命令&#39;</code><br>例如：<code>alias ga=‘git add’</code><br>保存退出后运行<code>source ~/.bashrc</code>输入ga就可以自动添加文件到git暂存区了。</p>\n"},{"title":"入门-算法初级","date":"2018-03-29T01:13:50.000Z","_content":"a <- 1\n<-是赋值的意思。\nvisualgo.net\n哈希\n只要它是\n‘键’： ‘值’的模式，都叫哈希。\n\n比较排序的复杂程度NlogN","source":"_posts/入门-算法初级.md","raw":"---\ntitle: 入门-算法初级\ndate: 2018-03-29 09:13:50\ntags: 算法\n---\na <- 1\n<-是赋值的意思。\nvisualgo.net\n哈希\n只要它是\n‘键’： ‘值’的模式，都叫哈希。\n\n比较排序的复杂程度NlogN","slug":"入门-算法初级","published":1,"updated":"2018-03-29T17:43:02.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp40000yt2g34oeq95lg","content":"<p>a &lt;- 1<br>&lt;-是赋值的意思。<br>visualgo.net<br>哈希<br>只要它是<br>‘键’： ‘值’的模式，都叫哈希。</p>\n<p>比较排序的复杂程度NlogN</p>\n","site":{"data":{}},"excerpt":"","more":"<p>a &lt;- 1<br>&lt;-是赋值的意思。<br>visualgo.net<br>哈希<br>只要它是<br>‘键’： ‘值’的模式，都叫哈希。</p>\n<p>比较排序的复杂程度NlogN</p>\n"},{"title":"脚本入门","date":"2018-03-17T12:56:33.000Z","_content":"## 1.脚本\n\n哇这一篇突然不会写了，sh脚本就命令行怎么用你就怎么写\nnode.js脚本就js怎么写你就怎么写，查文档找替换的命令就可以.\n<font size=4 color=gray>最后js文件第一行加shebang</font>\n`！/user/bin/env node`","source":"_posts/脚本入门.md","raw":"---\ntitle: 脚本入门\ndate: 2018-03-17 20:56:33\ntags:\n---\n## 1.脚本\n\n哇这一篇突然不会写了，sh脚本就命令行怎么用你就怎么写\nnode.js脚本就js怎么写你就怎么写，查文档找替换的命令就可以.\n<font size=4 color=gray>最后js文件第一行加shebang</font>\n`！/user/bin/env node`","slug":"脚本入门","published":1,"updated":"2018-03-19T14:23:27.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp410011t2g3iiz4i2uo","content":"<h2 id=\"1-脚本\"><a href=\"#1-脚本\" class=\"headerlink\" title=\"1.脚本\"></a>1.脚本</h2><p>哇这一篇突然不会写了，sh脚本就命令行怎么用你就怎么写<br>node.js脚本就js怎么写你就怎么写，查文档找替换的命令就可以.</p>\n<p><font size=\"4\" color=\"gray\">最后js文件第一行加shebang</font><br><code>！/user/bin/env node</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-脚本\"><a href=\"#1-脚本\" class=\"headerlink\" title=\"1.脚本\"></a>1.脚本</h2><p>哇这一篇突然不会写了，sh脚本就命令行怎么用你就怎么写<br>node.js脚本就js怎么写你就怎么写，查文档找替换的命令就可以.</p>\n<p><font size=\"4\" color=\"gray\">最后js文件第一行加shebang</font><br><code>！/user/bin/env node</code></p>\n"},{"title":"配置Hexo博客","date":"2018-03-16T18:08:19.000Z","_content":"## 1.配置环境\nI. Deepin 15.5系统（Arch Linux内核）\nII. 需要nood.js、NPM、Git。\nIII. 需要Github SSH公钥（linux环境下存在权限问题，务必在root用户下添加SSH公钥）——\n`sudo ssh-keygen -t rsa -C \"your_email@example.com\"`\n`sudo cat ~/.ssh/id_rsa.pub`\n`sudo cat ~/.ssh/id_rsa.pub`\n拷贝id_rsa.pub文件内所有内容去Github的SSH页面New SSH key\n去掉`sudo`重做以上四部以添加普通用户SSH Key\n以上操作用于`sudo`命令中由于SSH Key缺失而产生的：\n`Permission denied (publickey).`\n`fatal: The remote end hung up unexpectedly`\n~~权限问题~~\n\n---\n\n## 2.创建博客\nI. 终端进入安全目录（`cd ~Desktop`or`cd ~/Documents`）\nII. 在GitHub上创建一个空repo（即空仓库，后文统称repo）名称`用户名.githubio`\nIII. 运行`npm install -g hexo-cli`安装Hexo\nIV. `hexo init myBlog`创建博客本地路径`cd myBlog`进入博客路径\nV. `npm i` 安装Hexo模块（Hexo规格）\nVI. `hexo new 博客名` 创建博客\n这里注意`hexo new`命令创建一篇博客才是有效的，仅在/source/_posts添加MarkDown文件并不能创建博客。（不然给你hexo命令干吗用？）\nVII. `open _config.yml`打开配置文件更改网站配置（可用vim也可用其他软件）：\n\n<font size=2 color=gray>把title改成标题名\n把author改成你自己的名字（作者）\n最后一行type改成`type: git`(git前有个空格，不做盲人。)\n与type平齐加一行`repo: 仓库地址` 地址为`git@github.com:用户名.github.io`(地址前面有个空格，其余同上括号。)</font>\n\nVIII. `npm install hexo-developer-git --save`这步很重要，安装git部署插件。\nIX. `Hexo deploy`发布发布发布\nX. 这时候也许会遇到各种各样奇奇怪怪的问题~~比如~~:\n`Permission denied`这时候在命令前加`sudo`\nGit部署问题：\n`fatal: 'username.github.io' does not appear to be a git repository`\n请确认已配置Git，或者将地址改为HTTPS地址。\n或许还有别的特别麻烦的问题，这个原因很多列出来超长...[所以我决定丢一个链接](https://hexo.io/zh-cn/docs/troubleshooting.html)\nXI. 进入`用户名.github.io`即可看到效果\nXII. 对博客的任意改动执行`hexo g` 和 `hexo d`即可发布。\n\n---\n## 3.博客创建Git仓库代码\nI. 为什么需要备份呢？\n因为`hexo g hexo d`发布的仅仅是本地博客仓库的public路径下的内容，但是我们需要博客仓库的整个代码以防意外~~手抖~~。\nII. 两种方法:分支＆新仓库\nIII. 分支：\n    1.创建仓库用户名.github.io\n    2.创建两个分支：master和hexo\n    3.设置Hexo默认分支（反正git push用的是Hexo分支，hexo命令只影响master）\n    4.`git clone git@github.com:用户名/用户名.github.io.git`拷贝仓库\n    5.`cd 用户名.github.io.git`进入文件夹`npm install hexo`、`hexo init`、`npm i`、`npm install hexo-deployer-git --save`\n    6.修改_config.uml中deploy为master\n    7.`git add .` `git commit` `git push`三连击提交网站文件\n    8.`hexo g` `hexo d`二连击生成部署网站（有问题？请`hexo clean`）\n\nIV. 新仓库：\n    1.创建新仓库新仓库blog-Generator\n    2.在myBlog里打开终端执行（注意点SSH地址）\n![SSH](https://ws1.sinaimg.cn/large/006bYXGVgy1fpmuzxpa06j31j10zowq3.jpg)\n    3.每次`hexo d之后`请`git add .` `git commit` `git push`三连击提交网站文件","source":"_posts/配置Hexo博客.md","raw":"---\ntitle: 配置Hexo博客\ndate: 2018-03-17 02:08:19\ntags: Hexo博客相关\n---\n## 1.配置环境\nI. Deepin 15.5系统（Arch Linux内核）\nII. 需要nood.js、NPM、Git。\nIII. 需要Github SSH公钥（linux环境下存在权限问题，务必在root用户下添加SSH公钥）——\n`sudo ssh-keygen -t rsa -C \"your_email@example.com\"`\n`sudo cat ~/.ssh/id_rsa.pub`\n`sudo cat ~/.ssh/id_rsa.pub`\n拷贝id_rsa.pub文件内所有内容去Github的SSH页面New SSH key\n去掉`sudo`重做以上四部以添加普通用户SSH Key\n以上操作用于`sudo`命令中由于SSH Key缺失而产生的：\n`Permission denied (publickey).`\n`fatal: The remote end hung up unexpectedly`\n~~权限问题~~\n\n---\n\n## 2.创建博客\nI. 终端进入安全目录（`cd ~Desktop`or`cd ~/Documents`）\nII. 在GitHub上创建一个空repo（即空仓库，后文统称repo）名称`用户名.githubio`\nIII. 运行`npm install -g hexo-cli`安装Hexo\nIV. `hexo init myBlog`创建博客本地路径`cd myBlog`进入博客路径\nV. `npm i` 安装Hexo模块（Hexo规格）\nVI. `hexo new 博客名` 创建博客\n这里注意`hexo new`命令创建一篇博客才是有效的，仅在/source/_posts添加MarkDown文件并不能创建博客。（不然给你hexo命令干吗用？）\nVII. `open _config.yml`打开配置文件更改网站配置（可用vim也可用其他软件）：\n\n<font size=2 color=gray>把title改成标题名\n把author改成你自己的名字（作者）\n最后一行type改成`type: git`(git前有个空格，不做盲人。)\n与type平齐加一行`repo: 仓库地址` 地址为`git@github.com:用户名.github.io`(地址前面有个空格，其余同上括号。)</font>\n\nVIII. `npm install hexo-developer-git --save`这步很重要，安装git部署插件。\nIX. `Hexo deploy`发布发布发布\nX. 这时候也许会遇到各种各样奇奇怪怪的问题~~比如~~:\n`Permission denied`这时候在命令前加`sudo`\nGit部署问题：\n`fatal: 'username.github.io' does not appear to be a git repository`\n请确认已配置Git，或者将地址改为HTTPS地址。\n或许还有别的特别麻烦的问题，这个原因很多列出来超长...[所以我决定丢一个链接](https://hexo.io/zh-cn/docs/troubleshooting.html)\nXI. 进入`用户名.github.io`即可看到效果\nXII. 对博客的任意改动执行`hexo g` 和 `hexo d`即可发布。\n\n---\n## 3.博客创建Git仓库代码\nI. 为什么需要备份呢？\n因为`hexo g hexo d`发布的仅仅是本地博客仓库的public路径下的内容，但是我们需要博客仓库的整个代码以防意外~~手抖~~。\nII. 两种方法:分支＆新仓库\nIII. 分支：\n    1.创建仓库用户名.github.io\n    2.创建两个分支：master和hexo\n    3.设置Hexo默认分支（反正git push用的是Hexo分支，hexo命令只影响master）\n    4.`git clone git@github.com:用户名/用户名.github.io.git`拷贝仓库\n    5.`cd 用户名.github.io.git`进入文件夹`npm install hexo`、`hexo init`、`npm i`、`npm install hexo-deployer-git --save`\n    6.修改_config.uml中deploy为master\n    7.`git add .` `git commit` `git push`三连击提交网站文件\n    8.`hexo g` `hexo d`二连击生成部署网站（有问题？请`hexo clean`）\n\nIV. 新仓库：\n    1.创建新仓库新仓库blog-Generator\n    2.在myBlog里打开终端执行（注意点SSH地址）\n![SSH](https://ws1.sinaimg.cn/large/006bYXGVgy1fpmuzxpa06j31j10zowq3.jpg)\n    3.每次`hexo d之后`请`git add .` `git commit` `git push`三连击提交网站文件","slug":"配置Hexo博客","published":1,"updated":"2018-03-23T09:04:53.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp420012t2g3tfuuos7v","content":"<h2 id=\"1-配置环境\"><a href=\"#1-配置环境\" class=\"headerlink\" title=\"1.配置环境\"></a>1.配置环境</h2><p>I. Deepin 15.5系统（Arch Linux内核）<br>II. 需要nood.js、NPM、Git。<br>III. 需要Github SSH公钥（linux环境下存在权限问题，务必在root用户下添加SSH公钥）——<br><code>sudo ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br><code>sudo cat ~/.ssh/id_rsa.pub</code><br><code>sudo cat ~/.ssh/id_rsa.pub</code><br>拷贝id_rsa.pub文件内所有内容去Github的SSH页面New SSH key<br>去掉<code>sudo</code>重做以上四部以添加普通用户SSH Key<br>以上操作用于<code>sudo</code>命令中由于SSH Key缺失而产生的：<br><code>Permission denied (publickey).</code><br><code>fatal: The remote end hung up unexpectedly</code><br><del>权限问题</del></p>\n<hr>\n<h2 id=\"2-创建博客\"><a href=\"#2-创建博客\" class=\"headerlink\" title=\"2.创建博客\"></a>2.创建博客</h2><p>I. 终端进入安全目录（<code>cd ~Desktop</code>or<code>cd ~/Documents</code>）<br>II. 在GitHub上创建一个空repo（即空仓库，后文统称repo）名称<code>用户名.githubio</code><br>III. 运行<code>npm install -g hexo-cli</code>安装Hexo<br>IV. <code>hexo init myBlog</code>创建博客本地路径<code>cd myBlog</code>进入博客路径<br>V. <code>npm i</code> 安装Hexo模块（Hexo规格）<br>VI. <code>hexo new 博客名</code> 创建博客<br>这里注意<code>hexo new</code>命令创建一篇博客才是有效的，仅在/source/_posts添加MarkDown文件并不能创建博客。（不然给你hexo命令干吗用？）<br>VII. <code>open _config.yml</code>打开配置文件更改网站配置（可用vim也可用其他软件）：</p>\n<font size=\"2\" color=\"gray\">把title改成标题名<br>把author改成你自己的名字（作者）<br>最后一行type改成<code>type: git</code>(git前有个空格，不做盲人。)<br>与type平齐加一行<code>repo: 仓库地址</code> 地址为<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:用户名.github.io`(地址前面有个空格，其余同上括号。)</font>\n\n<p>VIII. <code>npm install hexo-developer-git --save</code>这步很重要，安装git部署插件。<br>IX. <code>Hexo deploy</code>发布发布发布<br>X. 这时候也许会遇到各种各样奇奇怪怪的问题<del>比如</del>:<br><code>Permission denied</code>这时候在命令前加<code>sudo</code><br>Git部署问题：<br><code>fatal: &#39;username.github.io&#39; does not appear to be a git repository</code><br>请确认已配置Git，或者将地址改为HTTPS地址。<br>或许还有别的特别麻烦的问题，这个原因很多列出来超长…<a href=\"https://hexo.io/zh-cn/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">所以我决定丢一个链接</a><br>XI. 进入<code>用户名.github.io</code>即可看到效果<br>XII. 对博客的任意改动执行<code>hexo g</code> 和 <code>hexo d</code>即可发布。</p>\n<hr>\n<h2 id=\"3-博客创建Git仓库代码\"><a href=\"#3-博客创建Git仓库代码\" class=\"headerlink\" title=\"3.博客创建Git仓库代码\"></a>3.博客创建Git仓库代码</h2><p>I. 为什么需要备份呢？<br>因为<code>hexo g hexo d</code>发布的仅仅是本地博客仓库的public路径下的内容，但是我们需要博客仓库的整个代码以防意外<del>手抖</del>。<br>II. 两种方法:分支＆新仓库<br>III. 分支：<br>    1.创建仓库用户名.github.io<br>    2.创建两个分支：master和hexo<br>    3.设置Hexo默认分支（反正git push用的是Hexo分支，hexo命令只影响master）<br>    4.<code>git clone git@github.com:用户名/用户名.github.io.git</code>拷贝仓库<br>    5.<code>cd 用户名.github.io.git</code>进入文件夹<code>npm install hexo</code>、<code>hexo init</code>、<code>npm i</code>、<code>npm install hexo-deployer-git --save</code><br>    6.修改_config.uml中deploy为master<br>    7.<code>git add .</code> <code>git commit</code> <code>git push</code>三连击提交网站文件<br>    8.<code>hexo g</code> <code>hexo d</code>二连击生成部署网站（有问题？请<code>hexo clean</code>）</p>\n<p>IV. 新仓库：<br>    1.创建新仓库新仓库blog-Generator<br>    2.在myBlog里打开终端执行（注意点SSH地址）<br><img src=\"https://ws1.sinaimg.cn/large/006bYXGVgy1fpmuzxpa06j31j10zowq3.jpg\" alt=\"SSH\"><br>    3.每次<code>hexo d之后</code>请<code>git add .</code> <code>git commit</code> <code>git push</code>三连击提交网站文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-配置环境\"><a href=\"#1-配置环境\" class=\"headerlink\" title=\"1.配置环境\"></a>1.配置环境</h2><p>I. Deepin 15.5系统（Arch Linux内核）<br>II. 需要nood.js、NPM、Git。<br>III. 需要Github SSH公钥（linux环境下存在权限问题，务必在root用户下添加SSH公钥）——<br><code>sudo ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code><br><code>sudo cat ~/.ssh/id_rsa.pub</code><br><code>sudo cat ~/.ssh/id_rsa.pub</code><br>拷贝id_rsa.pub文件内所有内容去Github的SSH页面New SSH key<br>去掉<code>sudo</code>重做以上四部以添加普通用户SSH Key<br>以上操作用于<code>sudo</code>命令中由于SSH Key缺失而产生的：<br><code>Permission denied (publickey).</code><br><code>fatal: The remote end hung up unexpectedly</code><br><del>权限问题</del></p>\n<hr>\n<h2 id=\"2-创建博客\"><a href=\"#2-创建博客\" class=\"headerlink\" title=\"2.创建博客\"></a>2.创建博客</h2><p>I. 终端进入安全目录（<code>cd ~Desktop</code>or<code>cd ~/Documents</code>）<br>II. 在GitHub上创建一个空repo（即空仓库，后文统称repo）名称<code>用户名.githubio</code><br>III. 运行<code>npm install -g hexo-cli</code>安装Hexo<br>IV. <code>hexo init myBlog</code>创建博客本地路径<code>cd myBlog</code>进入博客路径<br>V. <code>npm i</code> 安装Hexo模块（Hexo规格）<br>VI. <code>hexo new 博客名</code> 创建博客<br>这里注意<code>hexo new</code>命令创建一篇博客才是有效的，仅在/source/_posts添加MarkDown文件并不能创建博客。（不然给你hexo命令干吗用？）<br>VII. <code>open _config.yml</code>打开配置文件更改网站配置（可用vim也可用其他软件）：</p>\n<font size=\"2\" color=\"gray\">把title改成标题名<br>把author改成你自己的名字（作者）<br>最后一行type改成<code>type: git</code>(git前有个空格，不做盲人。)<br>与type平齐加一行<code>repo: 仓库地址</code> 地址为<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:用户名.github.io`(地址前面有个空格，其余同上括号。)</font>\n\n<p>VIII. <code>npm install hexo-developer-git --save</code>这步很重要，安装git部署插件。<br>IX. <code>Hexo deploy</code>发布发布发布<br>X. 这时候也许会遇到各种各样奇奇怪怪的问题<del>比如</del>:<br><code>Permission denied</code>这时候在命令前加<code>sudo</code><br>Git部署问题：<br><code>fatal: &#39;username.github.io&#39; does not appear to be a git repository</code><br>请确认已配置Git，或者将地址改为HTTPS地址。<br>或许还有别的特别麻烦的问题，这个原因很多列出来超长…<a href=\"https://hexo.io/zh-cn/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">所以我决定丢一个链接</a><br>XI. 进入<code>用户名.github.io</code>即可看到效果<br>XII. 对博客的任意改动执行<code>hexo g</code> 和 <code>hexo d</code>即可发布。</p>\n<hr>\n<h2 id=\"3-博客创建Git仓库代码\"><a href=\"#3-博客创建Git仓库代码\" class=\"headerlink\" title=\"3.博客创建Git仓库代码\"></a>3.博客创建Git仓库代码</h2><p>I. 为什么需要备份呢？<br>因为<code>hexo g hexo d</code>发布的仅仅是本地博客仓库的public路径下的内容，但是我们需要博客仓库的整个代码以防意外<del>手抖</del>。<br>II. 两种方法:分支＆新仓库<br>III. 分支：<br>    1.创建仓库用户名.github.io<br>    2.创建两个分支：master和hexo<br>    3.设置Hexo默认分支（反正git push用的是Hexo分支，hexo命令只影响master）<br>    4.<code>git clone git@github.com:用户名/用户名.github.io.git</code>拷贝仓库<br>    5.<code>cd 用户名.github.io.git</code>进入文件夹<code>npm install hexo</code>、<code>hexo init</code>、<code>npm i</code>、<code>npm install hexo-deployer-git --save</code><br>    6.修改_config.uml中deploy为master<br>    7.<code>git add .</code> <code>git commit</code> <code>git push</code>三连击提交网站文件<br>    8.<code>hexo g</code> <code>hexo d</code>二连击生成部署网站（有问题？请<code>hexo clean</code>）</p>\n<p>IV. 新仓库：<br>    1.创建新仓库新仓库blog-Generator<br>    2.在myBlog里打开终端执行（注意点SSH地址）<br><img src=\"https://ws1.sinaimg.cn/large/006bYXGVgy1fpmuzxpa06j31j10zowq3.jpg\" alt=\"SSH\"><br>    3.每次<code>hexo d之后</code>请<code>git add .</code> <code>git commit</code> <code>git push</code>三连击提交网站文件</p>\n"},{"title":"重构-始","date":"2018-04-28T15:46:19.000Z","_content":"# 1.内容样式行为分离\n\n内容：HTML\n样式：CSS\n行为：JS\n\n**为什么？**\n\n## I.这时候需要一点点逆向思考：\n\n如果不这么做，会怎么样？\n\n### i.HTML写样式？\n\n```\n<body background=green>\n    <center><font color=red size=20>你好</font></center>\n</body>\n```\n\nHTML写样式，那是不是会多出来很多无意义的标签来负责样式。\n可能会混淆网页的逻辑结构。\n\n### ii.CSS来写内容？\n\n```\n<div></div>\n\ndiv::after{\n    content:'你好'\n}\n```\n\n麻烦了，第一个：选不中\n第二个：JS选不到\n\n### iii.CSS负责行为？\n加载半年\n\n### iv.JS控制样式？\n\n这时候可能有点争议\n`jQuery`有两个很著名的`api`\n`$div.show()`和`$div.hide()`\n原则上是不推荐用的\n\n```\n<body>\n    <div id=x>你好</div>\n</body>\n\nvar $div = $('#x')\n$div.hide()\n$div.show()   //这时候div.style.display 应该是 'block'\n```\n\n那么问题来了：`hide`肯定是`display:none;`\n那么`show`了以后呢？\n如果一开始在CSS里写好`display: none;`\n那么`show`了以后`display: block;`\n\n变成`div`默认的了，`jQuery`在猜，改变后再还原改变之前的属性\n不是很可靠\n\n所以上策是改变标签的class\n\n```\nvar $div = $('#x')\n$div.addClass('active')  //或者'enable' 'disable' \n//之后在css表达他在某种状态的时候的属性\n```\n\n### v.各司其职，其乐融融。","source":"_posts/重构-始.md","raw":"---\ntitle: 重构-始\ndate: 2018-04-28 23:46:19\ntags: 重构\n---\n# 1.内容样式行为分离\n\n内容：HTML\n样式：CSS\n行为：JS\n\n**为什么？**\n\n## I.这时候需要一点点逆向思考：\n\n如果不这么做，会怎么样？\n\n### i.HTML写样式？\n\n```\n<body background=green>\n    <center><font color=red size=20>你好</font></center>\n</body>\n```\n\nHTML写样式，那是不是会多出来很多无意义的标签来负责样式。\n可能会混淆网页的逻辑结构。\n\n### ii.CSS来写内容？\n\n```\n<div></div>\n\ndiv::after{\n    content:'你好'\n}\n```\n\n麻烦了，第一个：选不中\n第二个：JS选不到\n\n### iii.CSS负责行为？\n加载半年\n\n### iv.JS控制样式？\n\n这时候可能有点争议\n`jQuery`有两个很著名的`api`\n`$div.show()`和`$div.hide()`\n原则上是不推荐用的\n\n```\n<body>\n    <div id=x>你好</div>\n</body>\n\nvar $div = $('#x')\n$div.hide()\n$div.show()   //这时候div.style.display 应该是 'block'\n```\n\n那么问题来了：`hide`肯定是`display:none;`\n那么`show`了以后呢？\n如果一开始在CSS里写好`display: none;`\n那么`show`了以后`display: block;`\n\n变成`div`默认的了，`jQuery`在猜，改变后再还原改变之前的属性\n不是很可靠\n\n所以上策是改变标签的class\n\n```\nvar $div = $('#x')\n$div.addClass('active')  //或者'enable' 'disable' \n//之后在css表达他在某种状态的时候的属性\n```\n\n### v.各司其职，其乐融融。","slug":"重构-始","published":1,"updated":"2018-04-28T16:36:11.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgwrwp440015t2g39bjk46yf","content":"<h1 id=\"1-内容样式行为分离\"><a href=\"#1-内容样式行为分离\" class=\"headerlink\" title=\"1.内容样式行为分离\"></a>1.内容样式行为分离</h1><p>内容：HTML<br>样式：CSS<br>行为：JS</p>\n<p><strong>为什么？</strong></p>\n<h2 id=\"I-这时候需要一点点逆向思考：\"><a href=\"#I-这时候需要一点点逆向思考：\" class=\"headerlink\" title=\"I.这时候需要一点点逆向思考：\"></a>I.这时候需要一点点逆向思考：</h2><p>如果不这么做，会怎么样？</p>\n<h3 id=\"i-HTML写样式？\"><a href=\"#i-HTML写样式？\" class=\"headerlink\" title=\"i.HTML写样式？\"></a>i.HTML写样式？</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">background</span>=<span class=\"string\">green</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">red</span> <span class=\"attr\">size</span>=<span class=\"string\">20</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>HTML写样式，那是不是会多出来很多无意义的标签来负责样式。<br>可能会混淆网页的逻辑结构。</p>\n<h3 id=\"ii-CSS来写内容？\"><a href=\"#ii-CSS来写内容？\" class=\"headerlink\" title=\"ii.CSS来写内容？\"></a>ii.CSS来写内容？</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&lt;div&gt;</span>&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">di</span><span class=\"variable\">v:</span>:after&#123;</span><br><span class=\"line\">    conten<span class=\"variable\">t:</span><span class=\"string\">'你好'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>麻烦了，第一个：选不中<br>第二个：JS选不到</p>\n<h3 id=\"iii-CSS负责行为？\"><a href=\"#iii-CSS负责行为？\" class=\"headerlink\" title=\"iii.CSS负责行为？\"></a>iii.CSS负责行为？</h3><p>加载半年</p>\n<h3 id=\"iv-JS控制样式？\"><a href=\"#iv-JS控制样式？\" class=\"headerlink\" title=\"iv.JS控制样式？\"></a>iv.JS控制样式？</h3><p>这时候可能有点争议<br><code>jQuery</code>有两个很著名的<code>api</code><br><code>$div.show()</code>和<code>$div.hide()</code><br>原则上是不推荐用的</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;<span class=\"built-in\">div</span> id=x&gt;你好&lt;/<span class=\"built-in\">div</span>&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var <span class=\"symbol\">$</span><span class=\"built-in\">div</span> = <span class=\"symbol\">$</span>(<span class=\"string\">'#x'</span>)</span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$div</span>.hide()</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$div</span>.show()   //这时候div.style.display 应该是 'block'</span></span><br></pre></td></tr></table></figure>\n<p>那么问题来了：<code>hide</code>肯定是<code>display:none;</code><br>那么<code>show</code>了以后呢？<br>如果一开始在CSS里写好<code>display: none;</code><br>那么<code>show</code>了以后<code>display: block;</code></p>\n<p>变成<code>div</code>默认的了，<code>jQuery</code>在猜，改变后再还原改变之前的属性<br>不是很可靠</p>\n<p>所以上策是改变标签的class</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"variable\">$div</span> = $(<span class=\"string\">'#x'</span>)</span><br><span class=\"line\"><span class=\"variable\">$div</span>.addClass(<span class=\"string\">'active'</span>)  <span class=\"regexp\">//</span>或者<span class=\"string\">'enable'</span> <span class=\"string\">'disable'</span> </span><br><span class=\"line\"><span class=\"regexp\">//</span>之后在css表达他在某种状态的时候的属性</span><br></pre></td></tr></table></figure>\n<h3 id=\"v-各司其职，其乐融融。\"><a href=\"#v-各司其职，其乐融融。\" class=\"headerlink\" title=\"v.各司其职，其乐融融。\"></a>v.各司其职，其乐融融。</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-内容样式行为分离\"><a href=\"#1-内容样式行为分离\" class=\"headerlink\" title=\"1.内容样式行为分离\"></a>1.内容样式行为分离</h1><p>内容：HTML<br>样式：CSS<br>行为：JS</p>\n<p><strong>为什么？</strong></p>\n<h2 id=\"I-这时候需要一点点逆向思考：\"><a href=\"#I-这时候需要一点点逆向思考：\" class=\"headerlink\" title=\"I.这时候需要一点点逆向思考：\"></a>I.这时候需要一点点逆向思考：</h2><p>如果不这么做，会怎么样？</p>\n<h3 id=\"i-HTML写样式？\"><a href=\"#i-HTML写样式？\" class=\"headerlink\" title=\"i.HTML写样式？\"></a>i.HTML写样式？</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">background</span>=<span class=\"string\">green</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">center</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">font</span> <span class=\"attr\">color</span>=<span class=\"string\">red</span> <span class=\"attr\">size</span>=<span class=\"string\">20</span>&gt;</span>你好<span class=\"tag\">&lt;/<span class=\"name\">font</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">center</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>HTML写样式，那是不是会多出来很多无意义的标签来负责样式。<br>可能会混淆网页的逻辑结构。</p>\n<h3 id=\"ii-CSS来写内容？\"><a href=\"#ii-CSS来写内容？\" class=\"headerlink\" title=\"ii.CSS来写内容？\"></a>ii.CSS来写内容？</h3><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&lt;div&gt;</span>&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">di</span><span class=\"variable\">v:</span>:after&#123;</span><br><span class=\"line\">    conten<span class=\"variable\">t:</span><span class=\"string\">'你好'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>麻烦了，第一个：选不中<br>第二个：JS选不到</p>\n<h3 id=\"iii-CSS负责行为？\"><a href=\"#iii-CSS负责行为？\" class=\"headerlink\" title=\"iii.CSS负责行为？\"></a>iii.CSS负责行为？</h3><p>加载半年</p>\n<h3 id=\"iv-JS控制样式？\"><a href=\"#iv-JS控制样式？\" class=\"headerlink\" title=\"iv.JS控制样式？\"></a>iv.JS控制样式？</h3><p>这时候可能有点争议<br><code>jQuery</code>有两个很著名的<code>api</code><br><code>$div.show()</code>和<code>$div.hide()</code><br>原则上是不推荐用的</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;<span class=\"built-in\">div</span> id=x&gt;你好&lt;/<span class=\"built-in\">div</span>&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">var <span class=\"symbol\">$</span><span class=\"built-in\">div</span> = <span class=\"symbol\">$</span>(<span class=\"string\">'#x'</span>)</span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$div</span>.hide()</span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"meta-keyword\">$div</span>.show()   //这时候div.style.display 应该是 'block'</span></span><br></pre></td></tr></table></figure>\n<p>那么问题来了：<code>hide</code>肯定是<code>display:none;</code><br>那么<code>show</code>了以后呢？<br>如果一开始在CSS里写好<code>display: none;</code><br>那么<code>show</code>了以后<code>display: block;</code></p>\n<p>变成<code>div</code>默认的了，<code>jQuery</code>在猜，改变后再还原改变之前的属性<br>不是很可靠</p>\n<p>所以上策是改变标签的class</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var <span class=\"variable\">$div</span> = $(<span class=\"string\">'#x'</span>)</span><br><span class=\"line\"><span class=\"variable\">$div</span>.addClass(<span class=\"string\">'active'</span>)  <span class=\"regexp\">//</span>或者<span class=\"string\">'enable'</span> <span class=\"string\">'disable'</span> </span><br><span class=\"line\"><span class=\"regexp\">//</span>之后在css表达他在某种状态的时候的属性</span><br></pre></td></tr></table></figure>\n<h3 id=\"v-各司其职，其乐融融。\"><a href=\"#v-各司其职，其乐融融。\" class=\"headerlink\" title=\"v.各司其职，其乐融融。\"></a>v.各司其职，其乐融融。</h3>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjgwrwp330000t2g3bxzw05ny","tag_id":"cjgwrwp3b0002t2g3astets7n","_id":"cjgwrwp3h0007t2g36dbitpj6"},{"post_id":"cjgwrwp3h0008t2g39c3ewzi3","tag_id":"cjgwrwp3h0006t2g3p7g41rjq","_id":"cjgwrwp3l000bt2g3z1om36bk"},{"post_id":"cjgwrwp390001t2g3etbpfzrv","tag_id":"cjgwrwp3h0006t2g3p7g41rjq","_id":"cjgwrwp3n000dt2g3hhxmv355"},{"post_id":"cjgwrwp3j0009t2g3bx8q163f","tag_id":"cjgwrwp3h0006t2g3p7g41rjq","_id":"cjgwrwp3o000gt2g3szxbsuqn"},{"post_id":"cjgwrwp3l000ct2g3aqw6ywht","tag_id":"cjgwrwp3h0006t2g3p7g41rjq","_id":"cjgwrwp3r000it2g30e2bw99s"},{"post_id":"cjgwrwp3d0003t2g3116mtl59","tag_id":"cjgwrwp3l000at2g3ldgjbtt4","_id":"cjgwrwp3s000lt2g3to8v2lvt"},{"post_id":"cjgwrwp3p000ht2g34dcxgn8n","tag_id":"cjgwrwp3h0006t2g3p7g41rjq","_id":"cjgwrwp3u000nt2g3sd333lws"},{"post_id":"cjgwrwp3f0004t2g3gct2dalr","tag_id":"cjgwrwp3h0006t2g3p7g41rjq","_id":"cjgwrwp3v000qt2g31b93umvs"},{"post_id":"cjgwrwp3g0005t2g35hlozsxk","tag_id":"cjgwrwp3h0006t2g3p7g41rjq","_id":"cjgwrwp3w000st2g3lkwd54pv"},{"post_id":"cjgwrwp3n000et2g3u1z7od3c","tag_id":"cjgwrwp3v000pt2g37qcf4bg9","_id":"cjgwrwp3z000wt2g3u4h41l1n"},{"post_id":"cjgwrwp3r000jt2g3ggen7p1l","tag_id":"cjgwrwp3x000ut2g3zr2uv42z","_id":"cjgwrwp410010t2g3noilavsn"},{"post_id":"cjgwrwp3u000ot2g3pu1im18j","tag_id":"cjgwrwp3x000ut2g3zr2uv42z","_id":"cjgwrwp440014t2g39i8ws4w0"},{"post_id":"cjgwrwp3z000xt2g3u2nbtyof","tag_id":"cjgwrwp430013t2g3cwypsx68","_id":"cjgwrwp450017t2g35cb96mma"},{"post_id":"cjgwrwp40000yt2g34oeq95lg","tag_id":"cjgwrwp450016t2g3fg1gtsgw","_id":"cjgwrwp450019t2g3ruhaz487"},{"post_id":"cjgwrwp420012t2g3tfuuos7v","tag_id":"cjgwrwp450018t2g3mdbmj2bx","_id":"cjgwrwp46001bt2g3i7f0eunz"},{"post_id":"cjgwrwp440015t2g39bjk46yf","tag_id":"cjgwrwp46001at2g3rt77hr3t","_id":"cjgwrwp46001ct2g3pq2xng6n"}],"Tag":[{"name":"DOM","_id":"cjgwrwp3b0002t2g3astets7n"},{"name":"JS","_id":"cjgwrwp3h0006t2g3p7g41rjq"},{"name":"JSONP","_id":"cjgwrwp3l000at2g3ldgjbtt4"},{"name":"canvas","_id":"cjgwrwp3v000pt2g37qcf4bg9"},{"name":"CSS","_id":"cjgwrwp3x000ut2g3zr2uv42z"},{"name":"命令行相关","_id":"cjgwrwp430013t2g3cwypsx68"},{"name":"算法","_id":"cjgwrwp450016t2g3fg1gtsgw"},{"name":"Hexo博客相关","_id":"cjgwrwp450018t2g3mdbmj2bx"},{"name":"重构","_id":"cjgwrwp46001at2g3rt77hr3t"}]}}