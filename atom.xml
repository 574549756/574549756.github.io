<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Protoss Oracle</title>
  
  
  <link href="/Brendan-s-Blog/atom.xml" rel="self"/>
  
  <link href="http://brendanzhang.github.io/Brendan-s-Blog/"/>
  <updated>2019-04-03T21:03:14.387Z</updated>
  <id>http://brendanzhang.github.io/Brendan-s-Blog/</id>
  
  <author>
    <name>张博涵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2019/04/04/JS%E6%8A%80%E5%B7%A7-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2019/04/04/JS技巧-持续更新/</id>
    <published>2019-04-03T21:03:14.387Z</published>
    <updated>2019-04-03T21:03:14.387Z</updated>
    
    <content type="html"><![CDATA[<p>title: JS技巧-持续更新<br>date: 2018-10-04 01:53:38<br>tags: JS<br>categories: JavaScript</p><h1 id="0-对象操作"><a href="#0-对象操作" class="headerlink" title="0.对象操作"></a>0.对象操作</h1><h2 id="I-reduce"><a href="#I-reduce" class="headerlink" title="I.reduce"></a>I.reduce</h2><h3 id="i-原始状态"><a href="#i-原始状态" class="headerlink" title="i.原始状态"></a>i.原始状态</h3><pre><code>this.view.$el.on(&apos;submit&apos;, &apos;form&apos;, (e)=&gt;{    e.preventDefault()    let form = this.view.$from.get(0)    let data = {        name: form.name.value.trim(),        summary: form.name.value.trim()    }    this.model.create(data)})</code></pre><ul><li>在进行 MVC 的表单提交的时候</li><li>往往需要表单信息更新 model 中的 data 数据</li><li>在表单信息繁多时</li><li>通常<code>let data = {blablablablabla}</code>会写的很长</li><li>为解决这个问题，使用 reduce</li></ul><h3 id="ii-改良状态"><a href="#ii-改良状态" class="headerlink" title="ii.改良状态"></a>ii.改良状态</h3><pre><code>this.view.$el.on(&apos;submit&apos;, &apos;form&apos;, (e) =&gt; {    e.preventDefault()    let form = this.view.$form.get(0)    let keys = [&apos;name&apos;, &apos;summary&apos;]    let data = {}    keys.reduce((prev, item) =&gt; {        prev[item] = form[item].value.trim()        return prev    }, data)    this.model.create(data)})</code></pre><ul><li>keys 就是原来 data 中的 key</li><li>流程如下：</li><li>可以把它理解为打劫</li><li>打劫 name ，把 form 里 name 的 value 抢到 data.name 里</li><li>return 出来已经劫走的赃物</li><li>继续打劫新的(原来的 name 保留)</li><li>打劫 summary, 把 form 里的 summary 的 value 抢到 data.summary 里</li><li>打劫结束</li></ul><h1 id="1-数组操作"><a href="#1-数组操作" class="headerlink" title="1.数组操作"></a>1.数组操作</h1><h2 id="I-Promise相关"><a href="#I-Promise相关" class="headerlink" title="I.Promise相关"></a>I.Promise相关</h2><p><strong>前言：</strong></p><ul><li>JavaScript 是以单线程运行于浏览器中</li><li>JS 和 UI 线程处于同一个线程</li><li>长时间的耗时操作，会阻塞 UI 的相应</li><li>浏览器大多数任务都应该以异步执行</li><li>Event Loop 的浏览器内部事件循环机制,使得 JS 一直以callback回调的方式进行。</li><li>喜闻乐见的回调地狱（callback hell）</li></ul><h3 id="i-遍历过程中的异步执行"><a href="#i-遍历过程中的异步执行" class="headerlink" title="i.遍历过程中的异步执行"></a>i.遍历过程中的异步执行</h3><p>使用<code>leancloud</code>获取对象信息的过程中遇到了这个问题</p><ol><li>第二轮<code>promise</code>操作依赖第一轮查找操作的结果</li><li>第一轮返回一个数组，第二轮需要对数组进行遍历</li><li>数组的每一项需要分别进行查询(异步操作)</li><li><p>最终返回一个数组进行第三轮<code>promise</code>操作</p><p> let playlistResult = new AV.Object.createWithoutData(</p><pre><code>&apos;Playlist&apos;,playlistId</code></pre><p> )<br> var query = new AV.Query(‘playlistMap’)                     // 建立查询<br> query.equalTo(‘playlistPointer’, playlistResult)                // 设置查询条件<br> return query                                                // 第一轮查询开始</p><pre><code>.find().then(playlistMap =&gt; {    let songResultsId = []    playlistMap.forEach(scm =&gt; {        this.data.templateMap.push(scm.id)        var songs = scm.get(&apos;songPointer&apos;)        songResultsId.push(songs.id)    })    return songResultsId                                // 返回第一轮查询结果}).then(async songResultsId =&gt; {                              // 传入第一轮查询数组 标记异步    let songAfter = []                                  // 建立目标数组    var searchSong = new AV.Query(&apos;Song&apos;)                   // 建立查询对象    for (i = 0; i &lt; songResultsId.length; i++) {        // 遍历开始        await searchSong.get(songResultsId[i]).then(songResult =&gt; {     // 查询开始(告诉遍历，等我查完)             songAfter.push(songResult)                  // 查询完毕，推送到目标数组        })    }    return songAfter                                    // 返回目标数组}).then(songAfter =&gt; {                                        this.data.songs = songAfter.map(song =&gt; {           // 遍历目标数组选取需要的信息        return {            id: song.id,            ...song.attributes        }    })})</code></pre></li></ol><p><strong>async 和 await</strong></p><ol><li>语义简单明确，和普通的函数执行一模一样，<code>async</code> 表达函数里有异步操作，<code>await</code> 表达紧跟在后面的表达式需要等待。</li><li><code>async</code>自带执行器</li><li>适用性更好，<code>async</code>函数的<code>await</code>命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串、布尔，等同于同步操作）</li><li><code>async</code>返回一个 Promise 对象，可以 then 链式调用。函数执行过程遇到<code>await</code>就先返回，等待<code>await</code>的异步操作完成，再继续执行后面的语句。</li><li><code>await</code>后的 Promise 对象，运行结果可能是失败，所以最好放在 try…catch 块里抓取错误信息</li><li><code>await</code>只能用在<code>async</code>函数之中，用于普通函数会报错。</li></ol><h1 id="JS-操作-CSS"><a href="#JS-操作-CSS" class="headerlink" title="JS 操作 CSS"></a>JS 操作 CSS</h1><h2 id="获取元素-CSS-样式"><a href="#获取元素-CSS-样式" class="headerlink" title="获取元素 CSS 样式"></a>获取元素 CSS 样式</h2><ul><li>由于<code>.style</code>只能获取内联元素样式</li><li>因此需要 <code>getBoundingClientRect()</code>获取元素的 CSS 样式</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: JS技巧-持续更新&lt;br&gt;date: 2018-10-04 01:53:38&lt;br&gt;tags: JS&lt;br&gt;categories: JavaScript&lt;/p&gt;
&lt;h1 id=&quot;0-对象操作&quot;&gt;&lt;a href=&quot;#0-对象操作&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>虚拟DOM</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/10/30/%E8%99%9A%E6%8B%9FDOM/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/10/30/虚拟DOM/</id>
    <published>2018-10-30T10:36:13.000Z</published>
    <updated>2019-03-05T10:16:46.611Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-虚拟-DOM"><a href="#0-虚拟-DOM" class="headerlink" title="0.虚拟 DOM"></a>0.虚拟 DOM</h1><h2 id="I-先来看看原生-DOM-是怎么工作的"><a href="#I-先来看看原生-DOM-是怎么工作的" class="headerlink" title="I.先来看看原生 DOM 是怎么工作的"></a>I.先来看看原生 DOM 是怎么工作的</h2><ol><li>用户操作 DOM 的时候，有一个元素的数据变了</li><li>删除所有 DOM ，重新创建，重新渲染，把新 DOM 丢进去</li><li>用户又创建了一条数据</li><li>好了，继续重做 1. 2. 两步。</li></ol><p>有没有感觉这一来二去造成了超大的性能开销,数据量特别大同时操作频繁的时候，会造成卡顿。</p><h2 id="II-有没有什么解决的办法呢？"><a href="#II-有没有什么解决的办法呢？" class="headerlink" title="II.有没有什么解决的办法呢？"></a>II.有没有什么解决的办法呢？</h2><ol><li>我写一个JS，和真实的 DOM 一一映射</li><li>在需要操作的时候，比较新旧数据的改变。操作 JS 的数据结构，JS 的数据量很小</li><li>无论是排序还是处理都可以从容运行</li><li>完成处理以后再把他变成一个真实的 DOM </li><li>这样完成对虚拟的 DOM 进行操作后再进行渲染</li></ol><p>通过对 JS 的数据操作，完成对真实 DOM 的数据操作</p><h1 id="1-如何实现"><a href="#1-如何实现" class="headerlink" title="1.如何实现"></a>1.如何实现</h1><h2 id="I-这里是一个简单的实现方法"><a href="#I-这里是一个简单的实现方法" class="headerlink" title="I.这里是一个简单的实现方法"></a>I.这里是一个简单的实现方法</h2><p>不考虑复杂情况的前提下，参考以下代码：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  constructor(tag, children, text) &#123;</span><br><span class="line">    <span class="built_in">this</span>.tag = tag</span><br><span class="line">    <span class="built_in">this</span>.text = text</span><br><span class="line">    <span class="built_in">this</span>.children = children</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">this</span>.tag === <span class="string">'#text'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> document.createTextNode(<span class="built_in">this</span>.text)</span><br><span class="line">    &#125;</span><br><span class="line">    let el = document.createElement(<span class="built_in">this</span>.tag)</span><br><span class="line">    <span class="built_in">this</span>.children.forEach(vChild =&gt; &#123;</span><br><span class="line">      el.appendChild(vChild.render())</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> el</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v</span></span>(tag, children, text) &#123;</span><br><span class="line">  <span class="keyword">if</span>(typeof children === <span class="string">'string'</span>) &#123;</span><br><span class="line">    text = children</span><br><span class="line">    children = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="type">VNode</span>(tag, children, text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">let nodesData = &#123;</span></span><br><span class="line"><span class="comment">  tag: 'div',</span></span><br><span class="line"><span class="comment">  children: [</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      tag: 'p',</span></span><br><span class="line"><span class="comment">      children: [</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">          tag: 'span',</span></span><br><span class="line"><span class="comment">          children: [</span></span><br><span class="line"><span class="comment">            &#123;</span></span><br><span class="line"><span class="comment">              tag: '#text',</span></span><br><span class="line"><span class="comment">              text: 'oracle.zealot.fun'</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">          ]</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      ]</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">      tag: 'span',</span></span><br><span class="line"><span class="comment">        children: [</span></span><br><span class="line"><span class="comment">          &#123;</span></span><br><span class="line"><span class="comment">            tag: '#text',</span></span><br><span class="line"><span class="comment">            text: 'zealot.fun'</span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  ]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let vNodes = v(<span class="string">'div'</span>, [</span><br><span class="line">      v(<span class="string">'p'</span>, [</span><br><span class="line">        v(<span class="string">'span'</span>, [ v(<span class="string">'#text'</span>, <span class="string">'oracle.zealot.fun'</span>) ] )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">      v(<span class="string">'span'</span>, [</span><br><span class="line">        v(<span class="string">'#text'</span>,  <span class="string">'zealot.fun'</span>)</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">console.log(vNodes.render())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchElement</span></span>(parent, <span class="keyword">new</span><span class="type">VNode</span>, oldVNode, index = <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(!oldVNode) &#123;</span><br><span class="line">    parent.appendChild(<span class="keyword">new</span><span class="type">VNode</span>.render())</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="keyword">new</span><span class="type">VNode</span>) &#123;</span><br><span class="line">    parent.removeChild(parent.childNodes[index])</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">new</span><span class="type">VNode</span>.tag !== oldVNode.tag || <span class="keyword">new</span><span class="type">VNode</span>.text !== oldVNode.text) &#123;</span><br><span class="line">    parent.replaceChild(<span class="keyword">new</span><span class="type">VNode</span>.render(), parent.childNodes[index])</span><br><span class="line">  &#125;  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(let i = <span class="number">0</span>; i &lt; <span class="keyword">new</span><span class="type">VNode</span>.children.length || i &lt; oldVNode.children.length; i++) &#123;</span><br><span class="line">      patchElement(parent.childNodes[index], <span class="keyword">new</span><span class="type">VNode</span>.children[i], oldVNode.children[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let vNodes1 = v(<span class="string">'div'</span>, [</span><br><span class="line">      v(<span class="string">'p'</span>, [</span><br><span class="line">        v(<span class="string">'span'</span>, [ v(<span class="string">'#text'</span>, <span class="string">'oracle.zealot.fun'</span>) ] )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">      v(<span class="string">'span'</span>, [</span><br><span class="line">        v(<span class="string">'#text'</span>,  <span class="string">'zealot.fun'</span>)</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">let vNodes2 = v(<span class="string">'div'</span>, [</span><br><span class="line">      v(<span class="string">'p'</span>, [</span><br><span class="line">        v(<span class="string">'span'</span>, [ </span><br><span class="line">          v(<span class="string">'#text'</span>, <span class="string">'oracle.zealot.fun'</span>) </span><br><span class="line">          ] )</span><br><span class="line">        ]</span><br><span class="line">      ),</span><br><span class="line">      v(<span class="string">'span'</span>, [</span><br><span class="line">        v(<span class="string">'#text'</span>,  <span class="string">'zealot.fun'</span>),</span><br><span class="line">        v(<span class="string">'#text'</span>,  <span class="string">'content'</span>)</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">  )</span><br><span class="line">const root = document.querySelector(<span class="string">'#root'</span>)</span><br><span class="line">patchElement(root, vNodes1)</span><br></pre></td></tr></table></figure><ul><li>DOM 本身就是一个包含很多数据的对象</li><li>我们通过用 JS 写一个简化的对象</li><li>操作 DOM 时改变这个简化对象的数据</li><li>render 时通过 appendChild 添加到 DOM 上</li></ul><p><strong>但是我们发现一个问题：</strong></p><ul><li>这样开销依然很大,即便更改一个很小的数据，也会有多次的createElement操作</li><li>于是乎有了下面的 patchElement</li><li>审查判断条件：<ol><li>如果存在新 DOM ，但是没有旧 DOM ，就把新 DOM 渲染到页面</li><li>如果什么新旧 DOM 都没有传入，那么删除目标父元素的第一个子元素</li><li>如果新标签不等于旧标签，或新内容不等于旧内容，那么用新 DOM 替换旧 DOM</li><li>其他情况，递归遍历找不同，把不同的替换掉</li></ol></li><li>到这里就完成了动态改变，动态查找，动态渲染。</li></ul><p><strong>简单情况下适用，不包括复杂情况：</strong><br>例如 DOM 节点换位置，调整顺序<br>不过这个例子已经可以体现虚拟 DOM 的原理了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-虚拟-DOM&quot;&gt;&lt;a href=&quot;#0-虚拟-DOM&quot; class=&quot;headerlink&quot; title=&quot;0.虚拟 DOM&quot;&gt;&lt;/a&gt;0.虚拟 DOM&lt;/h1&gt;&lt;h2 id=&quot;I-先来看看原生-DOM-是怎么工作的&quot;&gt;&lt;a href=&quot;#I-先来看看原生-D
      
    
    </summary>
    
      <category term="框架" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="DOM" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>koa初体验</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/10/30/koa%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/10/30/koa初体验/</id>
    <published>2018-10-30T08:43:58.000Z</published>
    <updated>2019-03-05T10:16:46.454Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-安装"><a href="#0-安装" class="headerlink" title="0.安装"></a>0.安装</h1><h2 id="I-linux环境下"><a href="#I-linux环境下" class="headerlink" title="I.linux环境下"></a>I.linux环境下</h2><ul><li><code>sudo npm install -g koa-generator</code>全局安装 koa-generator</li><li><code>koa2 你的项目名(项目文件夹)</code> 使用 koa-generator 生成 koa2 项目</li><li><code>koa2 你的项目名(项目文件夹) -e --ejs</code> 将默认的模板引擎从 jade 换成我们习惯使用的 ejs</li><li><code>cd 你的项目名 &amp;&amp; npm install</code>创建完成，进入项目目录，安装依赖</li><li>到这里就搭建完毕了，可以使用<code>npm start</code>启动项目</li></ul><h1 id="1-使用"><a href="#1-使用" class="headerlink" title="1.使用"></a>1.使用</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-安装&quot;&gt;&lt;a href=&quot;#0-安装&quot; class=&quot;headerlink&quot; title=&quot;0.安装&quot;&gt;&lt;/a&gt;0.安装&lt;/h1&gt;&lt;h2 id=&quot;I-linux环境下&quot;&gt;&lt;a href=&quot;#I-linux环境下&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="node.js" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/node-js/"/>
    
    
      <category term="node.js" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>配置vim</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/10/25/%E9%85%8D%E7%BD%AEvim/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/10/25/配置vim/</id>
    <published>2018-10-25T09:40:42.000Z</published>
    <updated>2019-03-05T10:16:46.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-首先需要检查-vim-是否支持-clipboard"><a href="#0-首先需要检查-vim-是否支持-clipboard" class="headerlink" title="0. 首先需要检查 vim 是否支持 clipboard"></a>0. 首先需要检查 vim 是否支持 clipboard</h1><p>终端输入<br><code>vim --version | grep &quot;clipboard&quot;</code><br>检查 vim 版本是否支持 clipboard<br>如果显示 <code>-clipboard</code> 则说明不支持</p><h2 id="I-安装图形化界面的-vim"><a href="#I-安装图形化界面的-vim" class="headerlink" title="I. 安装图形化界面的 vim"></a>I. 安装图形化界面的 vim</h2><p><code>sudo apt get install vim-gnome</code><br>安装完成后再次运行<br><code>vim --version | grep &quot;clipboard&quot;</code><br>发现之前的减号变成了加号<code>+</code></p><p>这时 vim 已经支持 clipboard 了</p><h1 id="1-导入-vimrc-配置-vim"><a href="#1-导入-vimrc-配置-vim" class="headerlink" title="1. 导入 vimrc 配置 vim"></a>1. 导入 vimrc 配置 vim</h1><p>已上传 github<br>快捷键<code>space + y</code>即可复制到系统剪贴板</p><h2 id="I-安装-vim-plug"><a href="#I-安装-vim-plug" class="headerlink" title="I.安装 vim-plug"></a>I.安装 vim-plug</h2><p>这是个管理 vim 其他插件的工具</p><p>install:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.<span class="keyword">vim</span>/autoload/plug.<span class="keyword">vim</span> --create-dirs \</span><br><span class="line">    http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/junegunn/<span class="keyword">vim</span>-plug/master/plug.<span class="keyword">vim</span></span><br></pre></td></tr></table></figure><h2 id="II-如何使用"><a href="#II-如何使用" class="headerlink" title="II. 如何使用"></a>II. 如何使用</h2><p>vi ~/.vimrc</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">call plug<span class="function"><span class="keyword">#</span><span class="title">begin</span><span class="params">('/.<span class="variable">vim</span>/<span class="variable">plugged</span>')</span></span></span><br><span class="line">Plug '插件名'</span><br><span class="line">Plug 'mattn/emmet-vim'</span><br><span class="line">...这里都是插件</span><br><span class="line">call plug<span class="function"><span class="keyword">#</span><span class="title">end</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>保存-退出-重进<br>执行<code>:PlugInstall</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-首先需要检查-vim-是否支持-clipboard&quot;&gt;&lt;a href=&quot;#0-首先需要检查-vim-是否支持-clipboard&quot; class=&quot;headerlink&quot; title=&quot;0. 首先需要检查 vim 是否支持 clipboard&quot;&gt;&lt;/a&gt;0. 首
      
    
    </summary>
    
    
      <category term="cli" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/cli/"/>
    
  </entry>
  
  <entry>
    <title>手机端调试</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/10/02/%E6%89%8B%E6%9C%BA%E7%AB%AF%E8%B0%83%E8%AF%95/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/10/02/手机端调试/</id>
    <published>2018-10-01T17:25:10.000Z</published>
    <updated>2019-03-05T10:16:46.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-移动端调试"><a href="#0-移动端调试" class="headerlink" title="0.移动端调试"></a>0.移动端调试</h1><ul><li>移动端调试时</li><li>由于手机浏览器没有控制台</li><li>所以在发生报错的时候（尤其是 JS 报错）</li><li>难以调试</li></ul><h1 id="1-alert"><a href="#1-alert" class="headerlink" title="1.alert"></a>1.alert</h1><ul><li>即便移动端没有控制台</li><li>那么就用 alert 将错误通过 alert 对话框的形式发出来</li></ul><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.onerror = <span class="function"><span class="keyword">function</span><span class="params">(<span class="keyword">message</span>, <span class="keyword">file</span>, row)</span><span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    alert(message)</span></span></span><br><span class="line"><span class="function"><span class="comment">    alert(file)</span></span></span><br><span class="line"><span class="function"><span class="comment">    alert(row)</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br></pre></td></tr></table></figure><h1 id="2-VConsole"><a href="#2-VConsole" class="headerlink" title="2.VConsole"></a>2.VConsole</h1><ul><li>非常棒的库</li><li>可以在移动端模拟控制台</li><li>腾讯做的</li></ul><p><code>npm install vconsole</code><br>引入<code>dist/vconsole.min.js</code>到项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vConsole = <span class="keyword">new</span> VConsole()</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-移动端调试&quot;&gt;&lt;a href=&quot;#0-移动端调试&quot; class=&quot;headerlink&quot; title=&quot;0.移动端调试&quot;&gt;&lt;/a&gt;0.移动端调试&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;移动端调试时&lt;/li&gt;
&lt;li&gt;由于手机浏览器没有控制台&lt;/li&gt;
&lt;li&gt;所以在发生报
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/JavaScript/"/>
    
    
      <category term="JS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>关于URL-URI的一点tip</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/10/02/%E5%85%B3%E4%BA%8EURL-URI%E7%9A%84%E4%B8%80%E7%82%B9tip/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/10/02/关于URL-URI的一点tip/</id>
    <published>2018-10-01T16:28:23.000Z</published>
    <updated>2019-03-05T10:16:46.543Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-URL-URI-在-web-领域有很多不能包含的内容"><a href="#1-URL-URI-在-web-领域有很多不能包含的内容" class="headerlink" title="1. URL/URI 在 web 领域有很多不能包含的内容"></a>1. URL/URI 在 web 领域有很多不能包含的内容</h1><h2 id="I-可以有什么"><a href="#I-可以有什么" class="headerlink" title="I.可以有什么"></a>I.可以有什么</h2><ul><li>只有字母和数字[0-9a-zA-Z]</li><li>一些特殊符号<code>$-_.+!*&#39;(),</code></li><li>以及<strong>某些</strong><code>保留字</code></li></ul><p>才可以不经过编码直接用于 URL</p><h3 id="i-保留字"><a href="#i-保留字" class="headerlink" title="i.保留字"></a>i.保留字</h3><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">描述</th><th style="text-align:center">用法</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">;</td><td style="text-align:center">分号</td><td style="text-align:center">保留</td><td style="text-align:center">%3B</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">斜线</td><td style="text-align:center">保留</td><td style="text-align:center">%2F</td></tr><tr><td style="text-align:center">?</td><td style="text-align:center">问号</td><td style="text-align:center">保留</td><td style="text-align:center">%3F</td></tr><tr><td style="text-align:center">:</td><td style="text-align:center">冒号</td><td style="text-align:center">保留</td><td style="text-align:center">%3A</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">“at”符号</td><td style="text-align:center">保留</td><td style="text-align:center">%4O</td></tr><tr><td style="text-align:center">=</td><td style="text-align:center">等号</td><td style="text-align:center">保留</td><td style="text-align:center">%3D</td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">“和”符号</td><td style="text-align:center">保留</td><td style="text-align:center">%26</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于号</td><td style="text-align:center">不安全</td><td style="text-align:center">%3C</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于号</td><td style="text-align:center">不安全</td><td style="text-align:center">%3E</td></tr><tr><td style="text-align:center">“</td><td style="text-align:center">双引号</td><td style="text-align:center">不安全</td><td style="text-align:center">%22</td></tr><tr><td style="text-align:center">#</td><td style="text-align:center">井号</td><td style="text-align:center">不安全</td><td style="text-align:center">%23</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">百分号</td><td style="text-align:center">不安全</td><td style="text-align:center">%25</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">百分号</td><td style="text-align:center">不安全</td><td style="text-align:center">%25</td></tr><tr><td style="text-align:center">{</td><td style="text-align:center">左大括号</td><td style="text-align:center">不安全</td><td style="text-align:center">%7B</td></tr><tr><td style="text-align:center">}</td><td style="text-align:center">右大括号</td><td style="text-align:center">不安全</td><td style="text-align:center">%7D</td></tr><tr><td style="text-align:center">`</td><td style="text-align:center">`</td><td style="text-align:center">竖线</td><td style="text-align:center">不安全</td><td>%7C</td></tr><tr><td style="text-align:center"><code>\</code></td><td style="text-align:center">反斜线</td><td style="text-align:center">不安全</td><td style="text-align:center">%5C</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">加字号</td><td style="text-align:center">不安全</td><td style="text-align:center">%5E</td></tr><tr><td style="text-align:center">~</td><td style="text-align:center">波浪</td><td style="text-align:center">不安全</td><td style="text-align:center">%7E</td></tr><tr><td style="text-align:center">[</td><td style="text-align:center">左中括号</td><td style="text-align:center">不安全</td><td style="text-align:center">%5B</td></tr><tr><td style="text-align:center">]</td><td style="text-align:center">右中括号</td><td style="text-align:center">不安全</td><td style="text-align:center">%5D</td></tr><tr><td style="text-align:center">`</td><td style="text-align:center">反单引号</td><td style="text-align:center">不安全</td><td style="text-align:center">%60</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">空格</td><td style="text-align:center">不安全</td><td style="text-align:center">%20</td></tr></tbody></table><h2 id="2-不能有什么"><a href="#2-不能有什么" class="headerlink" title="2.不能有什么"></a>2.不能有什么</h2><ul><li>汉字</li><li>特殊字符</li></ul><p>举个例子:</p><ul><li><code>http://xxx.com/你好</code></li><li>↑ 这就是个不合语法的</li><li><code>http://xxx.com/%E4%BD%A0%E5%A5%BD</code></li><li>↑ 这个才是它应该的样子</li><li>转译为 <code>URL Escape Code</code> 转译后才是他本来的样子</li></ul><h1 id="2-既然存在不能出现的东西，怎么解决？"><a href="#2-既然存在不能出现的东西，怎么解决？" class="headerlink" title="2.既然存在不能出现的东西，怎么解决？"></a>2.既然存在不能出现的东西，怎么解决？</h1><p>这时候要分两种情况</p><h2 id="I-encodeURI"><a href="#I-encodeURI" class="headerlink" title="I.encodeURI"></a>I.encodeURI</h2><p>举个例子：</p><ul><li><code>http://google.com/search?q=http://xxx.com/%E4%BD%A0%E5%A5%BD?a=1</code></li><li>↑ 一点毛病没有</li><li><code>http://google.com/search?q=http://xxx.com/%E4%BD%A0%E5%A5%BD?a=1&amp;b=2</code></li><li>↑ 这里就有问题了：查询参数在<code>&amp;</code>这里断开了，那么实际上<code>b=2</code>不会被算进去</li><li>这时候就存在歧义了</li></ul><p><strong>这时候就要用到 ↓</strong></p><h2 id="II-encodeURIComponent"><a href="#II-encodeURIComponent" class="headerlink" title="II.encodeURIComponent"></a>II.encodeURIComponent</h2><ul><li>这时候就需要<code>encodeURIComponent</code></li><li><code>http://google.com/search?q=http://xxx.com/%E4%BD%A0%E5%A5%BD?a=1&amp;b=2</code></li><li>在这个例子中</li><li>可以把<code>http://xxx.com/%E4%BD%A0%E5%A5%BD?a=1&amp;b=2</code>整体作为一个查询参数</li></ul><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">encodeURIComponent</span><span class="params">(<span class="number">1</span>&amp;b=<span class="number">2</span>)</span></span></span><br><span class="line"><span class="string">"1%26b%3D2"</span></span><br></pre></td></tr></table></figure><p>这个函数将 <code>&amp;</code> 和 <code>=</code> 都转译了</p><h2 id="III-两个函数的区别"><a href="#III-两个函数的区别" class="headerlink" title="III.两个函数的区别"></a>III.两个函数的区别</h2><ul><li>如果这是一个完整的网址</li><li><p>那么使用<code>encodeURI</code></p></li><li><p>如果这是一段查询参数，或者是网址的一部分</p></li><li>那么请使用<code>encodeURIComponent</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-URL-URI-在-web-领域有很多不能包含的内容&quot;&gt;&lt;a href=&quot;#1-URL-URI-在-web-领域有很多不能包含的内容&quot; class=&quot;headerlink&quot; title=&quot;1. URL/URI 在 web 领域有很多不能包含的内容&quot;&gt;&lt;/a&gt;1
      
    
    </summary>
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>复习css居中</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/09/03/%E5%A4%8D%E4%B9%A0css%E5%B1%85%E4%B8%AD/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/09/03/复习css居中/</id>
    <published>2018-09-02T20:00:39.000Z</published>
    <updated>2019-03-05T10:16:46.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-如何居中？"><a href="#0-如何居中？" class="headerlink" title="0.如何居中？"></a>0.如何居中？</h1><p>最近写样式的时候用到很多需要居中的情况。<br>本着不应该抱着 flex 用一辈子的心态，复习一下　 CSS 居中。</p><h1 id="1-水平居中"><a href="#1-水平居中" class="headerlink" title="1.水平居中"></a>1.水平居中</h1><h2 id="I-内联元素"><a href="#I-内联元素" class="headerlink" title="I.内联元素"></a>I.内联元素</h2><p>父级元素身上写　<code>text-align: center</code></p><h2 id="II-块级元素"><a href="#II-块级元素" class="headerlink" title="II.块级元素"></a>II.块级元素</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">margin: <span class="number">0</span> <span class="keyword">auto</span></span><br></pre></td></tr></table></figure><h1 id="2-垂直居中"><a href="#2-垂直居中" class="headerlink" title="2.垂直居中"></a>2.垂直居中</h1><h2 id="I-tabel-自带功能"><a href="#I-tabel-自带功能" class="headerlink" title="I.tabel 自带功能"></a>I.tabel 自带功能</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td <span class="class"><span class="keyword">class</span></span>=<span class="string">"child"</span>&gt;</span><br><span class="line">            blablablablabla</span><br><span class="line">        &lt;<span class="regexp">/td&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>tr&gt;</span><br><span class="line">&lt;<span class="regexp">/table&gt;</span></span><br></pre></td></tr></table></figure><p><code>table</code> 标签自带 content 居中的功能。</p><h2 id="II-伪类"><a href="#II-伪类" class="headerlink" title="II.伪类"></a>II.伪类</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"child"</span>&gt;</span><br><span class="line">        blablablablabla</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过伪类设置 <code>100%</code> 高度和 <code>display: inline-block</code> 属性使子元素居中</li><li>拿伪类占坑</li></ul><h2 id="III-假装自己是个-table"><a href="#III-假装自己是个-table" class="headerlink" title="III.假装自己是个 table"></a>III.假装自己是个 table</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"table"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"td"</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"tr"</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"child"</span>&gt;</span><br><span class="line">                blablablablabla</span><br><span class="line">            &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">        &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-class">.table</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.tr</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table-row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.td</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 <code>display: table</code> <code>display:table-cell</code> 来假装自己是个表格</li><li>这样确实可以居中</li></ul><h2 id="IV-绝对定位强行移过去"><a href="#IV-绝对定位强行移过去" class="headerlink" title="IV. 绝对定位强行移过去"></a>IV. 绝对定位强行移过去</h2><h3 id="i-用-margin-修正"><a href="#i-用-margin-修正" class="headerlink" title="i.用 margin 修正"></a>i.用 margin 修正</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"child"</span>&gt;</span><br><span class="line">        blablabla</span><br><span class="line">    &lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">&lt;/<span class="keyword">div</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这种方法就比较粗暴了</li><li>绝对定位定位 <code>.child</code></li><li>然后用 <code>margin</code> 修正绝对定位的偏移</li></ul><h3 id="ii-用-transform-修正"><a href="#ii-用-transform-修正" class="headerlink" title="ii.用 transform 修正"></a>ii.用 transform 修正</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%,-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>做法同上，大同小异</li><li>由于绝对定位会以元素的左上角为定位点</li><li>所以用 <code>transform</code> 各偏移一半即可修正</li></ul><h3 id="iii-脱离文档流后-margin-auto"><a href="#iii-脱离文档流后-margin-auto" class="headerlink" title="iii. 脱离文档流后 margin: auto"></a>iii. 脱离文档流后 margin: auto</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span>&#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>绝对定位上下左右定位皆为　０</li><li><code>margin:auto</code> 实现居中</li></ul><h2 id="V-flex"><a href="#V-flex" class="headerlink" title="V.flex"></a>V.flex</h2><ul><li>这个就不用多说了</li><li><code>justify-content</code> <code>align-items</code> 这些都用烂了</li></ul><h1 id="3-选择器优先级"><a href="#3-选择器优先级" class="headerlink" title="3.选择器优先级"></a>3.选择器优先级</h1><ul><li>选择器越具体，优先级越高。(#xxx 肯定比.xxx 优先)</li><li>同优先级，写在后面的覆盖前面的</li><li>!important; 优先级最高。一般不用。(如果滥用这个，那么还有什么意义呢？大家都用等于没用)</li></ul><h1 id="4-BFC"><a href="#4-BFC" class="headerlink" title="4.BFC"></a>4.BFC</h1><ul><li><code>overflow: hidden</code> 可以清除浮动(但是一般用 <code>.clearfix</code> 来清除浮动)</li><li><code>overflow: hidden</code> 可以取消父子 <code>margin</code> 合并(子元素的 margin 把父元素挤下去。)</li><li>为了解决 <code>margin</code> 合并，可以使用 <code>padding-top: 0.1px;</code>(因为 BFC 的副作用有点多)</li></ul><h1 id="5-如何清除浮动"><a href="#5-如何清除浮动" class="headerlink" title="5.如何清除浮动"></a>5.如何清除浮动</h1><ol><li><code>overflow:hidden</code> 可以，不推荐。</li><li><code>clearfix</code> 可以，这么写在父元素上：</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*兼容IE*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span>&#123;</span><br><span class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-如何居中？&quot;&gt;&lt;a href=&quot;#0-如何居中？&quot; class=&quot;headerlink&quot; title=&quot;0.如何居中？&quot;&gt;&lt;/a&gt;0.如何居中？&lt;/h1&gt;&lt;p&gt;最近写样式的时候用到很多需要居中的情况。&lt;br&gt;本着不应该抱着 flex 用一辈子的心态，复习一下　
      
    
    </summary>
    
      <category term="CSS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>MVC?MVVM!</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/30/MVC-MVVM/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/30/MVC-MVVM/</id>
    <published>2018-06-30T14:40:50.000Z</published>
    <updated>2019-03-05T10:16:46.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-猜猜看-Vue-为什么叫-Vue"><a href="#0-猜猜看-Vue-为什么叫-Vue" class="headerlink" title="0.猜猜看 Vue 为什么叫 Vue"></a>0.猜猜看 Vue 为什么叫 Vue</h1><ul><li>Vue 代替了 MVC 里的 View</li><li>Vue 这单词是法语</li></ul><h1 id="1-axios"><a href="#1-axios" class="headerlink" title="1.axios"></a>1.axios</h1><ul><li>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</li><li>就是个 AJAX 库</li></ul><h2 id="I-axios-是什么"><a href="#I-axios-是什么" class="headerlink" title="I.axios 是什么"></a>I.axios 是什么</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">.ajax(&#123;</span></span><br><span class="line">    url: './xxx',</span><br><span class="line">    method: 'post'</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">.post(<span class="string">'/xxx'</span>,data)</span></span><br><span class="line"><span class="meta">$</span><span class="bash">.get(<span class="string">'/xxx'</span>)</span></span><br></pre></td></tr></table></figure><h3 id="i-axios-怎么用-AJAX-的？"><a href="#i-axios-怎么用-AJAX-的？" class="headerlink" title="i.axios 怎么用 AJAX 的？"></a>i.axios 怎么用 AJAX 的？</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">axios.get(<span class="string">'/user?ID=xxx'</span>)</span><br><span class="line">    .then(<span class="keyword">function</span>(response)&#123;</span><br><span class="line">        console.log(response)</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="keyword">function</span>(error)&#123;</span><br><span class="line">        console.log(error)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">axios.post()</span><br><span class="line">axios.put()</span><br><span class="line">axios.patch()</span><br><span class="line">axios.<span class="keyword">delete</span>()</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span> 真的是基于 Promise <span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span><span class="regexp">//</span></span><br></pre></td></tr></table></figure><ul><li>比 jQuery.ajax 功能更多</li><li>除了 ajax 功能之外，就没有其他功能了（更专注）</li></ul><h3 id="ii-还用-jQuery-吗？"><a href="#ii-还用-jQuery-吗？" class="headerlink" title="ii.还用 jQuery 吗？"></a>ii.还用 jQuery 吗？</h3><ul><li>AJAX 可以用 axios</li><li>DOM 操作可以用 Vue</li></ul><h2 id="II-axios-怎么用"><a href="#II-axios-怎么用" class="headerlink" title="II.axios 怎么用"></a>II.axios 怎么用</h2><h3 id="i-interceptors"><a href="#i-interceptors" class="headerlink" title="i.interceptors"></a>i.interceptors</h3><p><code>interceptor n.拦截机;</code><br>但是它可能不像它的名字那样直截了当。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">axios<span class="variable">.interceptors</span><span class="variable">.response</span><span class="variable">.use</span>(<span class="keyword">function</span>(response)&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">config</span> = response<span class="variable">.config</span></span><br><span class="line">    <span class="keyword">let</span> &#123;method, url, data&#125; = <span class="keyword">config</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="keyword">config</span>: &#123;url,method,data&#125;&#125; = response</span><br><span class="line">    <span class="comment">// 这一行等于上面两行 (es6的技巧)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>axios.interceptors.response.use</code><ul><li>在真正返回<code>response</code>之前拦截一下</li></ul></li><li>执行一个函数，处理一下<code>response</code><ul><li>再返回<code>response</code></li></ul></li></ul><h3 id="ii-Object-assign-target-data"><a href="#ii-Object-assign-target-data" class="headerlink" title="ii.Object.assign(target,data)"></a>ii.Object.assign(target,data)</h3><ul><li><code>target</code>是修改目标</li><li><code>data</code>是修改内容</li><li>可以执行链式操作<ul><li><code>Object.assign(target,data1,data2)</code></li><li>如果有重复则<code>data2</code>会覆盖<code>data1</code></li></ul></li></ul><h1 id="2-Vue-的双向绑定"><a href="#2-Vue-的双向绑定" class="headerlink" title="2.Vue 的双向绑定"></a>2.Vue 的双向绑定</h1><p><code>&lt;input v-model=&quot;text&quot;/&gt;</code></p><ul><li><code>text</code>就会因用户输入的内容而映射到内存</li><li>且<code>text</code>也会因为内存中的<code>text</code>值而渲染到页面中</li></ul><h2 id="I-那么-Vue-就是自动化的-MVC"><a href="#I-那么-Vue-就是自动化的-MVC" class="headerlink" title="I.那么 Vue 就是自动化的 MVC"></a>I.那么 Vue 就是自动化的 MVC</h2><ul><li><code>Vue</code>省去了渲染操作</li><li><code>Vue</code>省去了<code>Control</code>的大量操作，通过操作数据来操作页面</li></ul><h2 id="II-jQuery-是不是可以退休了"><a href="#II-jQuery-是不是可以退休了" class="headerlink" title="II.jQuery 是不是可以退休了"></a>II.jQuery 是不是可以退休了</h2><ul><li>AJAX 操作可以用<code>axios</code>完成</li><li>DOM 操作在<code>Vue</code>下仅需要进行数据操作</li></ul><h1 id="3-MVVM"><a href="#3-MVVM" class="headerlink" title="3.MVVM"></a>3.MVVM</h1><p><strong>Model-View-ViewMode</strong></p><p>要编写可维护的前端代码绝非易事。我们已经用 MVC 模式通过 koa 实现了后端数据、模板页面和控制器的分离，但是，对于前端来说，还不够。</p><ul><li>Model: 数据模型层——数据</li><li>View: 视图模板层——用户界面</li><li>ViewMode： 视图模块层——取代了 MVC 的 Controller，传达视图和数据绑定通信；Model 中的数据状态</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-猜猜看-Vue-为什么叫-Vue&quot;&gt;&lt;a href=&quot;#0-猜猜看-Vue-为什么叫-Vue&quot; class=&quot;headerlink&quot; title=&quot;0.猜猜看 Vue 为什么叫 Vue&quot;&gt;&lt;/a&gt;0.猜猜看 Vue 为什么叫 Vue&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="框架" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="JS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>复习一下移动端自适应</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/23/%E5%A4%8D%E4%B9%A0%E4%B8%80%E4%B8%8B%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/23/复习一下移动端自适应/</id>
    <published>2018-06-23T10:24:27.000Z</published>
    <updated>2019-03-05T10:16:46.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-meta-viewport"><a href="#0-meta-viewport" class="headerlink" title="0.meta viewport"></a>0.meta viewport</h1><ul><li>2010年以前移动设备的分辨率一般都小于PC，为了能在移动设备上正常显示那些为PC浏览器设计的网站（伟大的3GS）</li><li>移动设备上的浏览器都会把自己默认的viewport设为980px（或者其他值）</li><li>之后用低分辨率的移动设备模拟网页页面，也就是等比缩放。</li><li>好歹解决了看全网页的问题。需要细看，双击放大</li></ul><h2 id="I-标签"><a href="#I-标签" class="headerlink" title="I.标签"></a>I.标签</h2><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&quot; /&gt;</code></p><ul><li><code>name</code>名字<code>viewport</code></li><li><code>content</code>内容:<ul><li>width = device-width 页面宽度等于设备宽度（别缩放）</li><li>user-scalable = no 不要用户自己缩放了，我页面和设备的分辨率比例已经1:1了</li><li>initial-scale=1 初始缩放比例1:1</li><li>minimum-scale=1.0, maximum-scale=1.0 最小/最大缩放比例1:1</li><li>在 user-scalable = no 的时候，最大/最小缩放比例可以不写（都不让用户缩放了我还写它干嘛）</li></ul></li></ul><h1 id="1-媒体查询"><a href="#1-媒体查询" class="headerlink" title="1.媒体查询"></a>1.媒体查询</h1><p>不同设备尺寸不同，所以使用媒体查询，符合相应尺寸则调用相应CSS（查设备、调CSS）</p><h2 id="I-内嵌样式的例子"><a href="#I-内嵌样式的例子" class="headerlink" title="I.内嵌样式的例子"></a>I.内嵌样式的例子</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">@media (<span class="built_in">max</span>-<span class="built_in">width</span>: <span class="number">800</span>px) &#123;   <span class="comment">//如果媒体宽度满足0~800px</span></span><br><span class="line">  body &#123;</span><br><span class="line">    <span class="built_in">background</span>: black                   <span class="comment">//body的背景变为黑色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@media (<span class="built_in">min</span>-<span class="built_in">width</span>: <span class="number">100</span>px) <span class="keyword">and</span> (<span class="built_in">max</span>-<span class="built_in">width</span>: <span class="number">500</span>px) &#123;   </span><br><span class="line">    <span class="comment">//如果媒体宽度满足100~500px</span></span><br><span class="line">  body &#123;</span><br><span class="line">    <span class="built_in">background</span>: red                     <span class="comment">//body的背景变为黑色</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="II-外部式"><a href="#II-外部式" class="headerlink" title="II.外部式"></a>II.外部式</h2><figure class="highlight flix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="keyword">rel</span>=<span class="string">"stylesheet"</span> href=<span class="string">"./style800.css"</span> media=<span class="string">"(max-width: 800px)"</span>&gt;   <span class="comment">// 如果媒体宽度&lt;=800px的时候，当前目录style800.css生效</span></span><br></pre></td></tr></table></figure><h1 id="2-动态-REM"><a href="#2-动态-REM" class="headerlink" title="2.动态 REM"></a>2.动态 REM</h1><p><strong>这是手机专用</strong><br>也就是说，IPAD不得行</p><ul><li>rem是通过根元素<html>的font-size,以此来达在不同屏幕尺寸中等比例缩放的效果</html></li><li>1rem = 根元素字体大小</li><li>那么rem就是整个页面的度量尺度——以屏幕宽度为基准，动态变化。<h2 id="I-如何实现"><a href="#I-如何实现" class="headerlink" title="I.如何实现"></a>I.如何实现</h2>通过js让rem与屏幕宽度联系起来 , 让CSS样式自动适应各种不同屏幕的宽度</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">//不准缩放！！！</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body&#123;</span></span><br><span class="line"><span class="undefined">        font-size: 16px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">// 重置 body 的 font-size 大小</span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> pageWidth = <span class="built_in">window</span>.innerWidth</span></span><br><span class="line"><span class="handlebars"><span class="xml">     document.write('<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="string">'+pageWidth/10+'</span>px;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>')</span></span></span><br><span class="line"><span class="actionscript">     <span class="comment">//让pageWidth/10是的rem单位变成宽度的1/10，使得操作更加可控</span></span></span><br><span class="line"><span class="undefined"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面尽量不要用 <code>document.write</code> ，做到在<code>style</code>标签里写东西可以用别的方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTML:</span><br><span class="line"></span><br><span class="line">&lt;style id=<span class="string">"styleTag"</span>&gt;&lt;style&gt;</span><br><span class="line"></span><br><span class="line">JS:</span><br><span class="line"></span><br><span class="line">let pageWidth = window.innerWidth</span><br><span class="line">styleTag<span class="selector-class">.innerHTML</span> = <span class="string">'html&#123;font-size'</span> + pageWidth/<span class="number">10</span> + <span class="string">'px;&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="II-关于最小字体大小"><a href="#II-关于最小字体大小" class="headerlink" title="II.关于最小字体大小"></a>II.关于最小字体大小</h2><ul><li>在chrome浏览器中有一个问题是字体小于12px统一都按12px</li><li>这麻烦了，我们关联的是<html>的font-size那么意味着pageWidth/10的值如果小于12</html></li><li>碰到1rem这种单位的字体大小，浏览器就会按照12px算</li><li><code>html{font-size:&#39;+pageWidth/100+&#39;px;}</code>操作是好操作了，但可能很多字就不会自适应的变化了</li></ul><h2 id="III-换算有点烦"><a href="#III-换算有点烦" class="headerlink" title="III.换算有点烦"></a>III.换算有点烦</h2><p>rem都是自己算的，乖乖，那岂不是每一个尺寸都得换算？</p><h3 id="i-伟大的-sass"><a href="#i-伟大的-sass" class="headerlink" title="i.伟大的 sass"></a>i.伟大的 sass</h3><ul><li>scss可以减少很多复写</li><li>也可以自动换算rem和px，通过变量</li><li>（相当于是通过一个函数）</li></ul><p>再次赞美伟大的 Ruby 社区</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$designWidth</span> : <span class="number">640</span>;   </span><br><span class="line"><span class="comment">/*设计稿的宽度*/</span></span><br><span class="line"></span><br><span class="line">@function px( <span class="variable">$px</span> )&#123;</span><br><span class="line">    @return <span class="variable">$px</span>/<span class="variable">$designWidth</span>*<span class="number">10</span> + rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*上面就是转换过程</span></span><br><span class="line"><span class="comment">传入一个像素数为参数</span></span><br><span class="line"><span class="comment">返回一个转换后的数 + rem*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: px(<span class="number">320</span>);</span><br><span class="line">    <span class="attribute">height</span>: px(<span class="number">160</span>);</span><br><span class="line">    <span class="attribute">margin</span>: px(<span class="number">40</span>) px(<span class="number">40</span>);</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-移动端"><a href="#3-移动端" class="headerlink" title="3.移动端"></a>3.移动端</h1><ul><li>没有 hover</li><li>有 touch</li><li>没有 resize</li><li>没有滚动条</li><li>手机上没有IE，开不开心？</li></ul><h2 id="I-TouchSwiper"><a href="#I-TouchSwiper" class="headerlink" title="I.TouchSwiper"></a>I.TouchSwiper</h2><p><a href="https://github.com/mattbryson/TouchSwipe-Jquery-Plugin" target="_blank" rel="noopener">jQuery插件</a><br><a href="https://github.com/ElemeFE/vue-swipe" target="_blank" rel="noopener">vue插件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-meta-viewport&quot;&gt;&lt;a href=&quot;#0-meta-viewport&quot; class=&quot;headerlink&quot; title=&quot;0.meta viewport&quot;&gt;&lt;/a&gt;0.meta viewport&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;2010年以前移动设备的
      
    
    </summary>
    
      <category term="CSS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/CSS/"/>
    
    
      <category term="css" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>vue的小细节</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/22/vue%E7%9A%84%E5%B0%8F%E7%BB%86%E8%8A%82/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/22/vue的小细节/</id>
    <published>2018-06-22T04:08:17.000Z</published>
    <updated>2019-03-05T10:16:46.466Z</updated>
    
    <content type="html"><![CDATA[<p><code>npm run dev</code></p><h1 id="vue-引入第三方-CSS"><a href="#vue-引入第三方-CSS" class="headerlink" title="vue 引入第三方 CSS"></a>vue 引入第三方 CSS</h1><ul><li>reset css 和 normalize css 哪个好？<ul><li>normalize css 让页面默认样式在每一个浏览器上是一样的（统一默认样式）</li><li>reset css 篡改默认样式（特别不喜欢的样式给它改了）</li><li>他们是不冲突的</li><li>我们可以先统一样式，然后再改些特别不喜欢的。</li></ul></li></ul><h1 id="element"><a href="#element" class="headerlink" title="element"></a>element</h1><p>饿了么做的 vue 2.0 组件库<br><a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">element</a></p><p>main.js 里加入这点东西</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br><span class="line"><span class="comment">// 注册很多全局组件，不用声明就可以使用</span></span><br></pre></td></tr></table></figure><h1 id="添加事件"><a href="#添加事件" class="headerlink" title="添加事件"></a>添加事件</h1><p><code>v-on:click=&quot;你要干嘛&quot;</code></p><h2 id="移除"><a href="#移除" class="headerlink" title="移除"></a>移除</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">i</span> class=<span class="string">"el-icon-remove"</span> v-on:click=<span class="string">"removeJobExperience(index)"</span>&gt;&lt;/i&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">remoteJobExperience</span><span class="params">(index)</span></span> &#123;</span><br><span class="line">    this<span class="selector-class">.jobExperience</span><span class="selector-class">.splice</span>(index, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用<code>splice</code>从数组里删除一个</p><h1 id="从外部传变量"><a href="#从外部传变量" class="headerlink" title="从外部传变量"></a>从外部传变量</h1><p>比如需要用一个<code>profile</code></p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">// 下面是组件里（被分出来封装的），假设文件名为 whoAmI.vue</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  props: ['profile']</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">//封装的时候//</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">////</span><span class="regexp">///</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">//</span> 下面是主文件里</span><br><span class="line"></span><br><span class="line">&lt;whoAmI v-bind:profile=<span class="string">"profile"</span>/&gt;</span><br><span class="line"><span class="keyword">import</span> whoAmI <span class="keyword">from</span> <span class="string">'./whoAmI'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    components: &#123; whoAmI &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">// 绑定这个叫做 profile 的 data</span></span><br></pre></td></tr></table></figure><p>注意： </p><ul><li>组件的模板必须包含<strong>一个</strong>根元素</li><li>翻译一下： 最外面包着的，必须只有一个(除了template)</li></ul><h1 id="想要在-git-上预览-vue-项目"><a href="#想要在-git-上预览-vue-项目" class="headerlink" title="想要在 git 上预览 vue 项目"></a>想要在 git 上预览 vue 项目</h1><p>我们需要在 <code>gitignore</code> 目录里把 <code>dist</code> 取消忽略</p><ol><li>进入 <code>config/index.js</code></li><li>在 <code>build</code> 下的 <code>assetsPublicPath</code></li><li>把它的值改成 <code>&#39;/vue-demo(项目名是什么就改成什么)/dist/&#39;</code></li><li>这个字符串会被加在编译后的<code>index</code>里每一个脚本的前面</li><li><code>npm run build</code></li><li>去 <code>.gitignore</code> 里面把 <code>dist</code> 目录删掉</li><li><code>add commit push</code> 三连</li></ol><h2 id="解决-404-问题的终极方法"><a href="#解决-404-问题的终极方法" class="headerlink" title="解决 404 问题的终极方法"></a>解决 404 问题的终极方法</h2><ul><li>加一个目录</li><li>如果不行</li><li>再加一个目录</li><li>如果不行</li><li>再加一个目录</li><li>如果还不行</li><li>减一个目录</li><li>如果还不行</li><li>减两个目录</li></ul><p>总结一下： <strong>加目录和减目录</strong></p><h2 id="vue-如何增减目录"><a href="#vue-如何增减目录" class="headerlink" title="vue 如何增减目录"></a>vue 如何增减目录</h2><p>在 <code>config/index.js</code> 的 <code>module.exports.build.assetsPublicPath</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;vue-引入第三方-CSS&quot;&gt;&lt;a href=&quot;#vue-引入第三方-CSS&quot; class=&quot;headerlink&quot; title=&quot;vue 引入第三方 CSS&quot;&gt;&lt;/a&gt;vue 引入第三方 CSS&lt;/
      
    
    </summary>
    
      <category term="框架" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="vue" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>关于webpack</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/19/%E5%85%B3%E4%BA%8Ewebpack/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/19/关于webpack/</id>
    <published>2018-06-19T14:17:38.000Z</published>
    <updated>2019-03-05T10:16:46.547Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-文件结构"><a href="#0-文件结构" class="headerlink" title="0.文件结构"></a>0.文件结构</h1><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.____</span><br><span class="line">    <span class="string">|-- src      source            //未经翻译的代码</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">|-- dist     distribution      //待发布的代码</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">|-- vendors      //第三方代码jQuery什么的</span></span><br><span class="line">    <span class="string">|</span></span><br><span class="line">    <span class="string">|-- node_modules    //第三方包</span></span><br></pre></td></tr></table></figure><h1 id="1-关于webpack"><a href="#1-关于webpack" class="headerlink" title="1.关于webpack"></a>1.关于webpack</h1><h2 id="I-什么是webpack"><a href="#I-什么是webpack" class="headerlink" title="I.什么是webpack"></a>I.什么是webpack</h2><ul><li>webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)</li><li>当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)</li><li>其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle<h3 id="i-四个核心概念"><a href="#i-四个核心概念" class="headerlink" title="i.四个核心概念"></a>i.四个核心概念</h3></li><li>入口(entry)：你要从什么转过去(src)</li><li>输出(output)：你要输出到哪 bundle (dist)</li><li>loader：最痛苦的部分，webpack 能理解一等公民JS，但是理解不了其他文件，所以我们需要插件把他们转换成 webpack 能处理的有效模块</li><li>插件(plugins)：loader拿来转模块，插件可以执行更多任务（各种各样）<h2 id="II-gulp-grunt-与-webpack"><a href="#II-gulp-grunt-与-webpack" class="headerlink" title="II.gulp/grunt 与 webpack"></a>II.gulp/grunt 与 webpack</h2><h3 id="gulp"><a href="#gulp" class="headerlink" title="gulp"></a>gulp</h3></li><li>gulp强调的是前端开发的工作流程</li><li>我们可以通过配置一系列的task，定义task处理的事务（例如文件压缩合并、雪碧图、启动server、版本控制等）</li><li>然后定义执行顺序，来让gulp执行这些task，从而构建项目的整个前端开发流程。<h3 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h3></li><li>webpack是一个前端模块化方案，更侧重模块打包</li><li>我们可以把开发中的所有资源（图片、js文件、css文件等）都看成模块，通过loader（加载器）和plugins（插件）对资源进行处理</li><li>打包成符合生产环境部署的前端资源。<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3></li><li>虽然都是前端自动化构建工具，但看他们的定位就知道不是对等的。</li><li>gulp严格上讲，模块化不是他强调的东西，他旨在规范前端开发流程。</li><li>webpack更是明显强调模块化开发，而那些文件压缩合并、预处理等功能，不过是他附带的功能。<h2 id="III-webpack-如何配置多入口文件页面"><a href="#III-webpack-如何配置多入口文件页面" class="headerlink" title="III.webpack 如何配置多入口文件页面"></a>III.webpack 如何配置多入口文件页面</h2>前面所介绍的四个核心概念，在这里显得尤为重要<br>标准的配置文件应该长这样：</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">module.exports=&#123;</span><br><span class="line">    <span class="comment">//入口文件的配置项</span></span><br><span class="line"><span class="symbol">    entry:</span>&#123;&#125;,</span><br><span class="line">    <span class="comment">//出口文件的配置项</span></span><br><span class="line"><span class="symbol">    output:</span>&#123;&#125;,</span><br><span class="line">    <span class="comment">//模块：例如解读CSS,图片如何转换，压缩</span></span><br><span class="line"><span class="symbol">    module:</span>&#123;&#125;,</span><br><span class="line">    <span class="comment">//插件，用于生产模版和各项功能</span></span><br><span class="line"><span class="symbol">    plugins:</span>[],</span><br><span class="line">    <span class="comment">//配置webpack开发服务功能</span></span><br><span class="line"><span class="symbol">    devServer:</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>entry：配置入口文件的地址，可以是单一入口，也可以是多入口。</li><li>output：配置出口文件的地址，在webpack2.X版本后，支持多出口配置。</li><li>module：配置模块，主要是解析CSS和图片转换压缩等功能。</li><li>plugins：配置插件，根据你的需要配置不同功能的插件。</li><li>devServer：配置开发服务功能</li></ul><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><p>单页面中：<code>entry: resolve(&quot;src/home/index.js&quot;)</code><br>多页面中：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多页应用程序，则需要多个入口文件，例如：</span></span><br><span class="line"><span class="symbol">entry:</span> &#123;</span><br><span class="line"><span class="symbol">  home:</span> resolve(<span class="string">"src/home/index.js"</span>),</span><br><span class="line"><span class="symbol">  about:</span> resolve(<span class="string">"src/about/index.js"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，整个项目就有了两个入口 <code>home</code> 和 <code>about</code></p><h3 id="入口变多以后"><a href="#入口变多以后" class="headerlink" title="入口变多以后"></a>入口变多以后</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="comment">//入口文件的配置项</span></span><br><span class="line">    entry:&#123;</span><br><span class="line">        home:<span class="string">'./src/home.js'</span>,</span><br><span class="line">        <span class="comment">//这里我们又引入了一个入口文件</span></span><br><span class="line">        about:<span class="string">'./src/about.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//出口文件的配置项</span></span><br><span class="line">    output:&#123;</span><br><span class="line">        <span class="comment">//输出的路径，用了Node语法</span></span><br><span class="line">        path:path.resolve(__dirname,<span class="string">'dist'</span>),</span><br><span class="line">        <span class="comment">//输出的文件名称</span></span><br><span class="line">        filename:<span class="string">'[name].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//模块：例如解读CSS,图片如何转换，压缩</span></span><br><span class="line">    <span class="keyword">module</span>:&#123;&#125;,</span><br><span class="line">    <span class="comment">//插件，用于生产模版和各项功能</span></span><br><span class="line">    plugins:[],</span><br><span class="line">    <span class="comment">//配置webpack开发服务功能</span></span><br><span class="line">    devServer:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到代码，在入口文件配置中，增加了一个entry2.js的入口文件（这个文件你需要自己手动建立），这时候要打包的就有了两个入口文件。<code>output</code> 中的<code>filename</code> 我们改成了<code>[name].js</code></p><p><code>[name]</code>的意思是根据入口文件的名称，打包成相同的名称，有几个入口文件，就可以打包出几个文件。</p><ul><li>进去 <code>home.js</code> 和 <code>about.js</code></li><li>出来 <code>home.js</code> 和 <code>about.js</code></li></ul><h2 id="IV-webpack解决了什么问题"><a href="#IV-webpack解决了什么问题" class="headerlink" title="IV.webpack解决了什么问题"></a>IV.webpack解决了什么问题</h2><p><strong>前端资源依赖管理</strong></p><ul><li><p>我们在浏览器中的 js 中，不能直接引用其它 js, css 等文件（或说，模块）- 而 webpack 就是用来解决这个问题的，让你的项目可以很好地分文件、分模块</p></li><li><p>支持依赖各种拓展名的文件</p></li><li>能够在不依赖 gulp 或 grunt 的情况下直接产出打包文件</li><li>支持实时编译，浏览器同步刷新</li></ul><h3 id="i-前端用的语言太多了"><a href="#i-前端用的语言太多了" class="headerlink" title="i.前端用的语言太多了"></a>i.前端用的语言太多了</h3><ul><li>html、css和js的配合才能保证webapp的运行，增量安装是按需加载的需要</li><li>开发完成后输出三种以上不同格式的静态资源，静态资源之间有可能存在互相依赖关系，最终构成一个复杂的资源依赖树（甚至网）</li></ul><p>问题：</p><ol><li><p>为什么老项目构建臃肿不堪？<br> 基于requirejs进行打包，会把项目所有的一来都打包到一个文件里，如果项目中同时依赖一个模块，</p></li><li><p>老项目为什么模块化不足？<br> 老项目的模块化，仅仅体现在js层面，解决了模块引用的问题，但在开发方式上，依然可以看做是过程式的， 这样的结果就导致了项目的难扩展和难维护，让开发人员在与产品汪的对峙中，并不从容。</p></li><li><p>如何避免手动管理DOM？<br> 如果你在做数据展示这一块的开发工作，相信你一定体会颇深，发送http请求到服务端，拿到返回的数据后手动渲染DOM至页面，这是最原始的开发方式，无非再加一个模板引擎之类的，但最终还是避免不了手动渲染，如果页面逻辑复杂，比如给你来一个翻页的功能，再来一个筛选项，估计你会觉得世界并不那么美好。</p></li></ol><h3 id="ii-webpack-的优势"><a href="#ii-webpack-的优势" class="headerlink" title="ii.webpack 的优势"></a>ii.webpack 的优势</h3><ol><li>代码分割：<ul><li>webpack支持二种依赖加载：同步和异步。同步的依赖会在编译时直接打包输出到目的文件</li><li>异步加载会单独生成代码块，只有在浏览器中需要时才会异步加载这些代码块。</li></ul></li><li>Loaders：<ul><li>默认加载js，通过loaders来把其他类型的资源转换成js输出。</li></ul></li><li>各种插件<ul><li>webpack提供强大插件来提高工作效率。</li></ul></li></ol><h1 id="2-Couldn’t-find-preset-“env”"><a href="#2-Couldn’t-find-preset-“env”" class="headerlink" title="2.Couldn’t find preset “env”"></a>2.Couldn’t find preset “env”</h1><p>找不到他娘的env！<br><code>npm install babel-preset-env</code></p><ul><li>webpack这玩意，他说找不到啥你就装啥。</li><li>所以修好你的npm</li><li><code>npm i fucking-webpack</code></li></ul><h1 id="3-Can-I-use？"><a href="#3-Can-I-use？" class="headerlink" title="3.Can I use？"></a>3.Can I use？</h1><p><a href="http://caniuse.com" target="_blank" rel="noopener">这个网站可以查询兼容性问题</a><br><a href="http://autoprefixer.github.io" target="_blank" rel="noopener">这个网站可以自动转换CSS</a></p><h2 id="I-如何让-webpack-解决-flex-布局的兼容性问题"><a href="#I-如何让-webpack-解决-flex-布局的兼容性问题" class="headerlink" title="I.如何让 webpack 解决 flex 布局的兼容性问题"></a>I.如何让 webpack 解决 flex 布局的兼容性问题</h2><p><a href="https://github.com/postcss/postcss-loader" target="_blank" rel="noopener">postcss-loader</a></p><p>他来帮你加前缀<code>-webkit-`</code>-ms-flexbox`等等</p><h3 id="i-碰到的诡异问题-postcss"><a href="#i-碰到的诡异问题-postcss" class="headerlink" title="i.碰到的诡异问题(postcss)"></a>i.碰到的诡异问题(postcss)</h3><h4 id="迷之花括号"><a href="#迷之花括号" class="headerlink" title="迷之花括号"></a>迷之花括号</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">body</span>&#123;</span><br><span class="line">  //↑说我<span class="keyword">body</span>的花括号是不必要的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>告诉我们有时候文档也不能全信</li><li>遇事不决还是查<code>stack overflow</code></li></ul><p>postcss.config.js</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //parser: <span class="string">'sugarss'</span>,</span><br><span class="line">  //这一行 parser 删了就没问题了</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-import'</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">'postcss-cssnext'</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">'cssnano'</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个 <code>sugarss</code> 在默认情况是不必要的</li></ul><h4 id="重复的插件"><a href="#重复的插件" class="headerlink" title="重复的插件"></a>重复的插件</h4><ul><li>postcss-cssnext found a duplicate plugin (‘autoprefixer’) in your postcss plugins. </li><li>This might be inefficient. </li><li><p>You should remove ‘autoprefixer’ from your postcss plugin list since it’s already included by postcss-cssnext.</p></li><li><p>他说我使用了重复的插件(‘autoprefixer’)</p></li><li>很低效</li><li>应该把它删了，因为 <code>postcss-cssnext</code> 已经包含这个插件了</li></ul><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //parser: <span class="string">'sugarss'</span>,</span><br><span class="line">  plugins: &#123;</span><br><span class="line">    <span class="string">'postcss-import'</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">'postcss-cssnext'</span>: &#123;&#125;,</span><br><span class="line">    //<span class="string">'cssnano'</span>: &#123;&#125;</span><br><span class="line">    //把这行删了，他就不会提示这个 warning 了 </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-文件结构&quot;&gt;&lt;a href=&quot;#0-文件结构&quot; class=&quot;headerlink&quot; title=&quot;0.文件结构&quot;&gt;&lt;/a&gt;0.文件结构&lt;/h1&gt;&lt;figure class=&quot;highlight 1c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="框架" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="webpack" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Session、LocalStorage、Cache-Control</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/15/Session%E3%80%81LocalStorage%E3%80%81Cache-Control/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/15/Session、LocalStorage、Cache-Control/</id>
    <published>2018-06-15T09:39:25.000Z</published>
    <updated>2019-03-05T10:16:46.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-Session"><a href="#0-Session" class="headerlink" title="0.Session"></a>0.Session</h1><h2 id="I-如何阻止用户篡改Cookie"><a href="#I-如何阻止用户篡改Cookie" class="headerlink" title="I.如何阻止用户篡改Cookie"></a>I.如何阻止用户篡改Cookie</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>Cookie 是 session 的依赖</p><ul><li>服务器通过<code>Set-Cookie</code>给客户端一串字符串</li><li>客户端每次访问相同域名的网页时，必须带上这段字符串</li><li>客户端要在一段时间内保存这个<code>Cookie</code></li><li>Cookie 默认在用户关闭页面后就失效，后台代码可以任意设置 <code>Cookie</code> 的过期时间<br>这家伙不占内存</li></ul><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>一般来说，Session 是基于 Cookie 实现的</p><ul><li>服务器通过<code>Cookie</code>给客户端一个<code>SessionId</code>（随机数）</li><li>客户端访问服务器的时候，服务器读取<code>SessionId</code></li><li>服务器里的一小块内存（对象）保存了所有<code>session</code></li><li>这块内存（哈希表）就是服务器上所有<code>session</code></li><li>服务器就通过<code>SessionId</code>读取对应的用户信息（id、email）</li><li>以此获取用户的隐私信息</li></ul><p><code>sessionId</code>是个随机数，所以用户不能通过该随机数来获取其他用户的隐私信息。<br><strong>这样，<code>session</code>就可以阻止用户随便改Cookie</strong></p><p>缺点：占内存……<br>用户多了就占很大的内存。</p><p><strong>前端永远不要读/写cookie</strong><br>你有LocalStorage</p><h1 id="1-LocalStorage"><a href="#1-LocalStorage" class="headerlink" title="1.LocalStorage"></a>1.LocalStorage</h1><p>这是 HTML5 提供的 API<br>实质是一个 hash<br>session 是服务器上的 hash<br>LocalStorage 是浏览器上的 hash</p><ol><li>LocalStorage 和 HTTP 无关</li><li>HTTP 不会带上 LocalStorage 的值</li><li>只有相同域名的页面才能互相读取 LocalStorage（没有同源那么严格）</li><li>每个域名 LocalStorage 最大存储量 5Mb 左右 （每个浏览器不一样）</li><li>常用场景：记录没有提示过的用户（没有用的信息，不能记录密码）</li><li>LocalStorage 理论上永久有效，除非用户清理缓存（cookie及其他网站数据）<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2></li></ol><table><thead><tr><th style="text-align:center">API</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">clear</td><td style="text-align:center">清除所有</td></tr><tr><td style="text-align:center"><strong>getItem</strong></td><td style="text-align:center">取值用的</td></tr><tr><td style="text-align:center"><strong>removeItem</strong></td><td style="text-align:center">删除相应LocalStorage</td></tr><tr><td style="text-align:center"><strong>setItem</strong></td><td style="text-align:center">只能存string</td></tr></tbody></table><h2 id="SessionStorage（会话存储）"><a href="#SessionStorage（会话存储）" class="headerlink" title="SessionStorage（会话存储）"></a>SessionStorage（会话存储）</h2><p>和LocalStorage基本一样，唯一不一样的是最后一点。</p><ol><li>SessionStorage 和 HTTP 无关</li><li>HTTP 不会带上 SessionStorage 的值</li><li>只有相同域名的页面才能互相读取 SessionStorage</li><li>每个域名 SessionStorage 最大存储量 5Mb 左右 （每个浏览器不一样）</li><li><strong>SessionStorage 在用户关闭页面（Session结束[会话结束]）后就失效</strong></li></ol><h1 id="2-缓存控制Cache-Control"><a href="#2-缓存控制Cache-Control" class="headerlink" title="2.缓存控制Cache-Control"></a>2.缓存控制Cache-Control</h1><p>在请求头中加入<code>response.setHeader(&#39;Cache-Control&#39;,&#39;max-age=30&#39;)</code><br>请求缓存控制，30秒内不再请求<br>可以让浏览器在重复请求的时候调用缓存<br>加快打开速度<br><strong>web优化相关</strong></p><h2 id="I-更新缓存"><a href="#I-更新缓存" class="headerlink" title="I.更新缓存"></a>I.更新缓存</h2><ul><li>js 和 css 一般设置 10 年缓存</li><li>服务器要更新 js 和 css 的时候怎么办</li><li>但是，只有<strong>相同</strong>的<strong>url</strong>才会利用之前的缓存</li><li>所以只要稍微让 url 不一样就可以</li><li>加一个查询参数就可以了</li><li><code>./css/default.css?v=2/</code></li><li>加了点点东西，但是 url 变了，所以会不使用之前的缓存。</li><li>重新请求</li></ul><h2 id="II-为什么首页不能设置Cache-Control"><a href="#II-为什么首页不能设置Cache-Control" class="headerlink" title="II.为什么首页不能设置Cache-Control"></a>II.为什么首页不能设置Cache-Control</h2><ul><li>chrome不允许在设置首页缓存</li><li>如果首页设置缓存</li><li>页面一旦更新，用户无法获取最新版本</li><li>如果你设置一天或者几个小时，巨大风险</li></ul><h1 id="3-Expires"><a href="#3-Expires" class="headerlink" title="3.Expires"></a>3.Expires</h1><p>如果设置了 <code>max-age</code> 或者 <code>s-max-age</code> 指令的<code>Cache-Control</code>响应头，那么<code>Expires</code>头就会被忽略</p><p><code>Cache-Control</code>是新的头<br><code>Expires</code>是以前用的。</p><h2 id="I-语法"><a href="#I-语法" class="headerlink" title="I.语法"></a>I.语法</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.SetHeaders('Expires', 'Sat, 16 Jun <span class="number">2018</span> 20:02:34 GMT')</span><br></pre></td></tr></table></figure><p>Expires 接一个 GMT 时间。<br>表示缓存的过期时间。<br>所以他和<code>Cache-Control</code>的区别是<br>前者规定过期日期<br>后者规定过期时间</p><p>有没有一种有<code>效期至</code>和<code>保质期</code>的感觉</p><ul><li>但是<code>有效期至</code>如果写错了岂不是巨大风险</li><li>所以我们有了<code>保质期</code></li><li><code>Cache-Control</code>从现在开始计时 </li></ul><h1 id="4-ETag"><a href="#4-ETag" class="headerlink" title="4.ETag"></a>4.ETag</h1><p>这是用来给文件一个版本号的东东。</p><h2 id="I-MD5"><a href="#I-MD5" class="headerlink" title="I.MD5"></a>I.MD5</h2><p>讯息摘要演算法<br>拿来校验文件的</p><ul><li>他把文件变成字符串</li><li>如果内容改变了</li><li>那么这个字符串和原来的字符串差别很大</li><li>改变的差异越小，那么字符串差异就越大</li></ul><p>node.js 有 md5 的库</p><h2 id="II-Etag如何工作"><a href="#II-Etag如何工作" class="headerlink" title="II.Etag如何工作"></a>II.Etag如何工作</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let fileMd5 = md5(<span class="keyword">string</span>)</span><br><span class="line">response.setHeader(<span class="string">'ETag'</span>, fileMd5)        </span><br><span class="line"><span class="built_in">if</span> (request.headers[<span class="string">'if-none-match'</span>] === fileMd5) &#123;</span><br><span class="line">    <span class="comment">//没有响应体，只有响应头</span></span><br><span class="line">    response.statusCode = <span class="number">304</span></span><br><span class="line">&#125; <span class="built_in">else</span> &#123;</span><br><span class="line">    <span class="comment">//有响应体</span></span><br><span class="line">    response.<span class="built_in">write</span>(<span class="keyword">string</span>)</span><br><span class="line">&#125;</span><br><span class="line">response.<span class="built_in">end</span>()</span><br></pre></td></tr></table></figure><ul><li>这时候，请求头里会多出一个<code>If-None-Match: 相应的md5</code></li><li>如果这个<code>If-None-Match</code>的值和<code>md5</code>匹配</li><li>那么说明不需要重新下载</li><li>返回 304 表达：没改过</li><li>如果有变化，那么再响应</li></ul><h3 id="i-使用场景"><a href="#i-使用场景" class="headerlink" title="i.使用场景"></a>i.使用场景</h3><ul><li>帖子更新</li><li>为每个帖子页面生成唯一的ETag，在其未改变时，查看话题属性比较ETag就能避免刷新帖子。</li></ul><h2 id="III-和缓存的区别"><a href="#III-和缓存的区别" class="headerlink" title="III.和缓存的区别"></a>III.和缓存的区别</h2><p>缓存：</p><ul><li>直接不请求</li><li>从内存里拿</li></ul><p>ETag:</p><ul><li>正常发请求</li><li>匹配 MD5</li><li>如果匹配，则不下载(响应体为空)response.setHeader(‘Cache-Control’,’max-age=30’)</li></ul><h3 id="i-缓存和ETag哪个更优？"><a href="#i-缓存和ETag哪个更优？" class="headerlink" title="i.缓存和ETag哪个更优？"></a>i.缓存和ETag哪个更优？</h3><p>理论上，缓存更好<br>因为节省了请求时间，更加迅速</p><h1 id="5-Last-Modified"><a href="#5-Last-Modified" class="headerlink" title="5.Last-Modified"></a>5.Last-Modified</h1><ul><li>Last-Modified是一个响应头</li><li>其中包含源头服务器认定的资源做出修改的日期及时间</li><li>它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致</li><li>由于精确度比 <code>ETag</code> 要低，所以这是一个备用机制</li><li>包含有  If-Modified-Since 或 If-Unmodified-Since 首部的条件请求会使用这个字段。</li></ul><p><code>response.SetHeaders(&#39;Last-Modified&#39;, &#39;Sat, 16 Jun 2018 20:02:34 GMT&#39;)</code></p><ul><li>服务端发给客户端一个最后修改的时间</li><li>客户端匹配最后修改时间</li><li>然后请求</li></ul><h2 id="I-If-Modified-Since"><a href="#I-If-Modified-Since" class="headerlink" title="I.If-Modified-Since"></a>I.If-Modified-Since</h2><ul><li>条件式请求头</li><li>服务器只在所请求的资源在给定的日期时间之后对内容进行过修改的情况下才会将资源返回</li><li>状态码为 200</li><li>如果请求的资源从那时起未经修改</li><li>那么返回一个不带有消息主体的 304 响应</li><li>而在 Last-Modified 首部中会带有上次修改时间。</li></ul><p><strong>如果和<code>If-None-Match</code>同时出现，则会被忽略</strong></p><h2 id="II-If-Unmodified-Since"><a href="#II-If-Unmodified-Since" class="headerlink" title="II.If-Unmodified-Since"></a>II.If-Unmodified-Since</h2><ul><li>条件式请求头</li><li>只有当资源在指定的时间之后没有进行过修改的情况下，服务器才会返回请求的资源</li><li>如果所请求的资源在指定的时间之后发生了修改，那么会返回 412 (Precondition Failed) 错误</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-Session&quot;&gt;&lt;a href=&quot;#0-Session&quot; class=&quot;headerlink&quot; title=&quot;0.Session&quot;&gt;&lt;/a&gt;0.Session&lt;/h1&gt;&lt;h2 id=&quot;I-如何阻止用户篡改Cookie&quot;&gt;&lt;a href=&quot;#I-如何阻止用户篡
      
    
    </summary>
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>关于Cookie</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/07/%E5%85%B3%E4%BA%8ECookie/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/07/关于Cookie/</id>
    <published>2018-06-07T10:38:15.000Z</published>
    <updated>2019-03-05T10:16:46.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-前置"><a href="#0-前置" class="headerlink" title="0.前置"></a>0.前置</h1><ul><li>Cookie Session Cache-Control 这三个是响应头，响应头，响应头。</li></ul><h1 id="1-cookie"><a href="#1-cookie" class="headerlink" title="1.cookie"></a>1.cookie</h1><h2 id="I-定义"><a href="#I-定义" class="headerlink" title="I.定义"></a>I.定义</h2><h3 id="i-维基说的"><a href="#i-维基说的" class="headerlink" title="i.维基说的"></a>i.维基说的</h3><ul><li>Cookie（复数形态Cookies），中文名称为“小型文本文件”或“小甜饼”，指某些网站为了辨别用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）。</li><li>由网景公司的前雇员卢·蒙特利在1993年3月发明。最初定义于RFC 2109。</li><li>目前使用最广泛的 Cookie标准却不是RFC中定义的任何一个，而是在网景公司制定的标准上进行扩展后的产物。</li></ul><h3 id="ii-简化一点"><a href="#ii-简化一点" class="headerlink" title="ii.简化一点"></a>ii.简化一点</h3><ol><li>Cookie 是浏览器访问服务器后，服务器传给浏览器的一段数据。</li><li>浏览器需要保存这段数据，不得轻易删除。</li><li>此后每次浏览器访问该服务器，都必须带上这段数据。</li></ol><h2 id="II-作用"><a href="#II-作用" class="headerlink" title="II.作用"></a>II.作用</h2><h3 id="i-识别用户身份"><a href="#i-识别用户身份" class="headerlink" title="i.识别用户身份"></a>i.识别用户身份</h3><ul><li>A用户 注册登陆了 <code>a.com</code>， <code>a.com</code> 的服务器返回给 A用户 一段数据，包含用户名密码各种东西</li><li>B用户 打开 <code>a.com</code> ， <code>a.com</code> 的服务器看了一眼数据库发现没有 B用户 的数据，就让 B用户 去注册登录，然后返回给 B用户 它的账户信息</li><li>这样，<code>a.com</code> 就可以清楚的区分 A用户 和 B用户 了。<h3 id="ii-记录历史"><a href="#ii-记录历史" class="headerlink" title="ii.记录历史"></a>ii.记录历史</h3></li><li>假设一个用户进入一个购物网站，加了两件商品到购物车</li><li>这时 JS 改写cookie，将这两件商品记录在下来(假设<code>[{&quot;userId&quot;:&quot;Oracle&quot;,&quot;stuff&quot;:&quot;2&quot;}]</code>)</li><li>假设用户摇摆不定，过了两三天</li><li>依然可以看见这两件商品躺在购物车里，因此浏览器不会无缘无故删除这个 Cookie</li></ul><h2 id="III-特点"><a href="#III-特点" class="headerlink" title="III.特点"></a>III.特点</h2><ol><li>服务器通过 Set-Cookie 响应头设置 Cookie</li><li>浏览器得到 Cookie 之后，每次请求都要带上 Cookie</li><li>服务器读取 Cookie 就知道登录用户的信息(email)</li></ol><h2 id="IV-问题"><a href="#IV-问题" class="headerlink" title="IV.问题"></a>IV.问题</h2><ol><li><p>我在 Chrome 登录了，用 Safari 访问， Safari 会带上 Cookie 吗<br> // No</p></li><li><p>Cookie 存在哪<br> // Windows 存在 C 盘的文件里</p></li><li><p>Cookie 这张票能作假吗<br> // 用户在 Application 里随便改<br> // document.cookie 乱改(HttpOnly下不可以)</p></li><li><p>Cookie 存在有效期吗<br> // 默认有效期20分钟左右<br> // 后端可以强制设置有效期<br> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie" target="_blank" rel="noopener">具体要看这个</a></p></li><li><p>Cookie 会随着域名分组吗<br> // 会，Cookie按域名分组，一个域名只能带上自己域名的Cookie</p></li></ol><h2 id="V-cookie登录的相关流程"><a href="#V-cookie登录的相关流程" class="headerlink" title="V.cookie登录的相关流程"></a>V.cookie登录的相关流程</h2><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">                     Server                   users</span><br><span class="line">                       |<span class="string">                        </span>|<span class="string"> </span></span><br><span class="line"><span class="string">                       </span>|<span class="string">         post           </span>|<span class="string"> 打开 sign-up 注册</span></span><br><span class="line"><span class="string">                       </span>|<span class="string">      &lt;===========      </span>|</span><br><span class="line">              写数据库  ||<span class="string">     email pw1 pw2     </span>||<span class="string"> </span></span><br><span class="line"><span class="string">           &lt;===========</span>|<span class="string">                        </span>|<span class="string"> </span></span><br><span class="line"><span class="string">             email pw  </span>|<span class="string">         注册成功        </span>||</span><br><span class="line">                       |<span class="string">      ===========&gt;      </span>|</span><br><span class="line">                       |<span class="string">                        </span>|</span><br><span class="line">                       |<span class="string">          post          </span>|<span class="string">  打开 sign-in 登入</span></span><br><span class="line"><span class="string">                       </span>|<span class="string">      &lt;===========      </span>|</span><br><span class="line">                       |<span class="string">        email pw        </span>|</span><br><span class="line">                       |<span class="string">                        </span>|</span><br><span class="line">                       |<span class="string">                        </span>|</span><br><span class="line">                       |<span class="string">      ===========&gt;      </span>|</span><br><span class="line">                       |<span class="string">     SetCookie,email    </span>|</span><br><span class="line">                       |<span class="string">                        </span>|</span><br><span class="line">                       |<span class="string">       带上cookie       </span>||<span class="string"> 打开首页</span></span><br><span class="line"><span class="string">                       </span>|<span class="string">      &lt;===========      </span>|</span><br><span class="line">                       |<span class="string">          GET           </span>|</span><br><span class="line">             读cookie  ||<span class="string">                       </span>||</span><br><span class="line">     email: 1<span class="meta">@xxx.com</span>  |<span class="string">                        </span>|</span><br><span class="line">   user=find-by email  |<span class="string">                        </span>|</span><br><span class="line">user&#123;email,pw,birthD&#125;  |<span class="string">                        </span>|</span><br><span class="line">index.html(填入对应pw)  ||<span class="string">                       </span>||</span><br><span class="line">                       ↓          响应          ↓↓</span><br><span class="line">                       ↓      -----------→      ↓</span><br></pre></td></tr></table></figure><p><strong>这就是cookie的工作流程</strong></p><h1 id="Cookie-的那些小故事"><a href="#Cookie-的那些小故事" class="headerlink" title="Cookie 的那些小故事"></a>Cookie 的那些小故事</h1><h2 id="Cookie-的分类"><a href="#Cookie-的分类" class="headerlink" title="Cookie 的分类"></a>Cookie 的分类</h2><h3 id="默认级别"><a href="#默认级别" class="headerlink" title="默认级别"></a>默认级别</h3><ul><li>指的是没有设置有效时间的Cookie</li><li>默认的情况下只要关闭了浏览器，Cookie也会被销毁</li><li>Cookie存在于浏览器的内存中，当关闭了浏览器Cookie就销毁了<h3 id="持久级别"><a href="#持久级别" class="headerlink" title="持久级别"></a>持久级别</h3></li><li>指的是有有效时间的Cookie</li><li>这种Cookie的内容不是保存在浏览器的内存中，将Cookie的内容保存（持久化）到硬盘上。</li><li>这个时候，关闭浏览器，再次打开浏览器会加载硬盘上的文件，从而Cookie中的数据就不会丢失。</li></ul><h2 id="Cookie-的数据大小"><a href="#Cookie-的数据大小" class="headerlink" title="Cookie 的数据大小"></a>Cookie 的数据大小</h2><p>浏览器存放的Cookie的大小和个数是有限制的。</p><ul><li>浏览器一般只允许存放300个Cookie</li><li>每个站点最多可以存放20个Cookie</li><li>老版本浏览器中，每个Cookie的大小限制为4KB<h2 id="Cookie操作"><a href="#Cookie操作" class="headerlink" title="Cookie操作"></a>Cookie操作</h2></li><li><code></code></li></ul><h2 id="其他的小Tip"><a href="#其他的小Tip" class="headerlink" title="其他的小Tip"></a>其他的小Tip</h2><ul><li>一个Cookie只用标识一种信息，至少含有一个标识该信息的名称和值。</li><li>一个web站点可以给一个浏览器发送多个Cookie。一个web浏览器可以存储多个web站点的Cookie</li><li>需要手动删除持久性Cookie，可以将Cookie的有效时长设置为0.必须注意：删除Cookie时候，path必须一致，否则无法删除</li></ul><p><strong>常用API</strong></p><table><thead><tr><th style="text-align:center">API</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">cookie.setMaxAge(30)</td><td style="text-align:center">设置最大生命周期。秒为单位，为0时表示立即删除该cookie，负数表示不存储该cookie</td></tr><tr><td style="text-align:center">response.addCookie()</td><td style="text-align:center">增加cookie(写回到浏览器),参数为cookie的名字</td></tr><tr><td style="text-align:center">encodeURIComponent()</td><td style="text-align:center">用它可以使cookie的值不包含任何逗号分号和空格</td></tr><tr><td style="text-align:center">decodeURIComponent()</td><td style="text-align:center">可以用来识别邮箱里的@符号</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-前置&quot;&gt;&lt;a href=&quot;#0-前置&quot; class=&quot;headerlink&quot; title=&quot;0.前置&quot;&gt;&lt;/a&gt;0.前置&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Cookie Session Cache-Control 这三个是响应头，响应头，响应头。&lt;/li&gt;
&lt;/ul&gt;
      
    
    </summary>
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>setTimeout模拟setInterval</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/06/setTimeout%E6%A8%A1%E6%8B%9FsetInterval/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/06/setTimeout模拟setInterval/</id>
    <published>2018-06-06T12:17:00.000Z</published>
    <updated>2019-03-05T10:16:46.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-一个问题"><a href="#0-一个问题" class="headerlink" title="0.一个问题"></a>0.一个问题</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> duration = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setInterval</span><span class="params">(()</span></span>=&gt;&#123;</span><br><span class="line">    <span class="comment">//要执行的代码</span></span><br><span class="line">&#125;,duration)</span><br></pre></td></tr></table></figure><ul><li>这段代码中<code>setInterval</code>读了一次变量<code>duration</code>的值</li><li>之后<code>setInterval</code>再也不会读这个值了</li><li>就算我后面改了<code>duration</code>的值，他也不会再读了</li><li>这使得<code>setInterval</code>不能达到控速的目的</li></ul><h1 id="1-一个小技巧，模拟setInterval"><a href="#1-一个小技巧，模拟setInterval" class="headerlink" title="1.一个小技巧，模拟setInterval()"></a>1.一个小技巧，模拟setInterval()</h1><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">* body里有个div。</span></span><br><span class="line"><span class="comment">* id="output"</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">id</span> = setInterval(()=&gt;&#123;</span><br><span class="line">    n+=<span class="number">1</span></span><br><span class="line">    output.<span class="attr">innerText</span> = n</span><br><span class="line">    <span class="keyword">if</span>(n&gt;=<span class="number">10</span>)&#123;</span><br><span class="line">        window.clearInterval(id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> id = setTimeout(function <span class="function"><span class="keyword">fn</span><span class="params">()</span>&#123;</span></span><br><span class="line"><span class="function">    n += <span class="number">1</span></span></span><br><span class="line"><span class="function">    <span class="keyword">output</span>.<span class="title">innerText</span> = n</span></span><br><span class="line"><span class="function">    setTimeout<span class="params">(<span class="keyword">fn</span>, <span class="number">500</span>)</span>     <span class="comment">//这句话是精髓:打出来一次以后，延时500,再次调用fn</span></span></span><br><span class="line"><span class="function">&#125;,<span class="number">500</span>)</span></span><br></pre></td></tr></table></figure><p><strong>他们俩可以达到一样的效果</strong></p><h2 id="I-加个中断吧"><a href="#I-加个中断吧" class="headerlink" title="I.加个中断吧"></a>I.加个中断吧</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> id = setTimeout(function <span class="function"><span class="keyword">fn</span></span>()&#123;</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">    output.innerText = n</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">10</span>)&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">fn</span>, 500)   //如果<span class="title">n</span></span>&lt;<span class="number">10</span>，就调用<span class="function"><span class="keyword">fn</span>，否则，什么也不做</span></span><br><span class="line"><span class="function">    &#125;</span></span><br><span class="line"><span class="function">&#125;,500)</span></span><br></pre></td></tr></table></figure><p>加个判断条件砸掉定时器，是不是很灵活<br>并不需要<code>window.clearInterval(id)</code></p><h1 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h1><ul><li>所有<code>setInterval</code>都可以改写成<code>setTimeout</code></li><li>通过在<code>setTimeout</code>内部增加<code>setTimeout(fn,500)</code>达到重复调用的作用</li><li>以此达到模拟<code>setInterval</code>的作用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-一个问题&quot;&gt;&lt;a href=&quot;#0-一个问题&quot; class=&quot;headerlink&quot; title=&quot;0.一个问题&quot;&gt;&lt;/a&gt;0.一个问题&lt;/h1&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/JavaScript/"/>
    
    
      <category term="JS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>异步＆回调</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/06/04/%E5%BC%82%E6%AD%A5%EF%BC%86%E5%9B%9E%E8%B0%83/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/06/04/异步＆回调/</id>
    <published>2018-06-04T13:41:23.000Z</published>
    <updated>2019-03-05T10:16:46.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-概念"><a href="#0-概念" class="headerlink" title="0.概念"></a>0.概念</h1><h2 id="I-异步"><a href="#I-异步" class="headerlink" title="I.异步"></a>I.异步</h2><p>异步加载也叫非阻塞模式加载，在浏览器下载JS的同事，还会执行后续的页面处理。</p><p><strong>不等自己这行代码运行完，直接运行下一行代码，就是异步</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">    console.<span class="built_in">log</span>(<span class="string">'这里这里看这里'</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">console.<span class="built_in">log</span>(<span class="string">'不看不看不看'</span>)</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">setTimeout还沉浸在它的delay时间里的时候</span><br><span class="line">已经打印出了<span class="string">'不看不看不看'</span></span><br><span class="line">一秒后才打印出<span class="string">'这里这里看这里'</span></span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="i-什么时候需要异步"><a href="#i-什么时候需要异步" class="headerlink" title="i.什么时候需要异步"></a>i.什么时候需要异步</h3><h4 id="在等待过程中不能像alert一样阻塞程序运行"><a href="#在等待过程中不能像alert一样阻塞程序运行" class="headerlink" title="在等待过程中不能像alert一样阻塞程序运行"></a>在等待过程中不能像alert一样阻塞程序运行</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">for</span><span class="params">(var i=<span class="number">0</span>; i&lt;<span class="number">100000</span>;i++)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">alert</span><span class="params">(<span class="string">'遍历完成'</span>)</span></span></span><br></pre></td></tr></table></figure><ul><li>JS是单线程的</li><li>他会老老实实等待遍历完成以后再alert</li><li>严重堵塞了后面的代码执行。</li></ul><h4 id="需要等待的情况"><a href="#需要等待的情况" class="headerlink" title="需要等待的情况"></a>需要等待的情况</h4><ul><li>我们知道有一个叫做 <code>window.onload</code> 的api</li><li>在我们需要在<code>head</code>里面加入<code>script</code>代码的时候，会将代码写在<code>windowl.onload</code>里面</li><li>因为在我们操作<code>dom</code>的时候<code>script</code>后面的<code>html</code>代码还没开始加载</li><li>人家还没存在就想操作人家，臣妾做不到呀。</li><li><code>window.onload</code>里面的代码是在文档全部加载完毕后执行的，相当于异步</li></ul><h4 id="等待的情况需要异步"><a href="#等待的情况需要异步" class="headerlink" title="等待的情况需要异步"></a>等待的情况需要异步</h4><p>有时候页面不需要一次性把所有代码都加载，更多的时候我们是按照某个需求采取加载某段代码的。</p><h3 id="ii-我们经常用到异步"><a href="#ii-我们经常用到异步" class="headerlink" title="ii.我们经常用到异步"></a>ii.我们经常用到异步</h3><ul><li><code>setTimeout</code>和<code>setInterval</code>定时器</li><li><code>ajax</code>网络请求</li><li>事件绑定</li></ul><h2 id="II-同步"><a href="#II-同步" class="headerlink" title="II.同步"></a>II.同步</h2><p>和人类的思维顺序最匹配的运行方式</p><ul><li>谁先写，谁先运行。</li><li>当前行代码任务执行完了得到结果后，再执行下一行</li></ul><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">console.<span class="built-in">log</span>(<span class="string">'first'</span>)</span><br><span class="line">console.<span class="built-in">log</span>(<span class="string">'second'</span>)</span><br><span class="line">console.<span class="built-in">log</span>(<span class="string">'third'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">天天都能看到的顺序执行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="III-区别"><a href="#III-区别" class="headerlink" title="III.区别"></a>III.区别</h2><p>同步或非同步，标明是否将整个流程按顺序完成<br>阻塞或非阻塞，意味着调用函数会不会立即告诉你结果</p><h2 id="IV-回调"><a href="#IV-回调" class="headerlink" title="IV.回调"></a>IV.回调</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In computer programming, <span class="selector-tag">a</span> callback is <span class="selector-tag">a</span> reference to <span class="selector-tag">a</span> piece of </span><br><span class="line">executable <span class="selector-tag">code</span> that is passed as an argument to other <span class="selector-tag">code</span>.</span><br><span class="line">                                                    ——维基说的</span><br></pre></td></tr></table></figure><ul><li>JS 中的回调函数定义为：</li><li>函数 A 作为参数(函数引用)传递到另一个函数 B 中</li><li>并且这个函数 B 执行函数 A </li><li>我们就说函数 A 叫做回调函数</li><li>如果没有名称(函数表达式)，就叫做匿名回调函数。</li><li>函数 B 调用函数 A 叫做调用回调函数</li></ul><h3 id="使用场合"><a href="#使用场合" class="headerlink" title="使用场合"></a>使用场合</h3><ul><li>资源加载：动态加载 JS 文件后执行回调，加载 iframe 后执行回调， ajax 操作回调，图片加载完成执行回调。</li><li>DOM 事件以及 Node.js 事件基于回调机制</li><li>setTimeout的延迟为0，我们喜闻乐见的立即执行函数</li><li>链式调用 </li><li>setTimeout setInterval的函数调用得到返回值。</li></ul><h1 id="1-执行顺序"><a href="#1-执行顺序" class="headerlink" title="1.执行顺序"></a>1.执行顺序</h1><p>同步优先、异步靠边、回调垫底<br>           ↓<br>   同步 =&gt; 异步 =&gt; 回调</p><h1 id="2-举个栗子"><a href="#2-举个栗子" class="headerlink" title="2.举个栗子"></a>2.举个栗子</h1><h2 id="I-关于伟大的setTimeout"><a href="#I-关于伟大的setTimeout" class="headerlink" title="I.关于伟大的setTimeout"></a>I.关于伟大的setTimeout</h2><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for(<span class="name">var</span> i=0<span class="comment">; i&lt;5; i++)&#123;</span></span><br><span class="line">    setTimeout(<span class="name">function</span>()&#123;</span><br><span class="line">        console.log(<span class="name">i</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(<span class="name">i</span>)</span><br></pre></td></tr></table></figure><ul><li>这是个非常经典的题</li><li>如果靠猜可能有两种答案</li><li>0 1 2 3 4 5 5</li><li>5 5 5 5 5 5 5</li></ul><h3 id="i-分析一下"><a href="#i-分析一下" class="headerlink" title="i.分析一下"></a>i.分析一下</h3><ol><li><code>for</code>循环和循环体外部的<code>console.log</code>是同步的，所以先执行<code>for</code>循环，再执行外部的<code>console.log</code>(同步优先)</li><li><code>for</code>循环里有一个<code>setTimeout</code>回调<code>function()</code>，它是垫底的，所以只能最后执行(回调垫底)</li><li>为什么最先输出5？<ul><li><code>for</code> 循环先执行，但是不会给setTimeout传参(回调垫底)</li><li>等<code>for</code>循环执行完，就会给<code>setTimeout</code>传参</li><li>而外部的<code>console.log</code>打印出5是因为<code>for</code>循环执行完成了</li></ul></li></ol><h4 id="概括一下"><a href="#概括一下" class="headerlink" title="概括一下"></a>概括一下</h4><ul><li>里面的兄弟<code>setTimeout</code>想等一秒</li><li><code>for</code>这位老大哥已经遍历完了</li><li>等里面的<code>setTimeout</code>准备好了的时候</li><li><code>for</code>给它丢过去一个<code>5</code></li></ul><h2 id="II-关于Promise的例子"><a href="#II-关于Promise的例子" class="headerlink" title="II.关于Promise的例子"></a>II.关于Promise的例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">2</span>), <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    resolve(<span class="literal">true</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">a.then(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">8</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>), <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="i-分析一下-1"><a href="#i-分析一下-1" class="headerlink" title="i.分析一下"></a>i.分析一下</h3><ol><li><p><code>a</code>是一个<code>Promise</code>，本身<code>Promise</code>对象是同步的，但是<code>then()</code>和<code>catch()</code>方法是异步的</p><ul><li>先执行<code>a</code>里面的<code>Promise</code>同步代码(同步优先)</li><li><code>console.log(1)</code></li><li><code>setTimeout(() =&gt; console.log(2), 0)</code> 好家伙你是回调，先等着(回调垫底)</li><li><code>console.log(3)</code></li><li><code>console.log(4)</code></li></ul></li><li><p>接着执行 <code>resolve(true)</code> 进入<code>then()</code></p><ul><li><code>then</code>是异步的，他下面还有同步任务没有执行完</li><li>所以<code>then</code>里的内容也放进消息队列里等候(异步靠边)</li></ul></li><li><p><code>b</code>也是一个<code>Promise</code>对象，同步，执行内部同步代码。</p><ul><li><code>console.log(5)</code></li><li><code>setTimeout(() =&gt; console.log(6), 0)</code> 回调去排队(回调垫底)</li></ul></li><li><p>最后同步<code>console.log(7)</code>输出7</p></li><li>JS回头看到了消息队列<ul><li>只有一个是异步，<code>then()</code>出来输出8</li><li>异步over</li><li>回调函数，这时候有两个<code>setTimeout</code>在等待</li><li>由于他们俩时间是一样的，都是0</li><li>所以不受时间影响，只和排队的先后顺序有关</li><li>所以先输出<code>a</code>里的2</li><li>再输出<code>b</code>里的6</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-概念&quot;&gt;&lt;a href=&quot;#0-概念&quot; class=&quot;headerlink&quot; title=&quot;0.概念&quot;&gt;&lt;/a&gt;0.概念&lt;/h1&gt;&lt;h2 id=&quot;I-异步&quot;&gt;&lt;a href=&quot;#I-异步&quot; class=&quot;headerlink&quot; title=&quot;I.异步&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/JavaScript/"/>
    
    
      <category term="JS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>用JS做一个AJAX</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/05/11/%E7%94%A8JS%E5%81%9A%E4%B8%80%E4%B8%AAAJAX/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/05/11/用JS做一个AJAX/</id>
    <published>2018-05-10T18:26:47.000Z</published>
    <updated>2019-03-05T10:16:46.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-AJAX-的所有功能"><a href="#0-AJAX-的所有功能" class="headerlink" title="0.AJAX 的所有功能"></a>0.AJAX 的所有功能</h1><ul><li>客户端的JS发起请求（浏览器上的）</li><li>服务端的JS发送响应（Node.js上的）</li></ul><h2 id="I-JS-可以设置任意请求-header-吗"><a href="#I-JS-可以设置任意请求-header-吗" class="headerlink" title="I.JS 可以设置任意请求 header 吗?"></a>I.JS 可以设置任意请求 header 吗?</h2><ul><li>第一部分 request.open(‘get’, ‘/xxx’)</li><li>第二部分 request.setHeader(‘content-type’,’x-www-form-urlencoded’)</li><li>第四部分 request.send(‘a=1&amp;b=2’)</li></ul><h2 id="II-JS-可以获取任意响应-header-吗？"><a href="#II-JS-可以获取任意响应-header-吗？" class="headerlink" title="II.JS 可以获取任意响应 header 吗？"></a>II.JS 可以获取任意响应 header 吗？</h2><ul><li>第一部分 request.status / request.statusText</li><li>第二部分 request.getResponseHeader() / request.getAllResponseHeaders()</li><li>第四部分 request.responseText</li></ul><h2 id="所有功能都给了JS"><a href="#所有功能都给了JS" class="headerlink" title="所有功能都给了JS"></a>所有功能都给了JS</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">服务端              request(<span class="number">4</span>)           客户端</span><br><span class="line"><span class="keyword">Node</span>.<span class="title">js</span>        <span class="tag">&lt;=================       chrome</span></span><br><span class="line"><span class="tag">               =================&gt;</span></span><br><span class="line">                   response(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h1 id="1-回调"><a href="#1-回调" class="headerlink" title="1.回调"></a>1.回调</h1><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> a <span class="function"><span class="keyword">function</span></span></span><br><span class="line"><span class="keyword">call</span> a <span class="function"><span class="keyword">function</span></span> back</span><br></pre></td></tr></table></figure><h2 id="I-回调的问题"><a href="#I-回调的问题" class="headerlink" title="I.回调的问题"></a>I.回调的问题</h2><p>每个程序员的回调名不一样<br>封装习惯也不一样。<br>不能每个库都去看文档吧。</p><h2 id="II-Promise"><a href="#II-Promise" class="headerlink" title="II.Promise"></a>II.Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">f1, f2</span>) =&gt;</span> &#123;</span><br><span class="line">        doSomething()</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 成功就调用 f1，失败就调用 f2</span></span><br><span class="line">        &#125;,<span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xxx().then(success, fail)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式操作</span></span><br><span class="line">xxx().then(success, fail).then(success, fail)</span><br></pre></td></tr></table></figure><p>如果需要对结果多次处理，那么就多<code>then</code>几个</p><p>成功就是第一个参数，失败就是第二个参数，还能进行链式操作。<br>是不是统一了标准<br>这就是<code>promise</code>的意义</p><p>其中第一个<code>then</code>的处理结果<code>return</code>出来，交给第二个<code>then</code>处理</p><h3 id="i-注意"><a href="#i-注意" class="headerlink" title="i.注意"></a>i.注意</h3><p>如果<code>Response Headers</code>中的<code>Content-type</code><br>为<code>text/json</code>。<br><code>jQuery</code>就会自动用<code>JSON</code>去<code>parse</code>一下</p><h3 id="ii-promise的模式"><a href="#ii-promise的模式" class="headerlink" title="ii.promise的模式"></a>ii.promise的模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.Promise = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        then: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-AJAX-的所有功能&quot;&gt;&lt;a href=&quot;#0-AJAX-的所有功能&quot; class=&quot;headerlink&quot; title=&quot;0.AJAX 的所有功能&quot;&gt;&lt;/a&gt;0.AJAX 的所有功能&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;客户端的JS发起请求（浏览器上的）&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/HTTP/"/>
    
    
      <category term="AJAX" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/AJAX/"/>
    
  </entry>
  
  <entry>
    <title>AJAX</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/05/09/AJAX/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/05/09/AJAX/</id>
    <published>2018-05-09T00:21:28.000Z</published>
    <updated>2019-03-05T10:16:46.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-关于发送请求"><a href="#0-关于发送请求" class="headerlink" title="0.关于发送请求"></a>0.关于发送请求</h1><h2 id="I-如何发送请求"><a href="#I-如何发送请求" class="headerlink" title="I.如何发送请求"></a>I.如何发送请求</h2><ul><li>用<code>form</code>可以发送请求，但是会刷新页面或新开页面</li><li>用<code>a</code>可以发<code>GET</code>请求，但是也会刷新页面或新开页面</li><li>用<code>img</code>可以发<code>GET</code>请求，但是只能以图片的形式展示</li><li>用<code>script</code>可以发<code>GET</code>请求，但是只能以脚本的形式运行</li><li>用<code>link</code>可以发<code>GET</code>请求，但是只能以<code>CSS</code>、<code>favicon</code>的形式展示</li></ul><p><strong>有没有一种方法可以：</strong></p><ul><li><code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>请求都可以做到</li><li>想用什么形式展示就以什么形式展示</li></ul><h2 id="II-伟大的巨硬-Microsoft"><a href="#II-伟大的巨硬-Microsoft" class="headerlink" title="II.伟大的巨硬(Microsoft)"></a>II.伟大的巨硬(Microsoft)</h2><ul><li>在IE5率先在<code>JS</code>中引入<code>ActiveX</code>对象（API），使得JS可以直接发起HTTP请求。</li><li>随后<code>Mozilla</code>、<code>Safari</code>、<code>Opera</code>也跟进了，命名<code>XMLHttpRequest</code>，并被纳入<code>W3C</code>规范</li></ul><h3 id="i-结果巨硬飘了"><a href="#i-结果巨硬飘了" class="headerlink" title="i.结果巨硬飘了"></a>i.结果巨硬飘了</h3><ul><li>巨硬认为自己的<code>IE6</code>已经无敌了，所以解散了开发小组</li><li>给了<code>chrome</code>巨大的机会（现在反超IE，占有量达到40%）</li></ul><h3 id="ii-Google-Gmail展示了网页的体验也可以那么好"><a href="#ii-Google-Gmail展示了网页的体验也可以那么好" class="headerlink" title="ii.Google Gmail展示了网页的体验也可以那么好"></a>ii.Google Gmail展示了网页的体验也可以那么好</h3><p>页面不刷新，仅局部更新<br>网页的体验强了，很多事情不需要使用软件来完成了。<br>前端程序员开始专心于JavaScript<br>所以还是要感谢伟大的巨硬的<code>ActiveX</code></p><h1 id="1-AJAX"><a href="#1-AJAX" class="headerlink" title="1.AJAX"></a>1.AJAX</h1><p>Jesse James Garrett<br>将异步的<code>JavaScript</code>和<code>XML</code>这两项技术<br>称为<code>AJAX</code></p><ul><li><code>async</code>异步</li><li><code>JavaScript</code>我们热爱的JS</li><li><code>and</code>和</li><li><code>XML</code>XML</li></ul><h2 id="I-技术要点"><a href="#I-技术要点" class="headerlink" title="I.技术要点"></a>I.技术要点</h2><ul><li>使用<code>XMLHttpRequest</code>发送请求</li><li>服务器返回<code>XML</code>格式的字符串（现在都用<code>JSON</code>）</li><li><code>JS</code>解析<code>XML</code>，并更新局部页面</li></ul><p><strong>需要知道如何使用<code>原生JS</code>来发送<code>AJAX</code>请求</strong></p><h2 id="II-格式"><a href="#II-格式" class="headerlink" title="II.格式"></a>II.格式</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myButton.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="params">(e)</span>=&gt;</span>&#123;</span><br><span class="line">    let request = <span class="keyword">new</span> XMLHttpRequest()   <span class="regexp">//</span>声明一个XMLHttpRequest对象</span><br><span class="line">    request.onreadystatechange = <span class="function"><span class="params">()</span>=&gt;</span>&#123;      <span class="regexp">//</span>监听状态改变，尽量往上放</span><br><span class="line">        <span class="built_in">console</span>.log(request.readyState)</span><br><span class="line">    &#125;</span><br><span class="line">    request.open(<span class="string">'GET'</span>, <span class="string">'/xxx'</span>)    <span class="regexp">//</span>配置request <span class="string">'Method'</span>, <span class="string">'url'</span>, <span class="string">'是否异步'</span>后三个一般不传默认就行</span><br><span class="line">    request.send()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="i-readystate"><a href="#i-readystate" class="headerlink" title="i.readystate"></a>i.readystate</h3><p>当前请求的状态</p><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">状态</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">UNSENT（未打开）</td><td style="text-align:center">代理被创建，但尚未调用 open() 方法。</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">OPENED（未发送）</td><td style="text-align:center">open() 方法已经被调用。send（）方法还未被调用</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">HEADERS_RECEIVED（已获取响应头）</td><td style="text-align:center">send() 方法已经被调用，并且头部和状态已经可获得。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">LOADING（正在下载响应体）</td><td style="text-align:center">下载中； responseText 属性已经包含部分数据。</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">DONE（请求完成）</td><td style="text-align:center">整个请求过程已经完毕（请求，已经把响应 下载完毕）</td></tr></tbody></table><h3 id="ii-request-status"><a href="#ii-request-status" class="headerlink" title="ii.request.status"></a>ii.request.status</h3><p>请求得到的响应状态码</p><p><code>&gt;= 200</code>请求成功<br><code>&gt;= 300</code>浏览器会再发一个新的请求<br><code>&gt;= 400</code>请求失败</p><h1 id="2-JSON"><a href="#2-JSON" class="headerlink" title="2.JSON"></a>2.JSON</h1><p>这是一种语言<br>JSON（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）<br>是一种由<strong>Douglas Crockford</strong>构想和设计、轻量级的<strong>数据交换语言</strong><br>该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。</p><ul><li>Douglas和Brandon互相不爽…</li><li>Douglas抄JS写了个JSON</li><li>Douglas写了本蝴蝶书告诉我们JS哪里哪里很毒瘤。明着diss…</li></ul><h2 id="I-JSON-vs-JS"><a href="#I-JSON-vs-JS" class="headerlink" title="I.JSON vs JS"></a>I.JSON vs JS</h2><ul><li>JSON 没有抄 function 和 undefined</li><li>JSON 的字符串首尾必须是 “”</li><li>JSON 对象：{“name”:”Oracle”} JS 对象： {name: ‘Oracle’}</li></ul><table><thead><tr><th style="text-align:center">JS</th><th style="text-align:center">JSON</th></tr></thead><tbody><tr><td style="text-align:center">undefined</td><td style="text-align:center">没有</td></tr><tr><td style="text-align:center">null</td><td style="text-align:center">null</td></tr><tr><td style="text-align:center">[‘a’,’b’]</td><td style="text-align:center">[“a”,”b”]</td></tr><tr><td style="text-align:center">function fn(){}</td><td style="text-align:center">没有</td></tr><tr><td style="text-align:center">{name: ‘Oracle’}</td><td style="text-align:center">{“name”:”Oracle”}</td></tr><tr><td style="text-align:center">‘Oracle’</td><td style="text-align:center">“Oracle”</td></tr><tr><td style="text-align:center">var a = {};a.self = a</td><td style="text-align:center">搞不定（没有变量这个东西）</td></tr><tr><td style="text-align:center"><code>{__proto__}</code></td><td style="text-align:center">没有原型链</td></tr></tbody></table><h2 id="II-为什么用JSON"><a href="#II-为什么用JSON" class="headerlink" title="II.为什么用JSON"></a>II.为什么用JSON</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务器</span></span><br><span class="line"><span class="built_in">else</span> <span class="built_in">if</span> (path === <span class="string">'/xxx'</span>)&#123;</span><br><span class="line">        response.statusCode = <span class="number">200</span></span><br><span class="line">        response.setHeader(<span class="string">'Content-type'</span>, <span class="string">'text/xml;charset=utf-8'</span>)</span><br><span class="line">        response.<span class="built_in">write</span>(`</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"note"</span>:&#123;</span><br><span class="line">                <span class="string">"to"</span>: <span class="string">"James Raynor"</span></span><br><span class="line">                <span class="string">"from"</span>: <span class="string">"Sarah Kerrigan"</span></span><br><span class="line">                <span class="string">"heading"</span>: <span class="string">"Message"</span></span><br><span class="line">                <span class="string">"body"</span>: <span class="string">"For Im the queen of blades.Vengeance shall be mine."</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        `)<span class="comment">//返回一个字符串，这个字符串，凑巧刚好符合JSON对象语法</span></span><br><span class="line">        <span class="comment">// 这不是对象这不是对象这不是对象</span></span><br><span class="line">        response.<span class="built_in">end</span>()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>tigongde<br>tigongde<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let string = request<span class="selector-class">.responseText</span>       <span class="comment">//把JSON字符串放进容器</span></span><br><span class="line">let <span class="selector-tag">object</span> = Window<span class="selector-class">.JSON</span><span class="selector-class">.parse</span>(string)      <span class="comment">//这个 JSON.parse 是浏览器提供的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//把符合JSON语法的字符串，转换成JS中对应的值</span></span><br></pre></td></tr></table></figure></p><p>这时候，前端希望用和 JS 比较像的 JSON ，而放弃使用 XML 了</p><h1 id="3-同源策略与CORS跨域"><a href="#3-同源策略与CORS跨域" class="headerlink" title="3.同源策略与CORS跨域"></a>3.同源策略与CORS跨域</h1><h2 id="I-同源策略"><a href="#I-同源策略" class="headerlink" title="I.同源策略"></a>I.同源策略</h2><p>只有 域名+端口+协议 一模一样才允许发 AJAX 请求</p><ol><li><code>http://baidu.com</code> 可以向 <code>http://www.baidu.com</code> 发 AJAX 请求吗？   ——NO</li><li><code>http://baidu.com：80</code> 可以向 <code>http://baidu.com：81</code> 发 AJAX 请求吗？    ——NO</li></ol><p>为什么？<br>你试试<code>http://www.12306.cn</code>和<code>http://12306.cn</code>是不是同一个网站</p><ul><li>浏览器不能冒险呀，不能让你AJAX各种读用户数据呀。</li></ul><p>浏览器必须保证：</p><ul><li>只有 域名+端口+域名 一模一样才允许发 AJAX 请求</li></ul><h2 id="II-CORS跨域"><a href="#II-CORS跨域" class="headerlink" title="II.CORS跨域"></a>II.CORS跨域</h2><p><strong>C</strong>ross-<strong>O</strong>rigin <strong>R</strong>esource <strong>S</strong>haring<br>跨          站         资源          共享</p><p>除了JSONP还有个别的方法<br>CORS可以：告诉浏览器，我们俩是兄弟呀，别阻止他。</p><p>给你要访问的网站的后端打个电话商量一下。让他在相应接口加一条：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">response</span><span class="selector-class">.setHeader</span>(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'你想允许哪个域名+端口+协议'</span>)</span><br></pre></td></tr></table></figure><p>你们就可以愉快的玩耍了</p><h3 id="为什么要用CORS"><a href="#为什么要用CORS" class="headerlink" title="为什么要用CORS"></a>为什么要用CORS</h3><p>因为 <code>JSONP</code> 不能发 <code>POST</code> 呀</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-关于发送请求&quot;&gt;&lt;a href=&quot;#0-关于发送请求&quot; class=&quot;headerlink&quot; title=&quot;0.关于发送请求&quot;&gt;&lt;/a&gt;0.关于发送请求&lt;/h1&gt;&lt;h2 id=&quot;I-如何发送请求&quot;&gt;&lt;a href=&quot;#I-如何发送请求&quot; class=&quot;head
      
    
    </summary>
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/HTTP/"/>
    
    
      <category term="Ajax" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>JSONP</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/05/07/JSONP/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/05/07/JSONP/</id>
    <published>2018-05-07T12:09:31.000Z</published>
    <updated>2019-03-05T10:16:46.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-有些个名词"><a href="#0-有些个名词" class="headerlink" title="0.有些个名词"></a>0.有些个名词</h1><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域指在受到浏览器同源策略限制时（即不在同一个域下）跨域访问资源的一系列相关操作。<br>所谓跨域，或者异源，是指主机名（域名）、协议、端口号只要有其一不同，就为不同的域（或源）。浏览器中有一个基本的策略，叫同源策略，即限制“源”自己的脚本只能操作“同源”页面的DOM。（不然不乱套了，你的脚本改我的网站怎么办）</p><h3 id="js中的跨域"><a href="#js中的跨域" class="headerlink" title="js中的跨域"></a>js中的跨域</h3><p>对于一段<code>JavaScript</code>脚本来说，其“源”与它存储的地址无关，而取决于脚本被加载的页面（我这里调用jQuery的库就可以用呀）<br>除了<code>&lt;script&gt;</code>，还有<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;link&gt;</code>等都具有跨域加载资源的能力。</p><h2 id="SRJ"><a href="#SRJ" class="headerlink" title="SRJ"></a>SRJ</h2><p>Server Rendered Javascript<br>服务器返回的JS<br>在AJAX出现之前想出的不刷新页面但更新局部页面的方案<br>发送一个<code>script</code>之后<code>remove</code>这个<code>script</code></p><h1 id="1-什么是JSONP"><a href="#1-什么是JSONP" class="headerlink" title="1.什么是JSONP"></a>1.什么是JSONP</h1><p>JSON + padding = JSONP</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&#123;query.callback&#125;.call(<span class="literal">undefined</span>,<span class="comment">/*从这里开始*/</span>&#123;</span><br><span class="line">    <span class="string">"success"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"left"</span>: $&#123;newAmount&#125;</span><br><span class="line">&#125;<span class="comment">/*到这里结束是JSON*/</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//头和尾分别是左右padding</span></span><br></pre></td></tr></table></figure><p>同理String + padding = StringP</p><p>如果按照他的作用命名的话应该叫做：动态标签跨域请求</p><h2 id="I-用文字描述一下它是什么"><a href="#I-用文字描述一下它是什么" class="headerlink" title="I.用文字描述一下它是什么"></a>I.用文字描述一下它是什么</h2><p>请求方： frank.com 的前端程序员（浏览器）<br>响应方： jack.com 的后端程序员</p><p><del>以下functionName均表示要执行的函数名</del></p><h3 id="i-请求方创建script-src指向响应方，同时传一个查询参数-callbackName-functionName"><a href="#i-请求方创建script-src指向响应方，同时传一个查询参数-callbackName-functionName" class="headerlink" title="i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName"></a>i.请求方创建script.src指向响应方，同时传一个查询参数 ?callbackName = functionName</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script<span class="selector-class">.src</span> = <span class="string">'http://jack.com:8002/pay?callback='</span> + functionName</span><br></pre></td></tr></table></figure><h3 id="ii-响应方根据查询参数callbackName，构造形如："><a href="#ii-响应方根据查询参数callbackName，构造形如：" class="headerlink" title="ii.响应方根据查询参数callbackName，构造形如："></a>ii.响应方根据查询参数callbackName，构造形如：</h3><pre><code>1.functionName.call(undefined,&apos;你要的数据&apos;)2.functionName(&apos;你要的数据&apos;)这种响应</code></pre><h3 id="iii-浏览器接收到响应"><a href="#iii-浏览器接收到响应" class="headerlink" title="iii.浏览器接收到响应"></a>iii.浏览器接收到响应</h3><p>就会执行<code>functionName.call(undefined,&#39;你要的数据&#39;)</code></p><h3 id="iv-请求方得到了他要的数据"><a href="#iv-请求方得到了他要的数据" class="headerlink" title="iv.请求方得到了他要的数据"></a>iv.请求方得到了他要的数据</h3><p><strong>这就是JSONP的过程</strong></p><h2 id="II-约定"><a href="#II-约定" class="headerlink" title="II.约定"></a>II.约定</h2><h3 id="i-callbackName"><a href="#i-callbackName" class="headerlink" title="i.callbackName"></a>i.callbackName</h3><p>统一叫做<code>callback</code></p><h3 id="ii-functionName会用随机数"><a href="#ii-functionName会用随机数" class="headerlink" title="ii.functionName会用随机数"></a>ii.functionName会用随机数</h3><p>每个网站都得想个名字是不是很麻烦<br>所以用随机数：<br>避免函数名重复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> functionName = <span class="string">'frank'</span> + <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*<span class="number">100000</span>)</span><br><span class="line"><span class="built_in">window</span>[functionName] = <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//里面改你的dom内容</span></span><br><span class="line">&#125;</span><br><span class="line">script.src = <span class="string">'http://jack.com:8002/pay?callback='</span> + functionName</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">script.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    e.currentTarget.remove()</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>[functionName]     <span class="comment">//反正这个函数只用一次，用完再用就再创建呗</span></span><br><span class="line">&#125;</span><br><span class="line">script.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'fail'</span>)</span><br><span class="line">    e.currentTarget.remove()</span><br><span class="line">    <span class="keyword">delete</span> <span class="built_in">window</span>[functionName]         <span class="comment">//用完干掉，成功失败都要干掉哟。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>用随机数然后用完干掉是为了不污染全局变量</strong></p><h1 id="2-jQuery怎么说的？"><a href="#2-jQuery怎么说的？" class="headerlink" title="2.jQuery怎么说的？"></a>2.jQuery怎么说的？</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url:<span class="string">"http://jack.com:8002/pay"</span>,</span><br><span class="line">    dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"> response </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(response === <span class="string">'success'</span>)&#123;</span><br><span class="line">            amount.innerText = amount.innerText - <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>callback</code>呢？<br>jQuery帮你传了<br>函数呢？<br>jQuery帮你造了</p><p>要管的只有：成功以后执行什么。</p><h2 id="然而这个不是ajax"><a href="#然而这个不是ajax" class="headerlink" title="然而这个不是ajax"></a>然而这个不是ajax</h2><p><code>.ajax</code>这个方法是个动态script</p><h1 id="3-JSONP为什么不支持POST请求"><a href="#3-JSONP为什么不支持POST请求" class="headerlink" title="3.JSONP为什么不支持POST请求"></a>3.JSONP为什么不支持POST请求</h1><p>因为JSONP是通过<strong>动态创建script</strong>的方法进行的，<br>而script<strong>只能</strong>发送GET请求不能发送POST请求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0-有些个名词&quot;&gt;&lt;a href=&quot;#0-有些个名词&quot; class=&quot;headerlink&quot; title=&quot;0.有些个名词&quot;&gt;&lt;/a&gt;0.有些个名词&lt;/h1&gt;&lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨
      
    
    </summary>
    
      <category term="HTTP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/HTTP/"/>
    
    
      <category term="JSONP" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/JSONP/"/>
    
  </entry>
  
  <entry>
    <title>重构-始</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/04/28/%E9%87%8D%E6%9E%84-%E5%A7%8B/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/04/28/重构-始/</id>
    <published>2018-04-28T15:46:19.000Z</published>
    <updated>2019-03-05T10:16:46.631Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-内容样式行为分离"><a href="#1-内容样式行为分离" class="headerlink" title="1.内容样式行为分离"></a>1.内容样式行为分离</h1><p>内容：HTML<br>样式：CSS<br>行为：JS</p><p><strong>为什么？</strong></p><h2 id="I-这时候需要一点点逆向思考："><a href="#I-这时候需要一点点逆向思考：" class="headerlink" title="I.这时候需要一点点逆向思考："></a>I.这时候需要一点点逆向思考：</h2><p>如果不这么做，会怎么样？</p><h3 id="i-HTML写样式？"><a href="#i-HTML写样式？" class="headerlink" title="i.HTML写样式？"></a>i.HTML写样式？</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">background</span>=<span class="string">green</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span> <span class="attr">size</span>=<span class="string">20</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>HTML写样式，那是不是会多出来很多无意义的标签来负责样式。<br>可能会混淆网页的逻辑结构。</p><h3 id="ii-CSS来写内容？"><a href="#ii-CSS来写内容？" class="headerlink" title="ii.CSS来写内容？"></a>ii.CSS来写内容？</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">&lt;div&gt;</span>&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">di</span><span class="variable">v:</span>:after&#123;</span><br><span class="line">    conten<span class="variable">t:</span><span class="string">'你好'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>麻烦了，第一个：选不中<br>第二个：JS选不到</p><h3 id="iii-CSS负责行为？"><a href="#iii-CSS负责行为？" class="headerlink" title="iii.CSS负责行为？"></a>iii.CSS负责行为？</h3><p>加载半年</p><h3 id="iv-JS控制样式？"><a href="#iv-JS控制样式？" class="headerlink" title="iv.JS控制样式？"></a>iv.JS控制样式？</h3><p>这时候可能有点争议<br><code>jQuery</code>有两个很著名的<code>api</code><br><code>$div.show()</code>和<code>$div.hide()</code><br>原则上是不推荐用的</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;<span class="built-in">div</span> id=x&gt;你好&lt;/<span class="built-in">div</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">var <span class="symbol">$</span><span class="built-in">div</span> = <span class="symbol">$</span>(<span class="string">'#x'</span>)</span><br><span class="line"><span class="meta"><span class="meta-keyword">$div</span>.hide()</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$div</span>.show()   //这时候div.style.display 应该是 'block'</span></span><br></pre></td></tr></table></figure><p>那么问题来了：<code>hide</code>肯定是<code>display:none;</code><br>那么<code>show</code>了以后呢？<br>如果一开始在CSS里写好<code>display: none;</code><br>那么<code>show</code>了以后<code>display: block;</code></p><p>变成<code>div</code>默认的了，<code>jQuery</code>在猜，改变后再还原改变之前的属性<br>不是很可靠</p><p>所以上策是改变标签的class</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var <span class="variable">$div</span> = $(<span class="string">'#x'</span>)</span><br><span class="line"><span class="variable">$div</span>.addClass(<span class="string">'active'</span>)  <span class="regexp">//</span>或者<span class="string">'enable'</span> <span class="string">'disable'</span> </span><br><span class="line"><span class="regexp">//</span>之后在css表达他在某种状态的时候的属性</span><br></pre></td></tr></table></figure><h3 id="v-各司其职，其乐融融。"><a href="#v-各司其职，其乐融融。" class="headerlink" title="v.各司其职，其乐融融。"></a>v.各司其职，其乐融融。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-内容样式行为分离&quot;&gt;&lt;a href=&quot;#1-内容样式行为分离&quot; class=&quot;headerlink&quot; title=&quot;1.内容样式行为分离&quot;&gt;&lt;/a&gt;1.内容样式行为分离&lt;/h1&gt;&lt;p&gt;内容：HTML&lt;br&gt;样式：CSS&lt;br&gt;行为：JS&lt;/p&gt;
&lt;p&gt;&lt;str
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/JavaScript/"/>
    
    
      <category term="重构" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/%E9%87%8D%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-始</title>
    <link href="http://brendanzhang.github.io/Brendan-s-Blog/2018/04/26/jQuery-%E5%A7%8B/"/>
    <id>http://brendanzhang.github.io/Brendan-s-Blog/2018/04/26/jQuery-始/</id>
    <published>2018-04-26T11:04:47.000Z</published>
    <updated>2019-03-05T10:16:46.438Z</updated>
    
    <content type="html"><![CDATA[<p>别看jQuery mobile</p><h1 id="1-如何自己实现一个jQuery"><a href="#1-如何自己实现一个jQuery" class="headerlink" title="1.如何自己实现一个jQuery"></a>1.如何自己实现一个jQuery</h1><h2 id="I-找兄弟"><a href="#I-找兄弟" class="headerlink" title="I.找兄弟"></a>I.找兄弟</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item1"</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item2"</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item3"</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item4"</span>&gt;</span>选项4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"item5"</span>&gt;</span>选项5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">getSiblings</span><span class="params">(node)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> allChildren = item3.parentNode.children</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> array = &#123;length: <span class="number">0</span>&#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;allChildren.length; i++)&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">if</span>(allChildren[i]  !== node)&#123;</span></span><br><span class="line"><span class="undefined">                array[array.length] = allChildren[i]</span></span><br><span class="line"><span class="undefined">                array.length += 1</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">return</span> array</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="actionscript">        getSiblings(item3)  <span class="comment">//找兄弟（不包括自己）就完成了</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="II-改class"><a href="#II-改class" class="headerlink" title="II.改class"></a>II.改class</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function addClass(node, classes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (let key <span class="keyword">in</span> classes) &#123;</span><br><span class="line">        <span class="selector-tag">var</span> value = classes[key]</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            item3<span class="selector-class">.classList</span><span class="selector-class">.add</span>(key)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            item3<span class="selector-class">.classList</span><span class="selector-class">.remove</span>(key)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">addClass</span><span class="params">(item3, &#123; a: true, b: false, c: true &#125;)</span></span>     <span class="comment">//改class就完成了</span></span><br></pre></td></tr></table></figure><p>优化一下？</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">addClass</span>(<span class="params">node, classes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> classes) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = classes[key]</span><br><span class="line">        <span class="keyword">var</span> methodName = <span class="keyword">value</span> ? <span class="string">'add'</span> : <span class="string">'remove'</span></span><br><span class="line">        node.classList[methodName](key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">addClass(item3, &#123; a: <span class="literal">true</span>, b: <span class="literal">false</span>, c: <span class="literal">true</span> &#125;)     <span class="comment">//改class就完成了</span></span><br></pre></td></tr></table></figure><h2 id="III-如何优化代码"><a href="#III-如何优化代码" class="headerlink" title="III.如何优化代码"></a>III.如何优化代码</h2><h3 id="i-如果出现类似的代码，就存在优化的可能"><a href="#i-如果出现类似的代码，就存在优化的可能" class="headerlink" title="i.如果出现类似的代码，就存在优化的可能"></a>i.如果出现类似的代码，就存在优化的可能</h3><h2 id="IV-命名空间"><a href="#IV-命名空间" class="headerlink" title="IV.命名空间"></a>IV.命名空间</h2><p>辛辛苦苦封装的函数，得找个方法调用吧<br>所以找一个别人没取过的名字<br>然后放进去，既避免了覆盖变量，又可以方便调用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">window.oracleDOM = &#123;&#125;</span><br><span class="line">oracleDOM.getSiblings = <span class="function">function <span class="title">addClass</span>(<span class="params">node, classes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> classes) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = classes[key]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">value</span>) &#123;</span><br><span class="line">            item3.classList.<span class="keyword">add</span>(key)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            item3.classList.<span class="keyword">remove</span>(key)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oracleDOM.addClass = function (node, classes) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> classes) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">value</span> = classes[key]</span><br><span class="line">        <span class="keyword">var</span> methodName = <span class="keyword">value</span> ? <span class="string">'add'</span> : <span class="string">'remove'</span></span><br><span class="line">        node.classList[methodName](key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">oracleDOM.getSibling(item3)</span><br><span class="line">oracleDOM.addClass(item3,[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><h3 id="i-还是感觉调用很麻烦？"><a href="#i-还是感觉调用很麻烦？" class="headerlink" title="i.还是感觉调用很麻烦？"></a>i.还是感觉调用很麻烦？</h3><p>加到原型链里面去</p><h4 id="找兄弟："><a href="#找兄弟：" class="headerlink" title="找兄弟："></a>找兄弟：</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Node.prorotype.getSiblings = function getSiblings(node)&#123;</span><br><span class="line">    <span class="built_in">var</span> allChildren = this.parentNode.children</span><br><span class="line">    <span class="built_in">var</span> <span class="built_in">array</span> = &#123;<span class="built_in">length</span>: <span class="number">0</span>&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">let</span> i=<span class="number">0</span>; i&lt;allChildren.<span class="built_in">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(allChildren[i]  !== this)&#123;</span><br><span class="line">        <span class="built_in">array</span>[<span class="built_in">array</span>.<span class="built_in">length</span>] = allChildren[i]</span><br><span class="line">        <span class="built_in">array</span>.<span class="built_in">length</span> += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> <span class="built_in">array</span></span><br><span class="line">&#125;</span><br><span class="line">item3.getSiblings()</span><br></pre></td></tr></table></figure><p>这里面把node替换成this，使node作为第一个参数传进去。<br>所以item3.getSiblings()可以将item3作为第一个参数传进去</p><h4 id="加Class："><a href="#加Class：" class="headerlink" title="加Class："></a>加Class：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Node.prototype.addClass = <span class="function"><span class="keyword">function</span> (<span class="params">classes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> classes) &#123;</span><br><span class="line">        <span class="keyword">var</span> value = classes[key]</span><br><span class="line">        <span class="keyword">var</span> methodName = value ? <span class="string">'add'</span> : <span class="string">'remove'</span></span><br><span class="line">        <span class="keyword">this</span>.classList[methodName](key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">item3.addClass([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><p>第一个参数node替换为this，在第五行的<code>node.classList</code>由调用时开头的<code>item3</code>传入</p><h4 id="什么？看不懂这个this？"><a href="#什么？看不懂这个this？" class="headerlink" title="什么？看不懂这个this？"></a>什么？看不懂这个this？</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">item3<span class="selector-class">.getSiblings</span><span class="selector-class">.call</span>(item3)</span><br><span class="line"><span class="comment">//相当于 item3.getSiblings()</span></span><br><span class="line">item3<span class="selector-class">.addClass</span><span class="selector-class">.call</span>(item3, [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br><span class="line"><span class="comment">//相当于 item3.addClass(['a','b','c'])</span></span><br></pre></td></tr></table></figure><p>用call把第一个参数写出来是不是就清楚了<br><strong>不吃糖，好理解，吃糖，写的爽。</strong></p><h3 id="ii-覆盖原型是不是有点不太好？"><a href="#ii-覆盖原型是不是有点不太好？" class="headerlink" title="ii.覆盖原型是不是有点不太好？"></a>ii.覆盖原型是不是有点不太好？</h3><h4 id="通过jQuery这个容器来封装他？"><a href="#通过jQuery这个容器来封装他？" class="headerlink" title="通过jQuery这个容器来封装他？"></a>通过jQuery这个容器来封装他？</h4><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = <span class="function"><span class="keyword">function</span><span class="params">(node)</span></span>&#123;         <span class="comment">//名字改成jQuery</span></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        getSiblings: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">var</span> allChildren = node.parentNode.children      <span class="comment">//这时候node不是this了</span></span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">array</span> = &#123;length: <span class="number">0</span>&#125;                             <span class="comment">//因为现在用的是node2</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;allChildren.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(allChildren[i]  !== node)&#123;</span><br><span class="line">                    <span class="keyword">array</span>[<span class="keyword">array</span>.length] = allChildren[i]</span><br><span class="line">                    <span class="keyword">array</span>.length += <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span></span><br><span class="line">        &#125;,</span><br><span class="line">        addClass: <span class="function"><span class="keyword">function</span><span class="params">(classes)</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key in classes) &#123;</span><br><span class="line">            <span class="keyword">var</span> value = classes[key]</span><br><span class="line">            <span class="keyword">var</span> methodName = value ? <span class="string">'add'</span> : <span class="string">'remove'</span></span><br><span class="line">            node.classList[methodName](key)             <span class="comment">//这里也要改成node了</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node2 = jQuery(item3)</span><br><span class="line">node2.getSiblings()</span><br><span class="line">node2.addClass([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><p>所以jQuery框架就是这个思路，封装函数，随时调用，返回新对象。</p><h1 id="2-jQuery其实还要厉害一点"><a href="#2-jQuery其实还要厉害一点" class="headerlink" title="2.jQuery其实还要厉害一点"></a>2.jQuery其实还要厉害一点</h1><h2 id="I-功能还是多"><a href="#I-功能还是多" class="headerlink" title="I.功能还是多"></a>I.功能还是多</h2><h3 id="i-不但能传节点，还能传别的"><a href="#i-不但能传节点，还能传别的" class="headerlink" title="i.不但能传节点，还能传别的"></a>i.不但能传节点，还能传别的</h3><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">window.jQuery = <span class="function"><span class="keyword">function</span><span class="params">(nodeOrSelector)</span></span>&#123;</span><br><span class="line">    <span class="keyword">let</span> node</span><br><span class="line">    <span class="keyword">if</span>(typeof nodeOrSelector === <span class="string">'string'</span>)&#123;             <span class="comment">//让传入参数还能是个选择器</span></span><br><span class="line">        node = document.querySelector(nodeOrSelector)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                                                  <span class="comment">//内容审查</span></span><br><span class="line">        node = nodeOrSelector</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        getSiblings: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">var</span> allChildren = node.parentNode.children  </span><br><span class="line">            <span class="keyword">var</span> <span class="keyword">array</span> = &#123;length: <span class="number">0</span>&#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;allChildren.length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(allChildren[i]  !== node)&#123;</span><br><span class="line">                    <span class="keyword">array</span>[<span class="keyword">array</span>.length] = allChildren[i]</span><br><span class="line">                    <span class="keyword">array</span>.length += <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">array</span></span><br><span class="line">        &#125;,</span><br><span class="line">        addClass: <span class="function"><span class="keyword">function</span><span class="params">(classes)</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> key in classes) &#123;</span><br><span class="line">                <span class="keyword">var</span> value = classes[key]</span><br><span class="line">                <span class="keyword">var</span> methodName = value ? <span class="string">'add'</span> : <span class="string">'remove'</span></span><br><span class="line">                node.classList[methodName](key)         <span class="comment">//这里node用到了闭包哟</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node2 = jQuery(<span class="string">'#item3'</span>)            <span class="comment">//传入一个选择器</span></span><br><span class="line">node2.getSiblings()</span><br><span class="line">node2.addClass([<span class="string">'red'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])             <span class="comment">//改这个选择器对应标签的class</span></span><br></pre></td></tr></table></figure><h4 id="这期间发生了什么？"><a href="#这期间发生了什么？" class="headerlink" title="这期间发生了什么？"></a>这期间发生了什么？</h4><p>使用<code>jQuery</code>调用字符串<code>#item3</code><br>内容审查发现他是字符串<br>找到相应节点<br><code>node</code>作为容器保存这个节点</p><p><code>jQuery</code>返回一个<code>对象</code><br>对象有两个key：<code>getSiblings</code>和<code>addClass</code></p><p>调用<code>getSiblings</code><br>调用<code>addClass</code><br>发现<code>addClass</code>获取了一个数组（<code>[&#39;red&#39;,&#39;b&#39;,&#39;c&#39;]</code>）以后遍历这个数组<br>之后不停地在<code>node</code>上添加classList<br>这个<code>node</code>就是刚才容器保存的节点</p><h4 id="不信你写个别的选择器试试？"><a href="#不信你写个别的选择器试试？" class="headerlink" title="不信你写个别的选择器试试？"></a>不信你写个别的选择器试试？</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span> node2 = jQuery(<span class="string">'ul &gt; li:nth-child(3)'</span>)            <span class="comment">//传入一个选择器</span></span><br><span class="line">node2.getSiblings()</span><br><span class="line">node2.addClass([<span class="string">'blue'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>])</span><br></pre></td></tr></table></figure><h3 id="ii-我想通过选择器选好几个怎么办？"><a href="#ii-我想通过选择器选好几个怎么办？" class="headerlink" title="ii.我想通过选择器选好几个怎么办？"></a>ii.我想通过选择器选好几个怎么办？</h3><p>那可能要变了个大样了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">nodeOrSelector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> nodes = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> nodeOrSelector === <span class="string">'string'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> temp = <span class="built_in">document</span>.querySelectorAll(nodeOrSelector)    <span class="comment">//希望得到一个伪数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;temp.length; i++)&#123;                    <span class="comment">//不想要NodeList的属性</span></span><br><span class="line">            nodes[i] = temp[i]                            <span class="comment">//遍历容器一个一个加进去</span></span><br><span class="line">        &#125;</span><br><span class="line">        nodes.length = temp.length</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nodeOrSelector <span class="keyword">instanceof</span> Node)&#123;               <span class="comment">//考虑只有一个节点的情况</span></span><br><span class="line">        nodes = &#123;<span class="number">0</span>:nodeOrSelector, <span class="attr">length</span>: <span class="number">1</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    nodes.addClass = <span class="function"><span class="keyword">function</span>(<span class="params">classes</span>)</span>&#123;                  <span class="comment">//调用addClass</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> classes) &#123;                      <span class="comment">//遍历class</span></span><br><span class="line">            <span class="keyword">var</span> value = classes[key]</span><br><span class="line">            <span class="keyword">var</span> methodName = value ? <span class="string">'add'</span> : <span class="string">'remove'</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nodes.length; i++)&#123;</span><br><span class="line">                nodes[i].classList[methodName](key)      <span class="comment">//逐步的放在伪数组的每一项里</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    nodes.getText = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                         <span class="comment">//加个功能，获取文本</span></span><br><span class="line">        <span class="keyword">var</span> texts = []</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt; nodes.length; i++)&#123;               <span class="comment">//遍历后塞进去</span></span><br><span class="line">            texts.push(nodes[i].textContent)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> texts                                    <span class="comment">//返回文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    nodes.setText = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;                     <span class="comment">//再加个功能，设置文本</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nodes.length; i++)&#123;</span><br><span class="line">            nodes[i].textContent = text          <span class="comment">//把传进去的参数text赋予textContent</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//////////////////jQuery不喜欢写get和set所以合并成text/////////////////////</span></span><br><span class="line">    </span><br><span class="line">    nodes.text = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(text === <span class="literal">undefined</span>)&#123;                         <span class="comment">//如果没传参数</span></span><br><span class="line">            <span class="keyword">var</span> texts = []                            <span class="comment">//说明是想获取text</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt; nodes.length; i++)&#123;</span><br><span class="line">                texts.push(nodes[i].textContent)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> texts</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;                                          <span class="comment">//给了参数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;nodes.length; i++)&#123;        <span class="comment">//说明是想设置text</span></span><br><span class="line">                nodes[i].textContent = text</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nodes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node2 = jQuery(<span class="string">'ul &gt; li'</span>)</span><br><span class="line">node2.addClass([<span class="string">'blue'</span>])</span><br><span class="line"><span class="keyword">var</span> text = node2.text()     <span class="comment">//不给参数 === 获取</span></span><br><span class="line">node2.text(<span class="string">'hi'</span>)                <span class="comment">//给了参数 === 设置</span></span><br></pre></td></tr></table></figure><h1 id="3-看看jQuery的文档吧"><a href="#3-看看jQuery的文档吧" class="headerlink" title="3.看看jQuery的文档吧"></a>3.看看jQuery的文档吧</h1><p><code>&lt;script src=&quot;//code.jquery.com/jquery-2.1.1.min.js&quot;&gt;&lt;/script&gt;</code><br>引入jQuery的库，就可以调用它的API了</p><h2 id="I-API"><a href="#I-API" class="headerlink" title="I.API"></a>I.API</h2><p><a href="http://api.jquery.com" target="_blank" rel="noopener">超多API</a></p><h3 id="i-可以几个连着用"><a href="#i-可以几个连着用" class="headerlink" title="i.可以几个连着用"></a>i.可以几个连着用</h3><p>x.onclick = function(){<br>    nodes.removeClass(‘red’).addClass(‘green’)<br>}</p><p>让大家喜爱的<strong>链式操作</strong></p><h2 id="II-jQuery厉害在哪里"><a href="#II-jQuery厉害在哪里" class="headerlink" title="II.jQuery厉害在哪里"></a>II.jQuery厉害在哪里</h2><p>1.兼容性好，1.7兼容到IE6，现在放弃兼容了…<br>2.还有动画、AJAX等模块，DOM操作只是一小部分<br>3.功能强大，功能丰富<br>4.jQuery使用了<code>prototype</code>还有需要了解<code>new</code></p><h2 id="III-的几种用法"><a href="#III-的几种用法" class="headerlink" title="III.$()的几种用法"></a>III.$()的几种用法</h2><h3 id="i-object"><a href="#i-object" class="headerlink" title="i.$(object)"></a>i.$(object)</h3><p>传入一个object，将该对象封装到jQuery对象中并返回</p><h3 id="ii-callback"><a href="#ii-callback" class="headerlink" title="ii.$(callback)"></a>ii.$(callback)</h3><p>传进去参数是函数的时候，在document对象上绑定一个ready事件监听函数，当DOM结构加载完成的时候执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//以上代码和下面的效果是一样的</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...<span class="comment">//代码</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="iii-jQuery-object"><a href="#iii-jQuery-object" class="headerlink" title="iii.$(jQuery object)"></a>iii.$(jQuery object)</h3><p>传进去的参数是一个jQuery对象的时候，则创建该jQuery对象的一个副本并返回。副本与传入jQuery对象的引用完全相同的元素</p><h3 id="iv"><a href="#iv" class="headerlink" title="iv.$()"></a>iv.$()</h3><p>什么都不传，返回一个空jQuery对象，属性length: 0<br>可以用来复用jQuery对象：<br>创建空jQuery对象，需要时先手动修改其中元素，再调用jQuery方法。避免重复创建jQuery对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;别看jQuery mobile&lt;/p&gt;
&lt;h1 id=&quot;1-如何自己实现一个jQuery&quot;&gt;&lt;a href=&quot;#1-如何自己实现一个jQuery&quot; class=&quot;headerlink&quot; title=&quot;1.如何自己实现一个jQuery&quot;&gt;&lt;/a&gt;1.如何自己实现一个jQuer
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://brendanzhang.github.io/Brendan-s-Blog/categories/JavaScript/"/>
    
    
      <category term="JS" scheme="http://brendanzhang.github.io/Brendan-s-Blog/tags/JS/"/>
    
  </entry>
  
</feed>
